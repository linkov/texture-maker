{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10","program":"/Users/linkov/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","image","--edition=2018","/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-Cembed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","-C","metadata=ef2d28306fdac632","-C","extra-filename=-ef2d28306fdac632","--out-dir","/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps","-L","dependency=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps","--extern","bytemuck=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libbytemuck-5bab27a9f0578915.rmeta","--extern","byteorder=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libbyteorder-046b27887fbfd9ca.rmeta","--extern","jpeg=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libjpeg_decoder-6933d219530ff478.rmeta","--extern","num_iter=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libnum_iter-5ee4df081e4c5e5f.rmeta","--extern","num_rational=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libnum_rational-dfeaebfd35f83822.rmeta","--extern","num_traits=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libnum_traits-d28d3cfff003bcad.rmeta","--extern","png=/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libpng-1d2538e6f94c2f4c.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/linkov/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/linkov/Documents/sdwr/texture-maker/texturelib/target/rls/debug/deps/libimage-ef2d28306fdac632.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[13881821162531154803,15974187331439102265]},"crate_root":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src","external_crates":[{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[14920118443260649468,6799873627142870961]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[1844954537018218648,16570159001010767920]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16437105423049283034,13312228696766436902]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[13569262031960136914,926278369663005569]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[9065077540001280346,5972367981040449865]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7013975980446320719,4024400865057542973]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[17617311883804814182,13753176117248034829]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[10627003420787933698,8372112224406474813]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":9,"id":{"name":"backtrace","disambiguator":[17821317327494065584,13808099233817094080]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":10,"id":{"name":"rustc_demangle","disambiguator":[15423047965231407403,416074916754657818]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":11,"id":{"name":"backtrace_sys","disambiguator":[13820017895795527141,8230108407990713412]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[1402496660407379612,10608574961827181449]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":13,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[17535701131653633025,17299066394660958529]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[4797083768912782472,17265154906292509739]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","num":15,"id":{"name":"num_traits","disambiguator":[8916209645052382407,2445784138089502816]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","num":16,"id":{"name":"byteorder","disambiguator":[6703002063498893094,2537813551170700675]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","num":17,"id":{"name":"jpeg_decoder","disambiguator":[9776708529263676677,13010744087685492760]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","num":18,"id":{"name":"num_iter","disambiguator":[2127701035481977293,12357796087691933671]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","num":19,"id":{"name":"num_integer","disambiguator":[14651994352754036599,12362390020897582680]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":20,"id":{"name":"num_rational","disambiguator":[6581976192884881359,6780502165433597567]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":21,"id":{"name":"png","disambiguator":[14822250594641803693,6774907761941178897]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":22,"id":{"name":"bitflags","disambiguator":[9381044780198995522,13151883482406827307]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":23,"id":{"name":"deflate","disambiguator":[999328733130688265,3528937811569505604]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":24,"id":{"name":"adler32","disambiguator":[4142976467485996011,18359325288456695578]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":25,"id":{"name":"crc32fast","disambiguator":[6629283100760726997,4035895062859237530]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":26,"id":{"name":"cfg_if","disambiguator":[17559781862561062301,5532089208612334984]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","num":27,"id":{"name":"miniz_oxide","disambiguator":[9838458631893433694,15935641878556723716]}},{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","num":28,"id":{"name":"bytemuck","disambiguator":[5855760054555648565,8712366375491740697]}}],"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":10187,"line_start":1,"line_end":276,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2996},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7029,"byte_end":7038,"line_start":139,"line_end":139,"column_start":24,"column_end":33},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3035},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7040,"byte_end":7057,"line_start":139,"line_end":139,"column_start":35,"column_end":52},"alias_span":null,"name":"ExtendedColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3459},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3460},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7084,"byte_end":7088,"line_start":141,"line_end":141,"column_start":24,"column_end":28},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":3546},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3547},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7090,"byte_end":7095,"line_start":141,"line_end":141,"column_start":30,"column_end":35},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":3401},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3402},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7097,"byte_end":7100,"line_start":141,"line_end":141,"column_start":37,"column_end":40},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":3488},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3489},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7102,"byte_end":7106,"line_start":141,"line_end":141,"column_start":42,"column_end":46},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":3430},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3431},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7108,"byte_end":7111,"line_start":141,"line_end":141,"column_start":48,"column_end":51},"alias_span":null,"name":"Bgr","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":3517},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3518},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7113,"byte_end":7117,"line_start":141,"line_end":141,"column_start":53,"column_end":57},"alias_span":null,"name":"Bgra","value":"","parent":{"krate":0,"index":13}},{"kind":"Use","ref_id":{"krate":0,"index":2316},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7144,"byte_end":7154,"line_start":143,"line_end":143,"column_start":24,"column_end":34},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":91},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7156,"byte_end":7167,"line_start":143,"line_end":143,"column_start":36,"column_end":47},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2133},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7194,"byte_end":7210,"line_start":145,"line_end":145,"column_start":24,"column_end":40},"alias_span":null,"name":"AnimationDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2159},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7228,"byte_end":7240,"line_start":146,"line_end":146,"column_start":17,"column_end":29},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2146},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7258,"byte_end":7274,"line_start":147,"line_end":147,"column_start":17,"column_end":33},"alias_span":null,"name":"GenericImageView","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2114},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7292,"byte_end":7304,"line_start":148,"line_end":148,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2127},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7322,"byte_end":7337,"line_start":149,"line_end":149,"column_start":17,"column_end":32},"alias_span":null,"name":"ImageDecoderExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2136},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7355,"byte_end":7367,"line_start":150,"line_end":150,"column_start":17,"column_end":29},"alias_span":null,"name":"ImageEncoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3659},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7385,"byte_end":7396,"line_start":151,"line_end":151,"column_start":17,"column_end":28},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3704},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7414,"byte_end":7431,"line_start":152,"line_end":152,"column_start":17,"column_end":34},"alias_span":null,"name":"ImageOutputFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3729},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7449,"byte_end":7457,"line_start":153,"line_end":153,"column_start":17,"column_end":25},"alias_span":null,"name":"Progress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3744},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7504,"byte_end":7510,"line_start":155,"line_end":155,"column_start":17,"column_end":23},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2171},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7528,"byte_end":7536,"line_start":156,"line_end":156,"column_start":17,"column_end":25},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1703},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7583,"byte_end":7597,"line_start":159,"line_end":159,"column_start":18,"column_end":32},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1702},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7616,"byte_end":7625,"line_start":160,"line_end":160,"column_start":18,"column_end":27},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2965},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7676,"byte_end":7687,"line_start":162,"line_end":162,"column_start":18,"column_end":29},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1700},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7706,"byte_end":7714,"line_start":163,"line_end":163,"column_start":18,"column_end":26},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1701},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7733,"byte_end":7742,"line_start":164,"line_end":164,"column_start":18,"column_end":27},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2512},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7767,"byte_end":7778,"line_start":166,"line_end":166,"column_start":22,"column_end":33},"alias_span":null,"name":"FlatSamples","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2219},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7815,"byte_end":7830,"line_start":169,"line_end":169,"column_start":25,"column_end":40},"alias_span":null,"name":"EncodableLayout","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2225},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7832,"byte_end":7841,"line_start":169,"line_end":169,"column_start":42,"column_end":51},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2256},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7843,"byte_end":7848,"line_start":169,"line_end":169,"column_start":53,"column_end":58},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":537},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7918,"byte_end":7930,"line_start":172,"line_end":172,"column_start":37,"column_end":49},"alias_span":null,"name":"guess_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":524},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7932,"byte_end":7936,"line_start":172,"line_end":172,"column_start":51,"column_end":55},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2056},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7965,"byte_end":7981,"line_start":173,"line_end":173,"column_start":27,"column_end":43},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2057},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":7983,"byte_end":8011,"line_start":173,"line_end":173,"column_start":45,"column_end":73},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2048},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8013,"byte_end":8017,"line_start":173,"line_end":173,"column_start":75,"column_end":79},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2052},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8038,"byte_end":8049,"line_start":174,"line_end":174,"column_start":20,"column_end":31},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2054},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8051,"byte_end":8074,"line_start":174,"line_end":174,"column_start":33,"column_end":56},"alias_span":null,"name":"save_buffer_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2050},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8076,"byte_end":8092,"line_start":174,"line_end":174,"column_start":58,"column_end":74},"alias_span":null,"name":"image_dimensions","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":3626},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8121,"byte_end":8133,"line_start":176,"line_end":176,"column_start":26,"column_end":38},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2945},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8163,"byte_end":8168,"line_start":178,"line_end":178,"column_start":28,"column_end":33},"alias_span":null,"name":"Delay","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2938},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8170,"byte_end":8175,"line_start":178,"line_end":178,"column_start":35,"column_end":40},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8177,"byte_end":8183,"line_start":178,"line_end":178,"column_start":42,"column_end":48},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1687},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8406,"byte_end":8419,"line_start":187,"line_end":187,"column_start":9,"column_end":22},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8429,"byte_end":8444,"line_start":188,"line_end":188,"column_start":9,"column_end":24},"alias_span":null,"name":"EnumeratePixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1550},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8454,"byte_end":8472,"line_start":189,"line_end":189,"column_start":9,"column_end":27},"alias_span":null,"name":"EnumeratePixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1528},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8482,"byte_end":8495,"line_start":190,"line_end":190,"column_start":9,"column_end":22},"alias_span":null,"name":"EnumerateRows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1570},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8505,"byte_end":8521,"line_start":191,"line_end":191,"column_start":9,"column_end":25},"alias_span":null,"name":"EnumerateRowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1407},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8531,"byte_end":8537,"line_start":192,"line_end":192,"column_start":9,"column_end":15},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1432},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8547,"byte_end":8556,"line_start":193,"line_end":193,"column_start":9,"column_end":18},"alias_span":null,"name":"PixelsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1454},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8566,"byte_end":8570,"line_start":194,"line_end":194,"column_start":9,"column_end":13},"alias_span":null,"name":"Rows","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1481},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8580,"byte_end":8587,"line_start":195,"line_end":195,"column_start":9,"column_end":16},"alias_span":null,"name":"RowsMut","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":2468},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27977,"byte_end":27981,"line_start":6,"line_end":6,"column_start":21,"column_end":25},"alias_span":null,"name":"Rect","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":2493},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45127,"byte_end":45137,"line_start":9,"line_end":9,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2498},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45175,"byte_end":45185,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2499},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45175,"byte_end":45185,"line_start":11,"line_end":11,"column_start":36,"column_end":46},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":189}},{"kind":"Use","ref_id":{"krate":0,"index":2500},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45187,"byte_end":45195,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2501},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45187,"byte_end":45195,"line_start":11,"line_end":11,"column_start":48,"column_end":56},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":190}},{"kind":"Use","ref_id":{"krate":0,"index":2502},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45197,"byte_end":45205,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2503},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45197,"byte_end":45205,"line_start":11,"line_end":11,"column_start":58,"column_end":66},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":191}},{"kind":"Use","ref_id":{"krate":0,"index":2494},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45207,"byte_end":45214,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2495},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45207,"byte_end":45214,"line_start":11,"line_end":11,"column_start":68,"column_end":75},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":192}},{"kind":"Use","ref_id":{"krate":0,"index":2496},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45216,"byte_end":45224,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2497},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45216,"byte_end":45224,"line_start":11,"line_end":11,"column_start":77,"column_end":85},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":193}},{"kind":"Use","ref_id":{"krate":0,"index":249},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45283,"byte_end":45298,"line_start":15,"line_end":15,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":261},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45300,"byte_end":45324,"line_start":15,"line_end":15,"column_start":22,"column_end":46},"alias_span":null,"name":"flip_horizontal_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":251},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45326,"byte_end":45339,"line_start":15,"line_end":15,"column_start":48,"column_end":61},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":263},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45341,"byte_end":45363,"line_start":15,"line_end":15,"column_start":63,"column_end":85},"alias_span":null,"name":"flip_vertical_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":236},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45365,"byte_end":45374,"line_start":15,"line_end":15,"column_start":87,"column_end":96},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":259},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45380,"byte_end":45398,"line_start":16,"line_end":16,"column_start":5,"column_end":23},"alias_span":null,"name":"rotate180_in_place","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":238},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45400,"byte_end":45409,"line_start":16,"line_end":16,"column_start":25,"column_end":34},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":234},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45411,"byte_end":45419,"line_start":16,"line_end":16,"column_start":36,"column_end":44},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45421,"byte_end":45433,"line_start":16,"line_end":16,"column_start":46,"column_end":58},"alias_span":null,"name":"rotate180_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":240},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45435,"byte_end":45446,"line_start":16,"line_end":16,"column_start":60,"column_end":71},"alias_span":null,"name":"rotate90_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":246},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45448,"byte_end":45460,"line_start":16,"line_end":16,"column_start":73,"column_end":85},"alias_span":null,"name":"rotate270_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45462,"byte_end":45480,"line_start":16,"line_end":16,"column_start":87,"column_end":105},"alias_span":null,"name":"flip_horizontal_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45482,"byte_end":45498,"line_start":16,"line_end":16,"column_start":107,"column_end":123},"alias_span":null,"name":"flip_vertical_in","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45545,"byte_end":45549,"line_start":20,"line_end":20,"column_start":24,"column_end":28},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45551,"byte_end":45560,"line_start":20,"line_end":20,"column_start":30,"column_end":39},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45562,"byte_end":45568,"line_start":20,"line_end":20,"column_start":41,"column_end":47},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45570,"byte_end":45579,"line_start":20,"line_end":20,"column_start":49,"column_end":58},"alias_span":null,"name":"thumbnail","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":415},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45581,"byte_end":45590,"line_start":20,"line_end":20,"column_start":60,"column_end":69},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":293},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45640,"byte_end":45648,"line_start":23,"line_end":23,"column_start":26,"column_end":34},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":288},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45650,"byte_end":45658,"line_start":23,"line_end":23,"column_start":36,"column_end":44},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45660,"byte_end":45666,"line_start":23,"line_end":23,"column_start":46,"column_end":52},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45668,"byte_end":45677,"line_start":23,"line_end":23,"column_start":54,"column_end":63},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":299},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45679,"byte_end":45688,"line_start":23,"line_end":23,"column_start":65,"column_end":74},"alias_span":null,"name":"huerotate","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":332},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45690,"byte_end":45702,"line_start":23,"line_end":23,"column_start":76,"column_end":88},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":286},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45704,"byte_end":45710,"line_start":23,"line_end":23,"column_start":90,"column_end":96},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2488},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45737,"byte_end":45744,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":2489},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45737,"byte_end":45744,"line_start":24,"line_end":24,"column_start":26,"column_end":33},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":222}},{"kind":"Use","ref_id":{"krate":0,"index":304},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45746,"byte_end":45754,"line_start":24,"line_end":24,"column_start":35,"column_end":43},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":175}},{"kind":"Use","ref_id":{"krate":0,"index":468},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":108769,"byte_end":108775,"line_start":5,"line_end":5,"column_start":23,"column_end":29},"alias_span":null,"name":"Reader","value":"","parent":{"krate":0,"index":446}},{"kind":"Use","ref_id":{"krate":0,"index":832},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191966,"byte_end":191976,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BmpDecoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":948},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":192079,"byte_end":192089,"line_start":12,"line_end":12,"column_start":25,"column_end":35},"alias_span":null,"name":"BmpEncoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":952},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":192091,"byte_end":192101,"line_start":12,"line_end":12,"column_start":37,"column_end":47},"alias_span":null,"name":"BMPEncoder","value":"","parent":{"krate":0,"index":721}},{"kind":"Use","ref_id":{"krate":0,"index":998},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258949,"byte_end":258960,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JpegDecoder","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":1111},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":259063,"byte_end":259074,"line_start":12,"line_end":12,"column_start":25,"column_end":36},"alias_span":null,"name":"JpegEncoder","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":2871},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":259076,"byte_end":259088,"line_start":12,"line_end":12,"column_start":38,"column_end":50},"alias_span":null,"name":"PixelDensity","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":2853},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":259090,"byte_end":259106,"line_start":12,"line_end":12,"column_start":52,"column_end":68},"alias_span":null,"name":"PixelDensityUnit","value":"","parent":{"krate":0,"index":973}},{"kind":"Use","ref_id":{"krate":0,"index":1122},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":259108,"byte_end":259119,"line_start":12,"line_end":12,"column_start":70,"column_end":81},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":973}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":10187,"line_start":1,"line_end":276,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":3807},{"krate":0,"index":9},{"krate":0,"index":3809},{"krate":0,"index":10},{"krate":0,"index":3811},{"krate":0,"index":11},{"krate":0,"index":3813},{"krate":0,"index":12},{"krate":0,"index":3815},{"krate":0,"index":13},{"krate":0,"index":3817},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":117},{"krate":0,"index":128},{"krate":0,"index":175},{"krate":0,"index":446},{"krate":0,"index":542},{"krate":0,"index":721},{"krate":0,"index":973},{"krate":0,"index":1194},{"krate":0,"index":1329},{"krate":0,"index":1369},{"krate":0,"index":1710},{"krate":0,"index":1908},{"krate":0,"index":2059},{"krate":0,"index":2204},{"krate":0,"index":2302},{"krate":0,"index":3800},{"krate":0,"index":2315}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.","sig":null,"attributes":[{"value":"! This crate provides native rust implementations of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"! image encoders and decoders and basic image manipulation","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"! functions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":131,"byte_end":134,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Additional documentation can currently also be found in the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":135,"byte_end":198,"line_start":5,"line_end":5,"column_start":1,"column_end":64}},{"value":"! [README.md file which is most easily viewed on github](https://github.com/image-rs/image/blob/master/README.md).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":199,"byte_end":315,"line_start":6,"line_end":6,"column_start":1,"column_end":117}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":316,"byte_end":319,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"! [Jump forward to crate content](#reexports)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":320,"byte_end":367,"line_start":8,"line_end":8,"column_start":1,"column_end":48}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":368,"byte_end":371,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"! # Overview","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":372,"byte_end":386,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":387,"byte_end":390,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"! There are two core problems for which this library provides solutions: a unified interface for image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":391,"byte_end":495,"line_start":12,"line_end":12,"column_start":1,"column_end":105}},{"value":"! encodings and simple generic buffers for their content. It's possible to use either feature","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":496,"byte_end":591,"line_start":13,"line_end":13,"column_start":1,"column_end":96}},{"value":"! without the other. The focus is on a small and stable set of common operations that can be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":592,"byte_end":686,"line_start":14,"line_end":14,"column_start":1,"column_end":95}},{"value":"! supplemented by other specialized crates. The library also prefers safe solutions with few","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":687,"byte_end":781,"line_start":15,"line_end":15,"column_start":1,"column_end":95}},{"value":"! dependencies.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":782,"byte_end":799,"line_start":16,"line_end":16,"column_start":1,"column_end":18}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":800,"byte_end":803,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"! | Format | Decoding | Encoding |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":804,"byte_end":840,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"! | ------ | -------- | -------- |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":841,"byte_end":877,"line_start":19,"line_end":19,"column_start":1,"column_end":37}},{"value":"! | PNG    | All supported color types | Same as decoding |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":878,"byte_end":939,"line_start":20,"line_end":20,"column_start":1,"column_end":62}},{"value":"! | JPEG   | Baseline and progressive | Baseline JPEG |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":940,"byte_end":997,"line_start":21,"line_end":21,"column_start":1,"column_end":58}},{"value":"! | GIF    | Yes | Yes |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":998,"byte_end":1024,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"! | BMP    | Yes | RGB(8), RGBA(8), Gray(8), GrayA(8) |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1025,"byte_end":1082,"line_start":23,"line_end":23,"column_start":1,"column_end":58}},{"value":"! | ICO    | Yes | Yes |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1083,"byte_end":1109,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"! | TIFF   | Baseline(no fax support) + LZW + PackBits | RGB(8), RGBA(8), Gray(8) |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1110,"byte_end":1195,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"! | WebP   | Lossy(Luma channel only) | No |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1196,"byte_end":1242,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"! | PNM    | PBM, PGM, PPM, standard PAM | Yes |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1243,"byte_end":1293,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"! | DDS    | DXT1, DXT3, DXT5 | No |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1294,"byte_end":1332,"line_start":28,"line_end":28,"column_start":1,"column_end":39}},{"value":"! | TGA    | Yes | RGB(8), RGBA(8), BGR(8), BGRA(8), Gray(8), GrayA(8) |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1333,"byte_end":1407,"line_start":29,"line_end":29,"column_start":1,"column_end":75}},{"value":"! | farbfeld | Yes | Yes |","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1408,"byte_end":1436,"line_start":30,"line_end":30,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1437,"byte_end":1440,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"! ## Using images decoders","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1441,"byte_end":1469,"line_start":32,"line_end":32,"column_start":1,"column_end":29}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1470,"byte_end":1473,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"! There exists a huge variety of image formats that are concerned with efficiently encoding image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1474,"byte_end":1573,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"! pixel data and auxiliary meta data for many different purposes. The `image` library provides","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1574,"byte_end":1670,"line_start":35,"line_end":35,"column_start":1,"column_end":97}},{"value":"! decoders for many common formats, depending on the active features. The best way to use them","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1671,"byte_end":1767,"line_start":36,"line_end":36,"column_start":1,"column_end":97}},{"value":"! depends on your use case.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1768,"byte_end":1797,"line_start":37,"line_end":37,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1798,"byte_end":1801,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"! * [`open`] is a very simple way to load images from the file system, automatically deducing the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1802,"byte_end":1901,"line_start":39,"line_end":39,"column_start":1,"column_end":100}},{"value":"!   format but offering little customization.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1902,"byte_end":1949,"line_start":40,"line_end":40,"column_start":1,"column_end":48}},{"value":"! * [`load_from_memory`], [`load_from_memory_with_format`] present a similar interface for images","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":1950,"byte_end":2049,"line_start":41,"line_end":41,"column_start":1,"column_end":100}},{"value":"!   whose encoded data is already present in memory.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2050,"byte_end":2104,"line_start":42,"line_end":42,"column_start":1,"column_end":55}},{"value":"! * [`io::Reader`] is a builder providing a superset of the functions. It offers both","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2105,"byte_end":2192,"line_start":43,"line_end":43,"column_start":1,"column_end":88}},{"value":"!   customization and auto-deduction but is slightly more involved. The main benefit is that the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2193,"byte_end":2291,"line_start":44,"line_end":44,"column_start":1,"column_end":99}},{"value":"!   interface is easier to evolve.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2292,"byte_end":2328,"line_start":45,"line_end":45,"column_start":1,"column_end":37}},{"value":"! * [`ImageDecoder`] is a trait for querying meta data and reading image pixels into a generic","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2329,"byte_end":2425,"line_start":46,"line_end":46,"column_start":1,"column_end":97}},{"value":"!   byte buffer. It also contains a `Read` adaptor for stream reading the pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2426,"byte_end":2509,"line_start":47,"line_end":47,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::from_decoder`] can be used for creating a buffer from a single specific or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2510,"byte_end":2606,"line_start":48,"line_end":48,"column_start":1,"column_end":97}},{"value":"!   any custom decoder implementing the [`ImageDecoder`] trait.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2607,"byte_end":2672,"line_start":49,"line_end":49,"column_start":1,"column_end":66}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2673,"byte_end":2676,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"! [`open`]: fn.open.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2677,"byte_end":2703,"line_start":51,"line_end":51,"column_start":1,"column_end":27}},{"value":"! [`load_from_memory`]: fn.load_from_memory.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2704,"byte_end":2754,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"! [`load_from_memory_with_format`]: fn.load_from_memory_with_format.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2755,"byte_end":2829,"line_start":53,"line_end":53,"column_start":1,"column_end":75}},{"value":"! [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2830,"byte_end":2871,"line_start":54,"line_end":54,"column_start":1,"column_end":42}},{"value":"! [`DynamicImage::from_decoder`]: enum.DynamicImage.html#method.from_decoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2872,"byte_end":2950,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"! [`ImageDecoder`]: trait.ImageDecoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2951,"byte_end":2996,"line_start":56,"line_end":56,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":2997,"byte_end":3000,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"! ## Using image encoders","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3001,"byte_end":3028,"line_start":58,"line_end":58,"column_start":1,"column_end":28}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3029,"byte_end":3032,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"! Encoding pixel data is supported for the majority of formats but not quite as broadly.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3033,"byte_end":3123,"line_start":60,"line_end":60,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3124,"byte_end":3127,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"! * [`DynamicImage::save`] is the converse of `open` and stores a `DynamicImage`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3128,"byte_end":3211,"line_start":62,"line_end":62,"column_start":1,"column_end":84}},{"value":"! * [`DynamicImage::write_to`] can be used to encode an image into any writer, for example into a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3212,"byte_end":3311,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"!   vector of bytes in memory.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3312,"byte_end":3344,"line_start":64,"line_end":64,"column_start":1,"column_end":33}},{"value":"! * [`save_buffer`], [`save_buffer_with_format`] provide a low-level interface for saving an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3345,"byte_end":3445,"line_start":65,"line_end":65,"column_start":1,"column_end":101}},{"value":"!   in the file system, where the library initializes the chosen encoder.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3446,"byte_end":3521,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"! * [`ImageEncoder`] is a trait for encoding a byte buffer of image data and the inverse of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3522,"byte_end":3619,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"!   `ImageDecoder` interface.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3620,"byte_end":3651,"line_start":68,"line_end":68,"column_start":1,"column_end":32}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3652,"byte_end":3655,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"! [`save_buffer`]: #fn.save_buffer.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3656,"byte_end":3697,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"! [`save_buffer_with_format`]: #fn.save_buffer_with_format.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3698,"byte_end":3763,"line_start":71,"line_end":71,"column_start":1,"column_end":66}},{"value":"! [`DynamicImage::save`]: enum.DynamicImage.html#method.save","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3764,"byte_end":3826,"line_start":72,"line_end":72,"column_start":1,"column_end":63}},{"value":"! [`DynamicImage::write_to`]: enum.DynamicImage.html#method.write_to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3827,"byte_end":3897,"line_start":73,"line_end":73,"column_start":1,"column_end":71}},{"value":"! [`ImageEncoder`]: trait.ImageEncoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3898,"byte_end":3943,"line_start":74,"line_end":74,"column_start":1,"column_end":46}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3944,"byte_end":3947,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"! ## Image buffers","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3948,"byte_end":3968,"line_start":76,"line_end":76,"column_start":1,"column_end":21}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3969,"byte_end":3972,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"! The library adds containers for channel data which together form some representation of a 2D","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":3973,"byte_end":4069,"line_start":78,"line_end":78,"column_start":1,"column_end":97}},{"value":"! matrix of pixels. These are all statically typed to avoid misinterpretation of byte data (and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4070,"byte_end":4167,"line_start":79,"line_end":79,"column_start":1,"column_end":98}},{"value":"! since Rust has no standard safe encapsulation for reinterpreting byte slices as another type).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4168,"byte_end":4266,"line_start":80,"line_end":80,"column_start":1,"column_end":99}},{"value":"! The main traits [`GenericImageView`] and [`GenericImage`] model a view on a 2D-matrix of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4267,"byte_end":4359,"line_start":81,"line_end":81,"column_start":1,"column_end":93}},{"value":"! addressable pixels and a buffer of independently accessible pixels respectively.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4360,"byte_end":4444,"line_start":82,"line_end":82,"column_start":1,"column_end":85}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4445,"byte_end":4448,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"! The two main types for owning pixel data are [`ImageBuffer`] and [`DynamicImage`]. Note that","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4449,"byte_end":4545,"line_start":84,"line_end":84,"column_start":1,"column_end":97}},{"value":"! the latter is an enum over well-supported pixel types that also offers conversion","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4546,"byte_end":4631,"line_start":85,"line_end":85,"column_start":1,"column_end":86}},{"value":"! functionality.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4632,"byte_end":4650,"line_start":86,"line_end":86,"column_start":1,"column_end":19}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4651,"byte_end":4654,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"! Additionally, the [`flat`] module contains items for interoperability with generic channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4655,"byte_end":4749,"line_start":88,"line_end":88,"column_start":1,"column_end":95}},{"value":"! matrices and foreign interface. While still strictly typed, these dynamically validate length and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4750,"byte_end":4851,"line_start":89,"line_end":89,"column_start":1,"column_end":102}},{"value":"! other layout assumptions required to provide the trait interface. While they are quite generic, you","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4852,"byte_end":4955,"line_start":90,"line_end":90,"column_start":1,"column_end":104}},{"value":"! should be prepared for a bit of boilerplate when using these types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":4956,"byte_end":5027,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5028,"byte_end":5031,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"! [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5032,"byte_end":5085,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"! [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5086,"byte_end":5131,"line_start":94,"line_end":94,"column_start":1,"column_end":46}},{"value":"! [`ImageBuffer`]: struct.ImageBuffer.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5132,"byte_end":5176,"line_start":95,"line_end":95,"column_start":1,"column_end":45}},{"value":"! [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5177,"byte_end":5221,"line_start":96,"line_end":96,"column_start":1,"column_end":45}},{"value":"! [`flat`]: flat/index.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5222,"byte_end":5251,"line_start":97,"line_end":97,"column_start":1,"column_end":30}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5252,"byte_end":5255,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"! ## A note on format specific features","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5256,"byte_end":5297,"line_start":99,"line_end":99,"column_start":1,"column_end":42}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5298,"byte_end":5301,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"! One of the main goals of `image` is stability, in runtime but also for programmers. This","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5302,"byte_end":5394,"line_start":101,"line_end":101,"column_start":1,"column_end":93}},{"value":"! ensures that performance as well as safety fixes reach a majority of its user base with little","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5395,"byte_end":5493,"line_start":102,"line_end":102,"column_start":1,"column_end":99}},{"value":"! effort. Re-exporting all details of its dependencies would run counter to this goal as it","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5494,"byte_end":5587,"line_start":103,"line_end":103,"column_start":1,"column_end":94}},{"value":"! linked _all_ major version bumps between them and `image`. As such, we are wary of exposing too","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5588,"byte_end":5687,"line_start":104,"line_end":104,"column_start":1,"column_end":100}},{"value":"! many details, or configuration options, that are not shared between different image formats.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5688,"byte_end":5784,"line_start":105,"line_end":105,"column_start":1,"column_end":97}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5785,"byte_end":5788,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"! Nevertheless, the advantage of precise control is hard to ignore. We will thus consider","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5789,"byte_end":5880,"line_start":107,"line_end":107,"column_start":1,"column_end":92}},{"value":"! _wrappers_, not direct re-exports, in either of the following cases:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5881,"byte_end":5953,"line_start":108,"line_end":108,"column_start":1,"column_end":73}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5954,"byte_end":5957,"line_start":109,"line_end":109,"column_start":1,"column_end":4}},{"value":"! 1. A standard specifies that configuration _x_ is required for decoders/encoders and there","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":5958,"byte_end":6052,"line_start":110,"line_end":110,"column_start":1,"column_end":95}},{"value":"!    exists an essentially canonical way to control it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6053,"byte_end":6110,"line_start":111,"line_end":111,"column_start":1,"column_end":58}},{"value":"! 2. At least two different implementations agree on some (sub-)set of features in practice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6111,"byte_end":6205,"line_start":112,"line_end":112,"column_start":1,"column_end":95}},{"value":"! 3. A technical argument including measurements of the performance, space benefits, or otherwise","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6206,"byte_end":6305,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"!    objectively quantified benefits can be made, and the added interface is unlikely to require","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6306,"byte_end":6404,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"!    breaking changes.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6405,"byte_end":6429,"line_start":115,"line_end":115,"column_start":1,"column_end":25}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6430,"byte_end":6433,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"! Features that fulfill two or more criteria are preferred.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6434,"byte_end":6495,"line_start":117,"line_end":117,"column_start":1,"column_end":62}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6496,"byte_end":6499,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"! Re-exports of dependencies that reach version `1` will be discussed when it happens.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6500,"byte_end":6588,"line_start":119,"line_end":119,"column_start":1,"column_end":89}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6590,"byte_end":6612,"line_start":121,"line_end":121,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6613,"byte_end":6644,"line_start":122,"line_end":122,"column_start":1,"column_end":32}},{"value":"deny(unreachable_pub)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6645,"byte_end":6670,"line_start":123,"line_end":123,"column_start":1,"column_end":26}},{"value":"deny(deprecated)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6671,"byte_end":6691,"line_start":124,"line_end":124,"column_start":1,"column_end":21}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6692,"byte_end":6730,"line_start":125,"line_end":125,"column_start":1,"column_end":39}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":6828,"byte_end":6869,"line_start":128,"line_end":128,"column_start":1,"column_end":42}}]},{"kind":"Mod","id":{"krate":0,"index":55},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"error","qualname":"::error","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","parent":null,"children":[{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":2316},{"krate":0,"index":2335},{"krate":0,"index":2337},{"krate":0,"index":2340},{"krate":0,"index":2342},{"krate":0,"index":2364},{"krate":0,"index":2362},{"krate":0,"index":2359},{"krate":0,"index":2355},{"krate":0,"index":2356},{"krate":0,"index":2366},{"krate":0,"index":2369},{"krate":0,"index":2371},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2398},{"krate":0,"index":2396},{"krate":0,"index":2393},{"krate":0,"index":2389},{"krate":0,"index":2390},{"krate":0,"index":2400},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2429},{"krate":0,"index":2427},{"krate":0,"index":2424},{"krate":0,"index":2420},{"krate":0,"index":2421},{"krate":0,"index":2417},{"krate":0,"index":2418},{"krate":0,"index":2431},{"krate":0,"index":2455},{"krate":0,"index":2453},{"krate":0,"index":2450},{"krate":0,"index":2446},{"krate":0,"index":2447},{"krate":0,"index":63},{"krate":0,"index":67},{"krate":0,"index":72},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89},{"krate":0,"index":91},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":106},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":115}],"decl_id":null,"docs":" Contains detailed error representation.","sig":null,"attributes":[{"value":"! Contains detailed error representation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10189,"byte_end":10232,"line_start":1,"line_end":1,"column_start":1,"column_end":44}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10233,"byte_end":10236,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! See the main [`ImageError`] which contains a variant for each specialized error type. The","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10237,"byte_end":10330,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"! subtypes used in each variant are opaque by design. They can be roughly inspected through their","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10331,"byte_end":10430,"line_start":4,"line_end":4,"column_start":1,"column_end":100}},{"value":"! respective `kind` methods which work similar to `std::io::Error::kind`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10431,"byte_end":10506,"line_start":5,"line_end":5,"column_start":1,"column_end":76}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10507,"byte_end":10510,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"! The error interface makes it possible to inspect the error of an underlying decoder or encoder,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10511,"byte_end":10610,"line_start":7,"line_end":7,"column_start":1,"column_end":100}},{"value":"! through the `Error::source` method. Note that this is not part of the stable interface and you","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10611,"byte_end":10709,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"! may not rely on a particular error value for a particular operation. This means mainly that","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10710,"byte_end":10805,"line_start":9,"line_end":9,"column_start":1,"column_end":96}},{"value":"! `image` does not promise to remain on a particular version of its underlying decoders but if","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10806,"byte_end":10902,"line_start":10,"line_end":10,"column_start":1,"column_end":97}},{"value":"! you ensure to use the same version of the dependency (or at least of the error type) through","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":10903,"byte_end":10999,"line_start":11,"line_end":11,"column_start":1,"column_end":97}},{"value":"! external means then you could inspect the error type in slightly more detail.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11000,"byte_end":11081,"line_start":12,"line_end":12,"column_start":1,"column_end":82}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11082,"byte_end":11085,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"! [`ImageError`]: enum.ImageError.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11086,"byte_end":11126,"line_start":14,"line_end":14,"column_start":1,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2317},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11838,"byte_end":11846,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Decoding","qualname":"::error::ImageError::Decoding","value":"ImageError::Decoding(DecodingError)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" An error was encountered while decoding.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11555,"byte_end":11599,"line_start":29,"line_end":29,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11604,"byte_end":11607,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ This means that the input data did not conform to the specification of some image format,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11612,"byte_end":11705,"line_start":31,"line_end":31,"column_start":5,"column_end":98}},{"value":"/ or that no format could be determined, or that it did not match format specific","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11710,"byte_end":11793,"line_start":32,"line_end":32,"column_start":5,"column_end":88}},{"value":"/ requirements set by the caller.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11798,"byte_end":11833,"line_start":33,"line_end":33,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2320},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12232,"byte_end":12240,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::error::ImageError::Encoding","value":"ImageError::Encoding(EncodingError)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" An error was encountered while encoding.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11868,"byte_end":11912,"line_start":36,"line_end":36,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11917,"byte_end":11920,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ The input image can not be encoded with the chosen format, for example because the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11925,"byte_end":12011,"line_start":38,"line_end":38,"column_start":5,"column_end":91}},{"value":"/ specification has no representation for its color space or because a necessary conversion","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12016,"byte_end":12109,"line_start":39,"line_end":39,"column_start":5,"column_end":98}},{"value":"/ is ambiguous. In some cases it might also happen that the dimensions can not be used with","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12114,"byte_end":12207,"line_start":40,"line_end":40,"column_start":5,"column_end":98}},{"value":"/ the format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12212,"byte_end":12227,"line_start":41,"line_end":41,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2323},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12480,"byte_end":12489,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"Parameter","qualname":"::error::ImageError::Parameter","value":"ImageError::Parameter(ParameterError)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" An error was encountered in input arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in input arguments.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12262,"byte_end":12310,"line_start":44,"line_end":44,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12315,"byte_end":12318,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This is a catch-all case for strictly internal operations such as scaling, conversions,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12323,"byte_end":12414,"line_start":46,"line_end":46,"column_start":5,"column_end":96}},{"value":"/ etc. that involve no external format specifications.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12419,"byte_end":12475,"line_start":47,"line_end":47,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2326},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12749,"byte_end":12755,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Limits","qualname":"::error::ImageError::Limits","value":"ImageError::Limits(LimitError)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12512,"byte_end":12589,"line_start":50,"line_end":50,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12594,"byte_end":12597,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ Errors of this type are limits set by the user or environment, *not* inherent in a specific","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12602,"byte_end":12697,"line_start":52,"line_end":52,"column_start":5,"column_end":100}},{"value":"/ format or operation that was executed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12702,"byte_end":12744,"line_start":53,"line_end":53,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2329},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13093,"byte_end":13104,"line_start":62,"line_end":62,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::error::ImageError::Unsupported","value":"ImageError::Unsupported(UnsupportedError)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" An operation can not be completed by the chosen abstraction.","sig":null,"attributes":[{"value":"/ An operation can not be completed by the chosen abstraction.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12774,"byte_end":12838,"line_start":56,"line_end":56,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12843,"byte_end":12846,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This means that it might be possible for the operation to succeed in general but","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12851,"byte_end":12935,"line_start":58,"line_end":58,"column_start":5,"column_end":89}},{"value":"/ * it requires a disabled feature,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12940,"byte_end":12977,"line_start":59,"line_end":59,"column_start":5,"column_end":42}},{"value":"/ * the implementation does not yet exist, or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":12982,"byte_end":13029,"line_start":60,"line_end":60,"column_start":5,"column_end":52}},{"value":"/ * no abstraction for a lower level could be found.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13034,"byte_end":13088,"line_start":61,"line_end":61,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2332},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13195,"byte_end":13202,"line_start":65,"line_end":65,"column_start":5,"column_end":12},"name":"IoError","qualname":"::error::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2316},"children":[],"decl_id":null,"docs":" An error occurred while interacting with the environment.\n","sig":null,"attributes":[{"value":"/ An error occurred while interacting with the environment.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13129,"byte_end":13190,"line_start":64,"line_end":64,"column_start":5,"column_end":66}}]},{"kind":"Enum","id":{"krate":0,"index":2316},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11538,"byte_end":11548,"line_start":28,"line_end":28,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::error::ImageError","value":"pub enum ImageError {\n\n    /// An error was encountered while decoding.\n    ///\n    /// This means that the input data did not conform to the specification of some image format,\n    /// or that no format could be determined, or that it did not match format specific\n    /// requirements set by the caller.\n    Decoding(DecodingError),\n\n    /// An error was encountered while encoding.\n    ///\n    /// The input image can not be encoded with the chosen format, for example because the\n    /// specification has no representation for its color space or because a necessary conversion\n    /// is ambiguous. In some cases it might also happen that the dimensions can not be used with\n    /// the format.\n    Encoding(EncodingError),\n\n    /// An error was encountered in input arguments.\n    ///\n    /// This is a catch-all case for strictly internal operations such as scaling, conversions,\n    /// etc. that involve no external format specifications.\n    Parameter(ParameterError),\n\n    /// Completing the operation would have required more resources than allowed.\n    ///\n    /// Errors of this type are limits set by the user or environment, *not* inherent in a specific\n    /// format or operation that was executed.\n    Limits(LimitError),\n\n    /// An operation can not be completed by the chosen abstraction.\n    ///\n    /// This means that it might be possible for the operation to succeed in general but\n    /// * it requires a disabled feature,\n    /// * the implementation does not yet exist, or\n    /// * no abstraction for a lower level could be found.\n    Unsupported(UnsupportedError),\n\n    /// An error occurred while interacting with the environment.\n    IoError(io::Error),\n}","parent":null,"children":[{"krate":0,"index":2317},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2326},{"krate":0,"index":2329},{"krate":0,"index":2332}],"decl_id":null,"docs":" The generic error type for image operations.","sig":null,"attributes":[{"value":"/ The generic error type for image operations.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11280,"byte_end":11328,"line_start":23,"line_end":23,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11329,"byte_end":11332,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This high level enum allows, by variant matching, a rough separation of concerns between","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11333,"byte_end":11425,"line_start":25,"line_end":25,"column_start":1,"column_end":93}},{"value":"/ underlying IO, the caller, format specifications, and the `image` implementation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":11426,"byte_end":11511,"line_start":26,"line_end":26,"column_start":1,"column_end":86}}]},{"kind":"Struct","id":{"krate":0,"index":2337},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13434,"byte_end":13450,"line_start":74,"line_end":74,"column_start":12,"column_end":28},"name":"UnsupportedError","qualname":"::error::UnsupportedError","value":"UnsupportedError {  }","parent":null,"children":[{"krate":0,"index":2338},{"krate":0,"index":2339}],"decl_id":null,"docs":" The implementation for an operation was not provided.","sig":null,"attributes":[{"value":"/ The implementation for an operation was not provided.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13218,"byte_end":13275,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13276,"byte_end":13279,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ See the variant [`Unsupported`] for more documentation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13280,"byte_end":13339,"line_start":70,"line_end":70,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13340,"byte_end":13343,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`Unsupported`]: enum.ImageError.html#variant.Unsupported","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13344,"byte_end":13405,"line_start":72,"line_end":72,"column_start":1,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2343},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13689,"byte_end":13694,"line_start":83,"line_end":83,"column_start":5,"column_end":10},"name":"Color","qualname":"::error::UnsupportedErrorKind::Color","value":"UnsupportedErrorKind::Color(ExtendedColorType)","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":" The required color type can not be handled.\n","sig":null,"attributes":[{"value":"/ The required color type can not be handled.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13637,"byte_end":13684,"line_start":82,"line_end":82,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2346},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13761,"byte_end":13767,"line_start":85,"line_end":85,"column_start":5,"column_end":11},"name":"Format","qualname":"::error::UnsupportedErrorKind::Format","value":"UnsupportedErrorKind::Format(ImageFormatHint)","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":" An image format is not supported.\n","sig":null,"attributes":[{"value":"/ An image format is not supported.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13719,"byte_end":13756,"line_start":84,"line_end":84,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2349},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13911,"byte_end":13925,"line_start":88,"line_end":88,"column_start":5,"column_end":19},"name":"GenericFeature","qualname":"::error::UnsupportedErrorKind::GenericFeature","value":"UnsupportedErrorKind::GenericFeature(String)","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":" Some feature specified by string.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ Some feature specified by string.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13790,"byte_end":13827,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13832,"byte_end":13906,"line_start":87,"line_end":87,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2352},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13958,"byte_end":13973,"line_start":90,"line_end":90,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::UnsupportedErrorKind::__NonExhaustive","value":"UnsupportedErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2342},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2342},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13610,"byte_end":13630,"line_start":81,"line_end":81,"column_start":10,"column_end":30},"name":"UnsupportedErrorKind","qualname":"::error::UnsupportedErrorKind","value":"pub enum UnsupportedErrorKind {\n\n    /// The required color type can not be handled.\n    Color(ExtendedColorType),\n\n    /// An image format is not supported.\n    Format(ImageFormatHint),\n\n    /// Some feature specified by string.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    GenericFeature(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2343},{"krate":0,"index":2346},{"krate":0,"index":2349},{"krate":0,"index":2352}],"decl_id":null,"docs":" Details what feature is not supported.\n","sig":null,"attributes":[{"value":"/ Details what feature is not supported.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13517,"byte_end":13559,"line_start":79,"line_end":79,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14292,"byte_end":14305,"line_start":100,"line_end":100,"column_start":12,"column_end":25},"name":"EncodingError","qualname":"::error::EncodingError","value":"EncodingError {  }","parent":null,"children":[{"krate":0,"index":2367},{"krate":0,"index":2368}],"decl_id":null,"docs":" An error was encountered while encoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while encoding an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":13999,"byte_end":14052,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14053,"byte_end":14056,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Encoding`] variant. See its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14057,"byte_end":14151,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14152,"byte_end":14191,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14192,"byte_end":14195,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Encoding`]: enum.ImageError.html#variant.Encoding","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14196,"byte_end":14263,"line_start":98,"line_end":98,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2371},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14687,"byte_end":14701,"line_start":113,"line_end":113,"column_start":12,"column_end":26},"name":"ParameterError","qualname":"::error::ParameterError","value":"ParameterError {  }","parent":null,"children":[{"krate":0,"index":2372},{"krate":0,"index":2373}],"decl_id":null,"docs":" An error was encountered in inputs arguments.","sig":null,"attributes":[{"value":"/ An error was encountered in inputs arguments.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14395,"byte_end":14444,"line_start":106,"line_end":106,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14445,"byte_end":14448,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Parameter`] variant. See its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14449,"byte_end":14544,"line_start":108,"line_end":108,"column_start":1,"column_end":96}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14545,"byte_end":14584,"line_start":109,"line_end":109,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14585,"byte_end":14588,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Parameter`]: enum.ImageError.html#variant.Parameter","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14589,"byte_end":14658,"line_start":111,"line_end":111,"column_start":1,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2377},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14949,"byte_end":14966,"line_start":122,"line_end":122,"column_start":5,"column_end":22},"name":"DimensionMismatch","qualname":"::error::ParameterErrorKind::DimensionMismatch","value":"ParameterErrorKind::DimensionMismatch","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" The dimensions passed are wrong.\n","sig":null,"attributes":[{"value":"/ The dimensions passed are wrong.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14908,"byte_end":14944,"line_start":121,"line_end":121,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2379},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15064,"byte_end":15077,"line_start":124,"line_end":124,"column_start":5,"column_end":18},"name":"FailedAlready","qualname":"::error::ParameterErrorKind::FailedAlready","value":"ParameterErrorKind::FailedAlready","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" Repeated an operation for which error that could not be cloned was emitted already.\n","sig":null,"attributes":[{"value":"/ Repeated an operation for which error that could not be cloned was emitted already.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14972,"byte_end":15059,"line_start":123,"line_end":123,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2381},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15205,"byte_end":15212,"line_start":127,"line_end":127,"column_start":5,"column_end":12},"name":"Generic","qualname":"::error::ParameterErrorKind::Generic","value":"ParameterErrorKind::Generic(String)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" A string describing the parameter.\n This is discouraged and is likely to get deprecated (but not removed).\n","sig":null,"attributes":[{"value":"/ A string describing the parameter.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15083,"byte_end":15121,"line_start":125,"line_end":125,"column_start":5,"column_end":43}},{"value":"/ This is discouraged and is likely to get deprecated (but not removed).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15126,"byte_end":15200,"line_start":126,"line_end":126,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2384},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15273,"byte_end":15283,"line_start":129,"line_end":129,"column_start":5,"column_end":15},"name":"NoMoreData","qualname":"::error::ParameterErrorKind::NoMoreData","value":"ParameterErrorKind::NoMoreData","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" The end of the image has been reached.\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15226,"byte_end":15268,"line_start":128,"line_end":128,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2386},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15367,"byte_end":15382,"line_start":132,"line_end":132,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ParameterErrorKind::__NonExhaustive","value":"ParameterErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2376},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15308,"byte_end":15362,"line_start":131,"line_end":131,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2376},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14883,"byte_end":14901,"line_start":120,"line_end":120,"column_start":10,"column_end":28},"name":"ParameterErrorKind","qualname":"::error::ParameterErrorKind","value":"pub enum ParameterErrorKind {\n\n    /// The dimensions passed are wrong.\n    DimensionMismatch,\n\n    /// Repeated an operation for which error that could not be cloned was emitted already.\n    FailedAlready,\n\n    /// A string describing the parameter.\n    /// This is discouraged and is likely to get deprecated (but not removed).\n    Generic(String),\n\n    /// The end of the image has been reached.\n    NoMoreData,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2377},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2384},{"krate":0,"index":2386}],"decl_id":null,"docs":" Details how a parameter is malformed.\n","sig":null,"attributes":[{"value":"/ Details how a parameter is malformed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":14791,"byte_end":14832,"line_start":118,"line_end":118,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2400},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15701,"byte_end":15714,"line_start":142,"line_end":142,"column_start":12,"column_end":25},"name":"DecodingError","qualname":"::error::DecodingError","value":"DecodingError {  }","parent":null,"children":[{"krate":0,"index":2401},{"krate":0,"index":2402}],"decl_id":null,"docs":" An error was encountered while decoding an image.","sig":null,"attributes":[{"value":"/ An error was encountered while decoding an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15408,"byte_end":15461,"line_start":135,"line_end":135,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15462,"byte_end":15465,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Decoding`] variant. See its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15466,"byte_end":15560,"line_start":137,"line_end":137,"column_start":1,"column_end":95}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15561,"byte_end":15600,"line_start":138,"line_end":138,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15601,"byte_end":15604,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Decoding`]: enum.ImageError.html#variant.Decoding","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15605,"byte_end":15672,"line_start":140,"line_end":140,"column_start":1,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":2405},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16114,"byte_end":16124,"line_start":154,"line_end":154,"column_start":12,"column_end":22},"name":"LimitError","qualname":"::error::LimitError","value":"LimitError {  }","parent":null,"children":[{"krate":0,"index":2406}],"decl_id":null,"docs":" Completing the operation would have required more resources than allowed.","sig":null,"attributes":[{"value":"/ Completing the operation would have required more resources than allowed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15803,"byte_end":15880,"line_start":147,"line_end":147,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15881,"byte_end":15884,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This is used as an opaque representation for the [`ImageError::Limits`] variant. See its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15885,"byte_end":15977,"line_start":149,"line_end":149,"column_start":1,"column_end":93}},{"value":"/ documentation for more information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":15978,"byte_end":16017,"line_start":150,"line_end":150,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16018,"byte_end":16021,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [`ImageError::Limits`]: enum.ImageError.html#variant.Limits","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16022,"byte_end":16085,"line_start":152,"line_end":152,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2410},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16656,"byte_end":16670,"line_start":167,"line_end":167,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::error::LimitErrorKind::DimensionError","value":"LimitErrorKind::DimensionError","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" The resulting image exceed dimension limits in either direction.\n","sig":null,"attributes":[{"value":"/ The resulting image exceed dimension limits in either direction.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16583,"byte_end":16651,"line_start":166,"line_end":166,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2412},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16754,"byte_end":16772,"line_start":169,"line_end":169,"column_start":5,"column_end":23},"name":"InsufficientMemory","qualname":"::error::LimitErrorKind::InsufficientMemory","value":"LimitErrorKind::InsufficientMemory","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" The operation would have performed an allocation larger than allowed.\n","sig":null,"attributes":[{"value":"/ The operation would have performed an allocation larger than allowed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16676,"byte_end":16749,"line_start":168,"line_end":168,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2414},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16856,"byte_end":16871,"line_start":172,"line_end":172,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::LimitErrorKind::__NonExhaustive","value":"LimitErrorKind::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2409},"children":[],"decl_id":null,"docs":" Do not use this, not part of stability guarantees.\n","sig":null,"attributes":[{"value":"/ Do not use this, not part of stability guarantees.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16797,"byte_end":16851,"line_start":171,"line_end":171,"column_start":5,"column_end":59}}]},{"kind":"Enum","id":{"krate":0,"index":2409},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16562,"byte_end":16576,"line_start":165,"line_end":165,"column_start":10,"column_end":24},"name":"LimitErrorKind","qualname":"::error::LimitErrorKind","value":"pub enum LimitErrorKind {\n\n    /// The resulting image exceed dimension limits in either direction.\n    DimensionError,\n\n    /// The operation would have performed an allocation larger than allowed.\n    InsufficientMemory,\n\n    #[doc(hidden)]\n    /// Do not use this, not part of stability guarantees.\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2410},{"krate":0,"index":2412},{"krate":0,"index":2414}],"decl_id":null,"docs":" Indicates the limit that prevented an operation from completing.","sig":null,"attributes":[{"value":"/ Indicates the limit that prevented an operation from completing.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16195,"byte_end":16263,"line_start":159,"line_end":159,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16264,"byte_end":16267,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ Note that this enumeration is not exhaustive and may in the future be extended to provide more","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16268,"byte_end":16366,"line_start":161,"line_end":161,"column_start":1,"column_end":99}},{"value":"/ detailed information or to incorporate other resources types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16367,"byte_end":16432,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16478,"byte_end":16516,"line_start":164,"line_end":164,"column_start":1,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2432},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17058,"byte_end":17063,"line_start":179,"line_end":179,"column_start":5,"column_end":10},"name":"Exact","qualname":"::error::ImageFormatHint::Exact","value":"ImageFormatHint::Exact(ImageFormat)","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" The format is known exactly.\n","sig":null,"attributes":[{"value":"/ The format is known exactly.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17021,"byte_end":17053,"line_start":178,"line_end":178,"column_start":5,"column_end":37}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2435},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17131,"byte_end":17135,"line_start":182,"line_end":182,"column_start":5,"column_end":9},"name":"Name","qualname":"::error::ImageFormatHint::Name","value":"ImageFormatHint::Name(String)","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" The format can be identified by a name.\n","sig":null,"attributes":[{"value":"/ The format can be identified by a name.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17083,"byte_end":17126,"line_start":181,"line_end":181,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2438},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17207,"byte_end":17220,"line_start":185,"line_end":185,"column_start":5,"column_end":18},"name":"PathExtension","qualname":"::error::ImageFormatHint::PathExtension","value":"ImageFormatHint::PathExtension(std::path::PathBuf)","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" A common path extension for the format is known.\n","sig":null,"attributes":[{"value":"/ A common path extension for the format is known.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17150,"byte_end":17202,"line_start":184,"line_end":184,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2441},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17307,"byte_end":17314,"line_start":188,"line_end":188,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::error::ImageFormatHint::Unknown","value":"ImageFormatHint::Unknown","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":" The format is not known or could not be determined.\n","sig":null,"attributes":[{"value":"/ The format is not known or could not be determined.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17247,"byte_end":17302,"line_start":187,"line_end":187,"column_start":5,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2443},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17340,"byte_end":17355,"line_start":191,"line_end":191,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::error::ImageFormatHint::__NonExhaustive","value":"ImageFormatHint::__NonExhaustive(NonExhaustiveMarker)","parent":{"krate":0,"index":2431},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2431},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16999,"byte_end":17014,"line_start":177,"line_end":177,"column_start":10,"column_end":25},"name":"ImageFormatHint","qualname":"::error::ImageFormatHint","value":"pub enum ImageFormatHint {\n\n    /// The format is known exactly.\n    Exact(ImageFormat),\n\n    /// The format can be identified by a name.\n    Name(String),\n\n    /// A common path extension for the format is known.\n    PathExtension(std::path::PathBuf),\n\n    /// The format is not known or could not be determined.\n    Unknown,\n\n    #[doc(hidden)]\n    __NonExhaustive(NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2432},{"krate":0,"index":2435},{"krate":0,"index":2438},{"krate":0,"index":2441},{"krate":0,"index":2443}],"decl_id":null,"docs":" A best effort representation for image formats.\n","sig":null,"attributes":[{"value":"/ A best effort representation for image formats.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":16897,"byte_end":16948,"line_start":175,"line_end":175,"column_start":1,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17627,"byte_end":17647,"line_start":199,"line_end":199,"column_start":12,"column_end":32},"name":"from_format_and_kind","qualname":"<UnsupportedError>::from_format_and_kind","value":"pub fn from_format_and_kind(ImageFormatHint, UnsupportedErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `UnsupportedError` for an image with details on the unsupported feature.","sig":null,"attributes":[{"value":"/ Create an `UnsupportedError` for an image with details on the unsupported feature.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17409,"byte_end":17495,"line_start":195,"line_end":195,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17500,"byte_end":17503,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ If the operation was not connected to a particular image format then the hint may be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17508,"byte_end":17596,"line_start":197,"line_end":197,"column_start":5,"column_end":93}},{"value":"/ `Unknown`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17601,"byte_end":17615,"line_start":198,"line_end":198,"column_start":5,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17875,"byte_end":17879,"line_start":207,"line_end":207,"column_start":12,"column_end":16},"name":"kind","qualname":"<UnsupportedError>::kind","value":"pub fn kind(&Self) -> UnsupportedErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `UnsupportedErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `UnsupportedErrorKind` of the error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17797,"byte_end":17863,"line_start":206,"line_end":206,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18018,"byte_end":18029,"line_start":212,"line_end":212,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<UnsupportedError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17950,"byte_end":18006,"line_start":211,"line_end":211,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18221,"byte_end":18224,"line_start":219,"line_end":219,"column_start":12,"column_end":15},"name":"new","qualname":"<DecodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.\n","sig":null,"attributes":[{"value":"/ Create a `DecodingError` that stems from an arbitrary error of an underlying decoder.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18120,"byte_end":18209,"line_start":218,"line_end":218,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18592,"byte_end":18608,"line_start":232,"line_end":232,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<DecodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a `DecodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create a `DecodingError` for an image format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18436,"byte_end":18485,"line_start":229,"line_end":229,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18490,"byte_end":18493,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18498,"byte_end":18580,"line_start":231,"line_end":231,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18807,"byte_end":18818,"line_start":240,"line_end":240,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<DecodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Returns the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Returns the image format associated with this error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18739,"byte_end":18795,"line_start":239,"line_end":239,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19011,"byte_end":19014,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"new","qualname":"<EncodingError>::new","value":"pub fn new<impl Into<Box<dyn Error + Send + Sync>>: Into<Box<Error + Send +\n                                                             Sync>>>(ImageFormatHint,\n                                                                     impl Into<Box<dyn Error + Send + Sync>>)\n-> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.\n","sig":null,"attributes":[{"value":"/ Create an `EncodingError` that stems from an arbitrary error of an underlying encoder.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18909,"byte_end":18999,"line_start":246,"line_end":246,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19383,"byte_end":19399,"line_start":260,"line_end":260,"column_start":12,"column_end":28},"name":"from_format_hint","qualname":"<EncodingError>::from_format_hint","value":"pub fn from_format_hint(ImageFormatHint) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create an `EncodingError` for an image format.","sig":null,"attributes":[{"value":"/ Create an `EncodingError` for an image format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19226,"byte_end":19276,"line_start":257,"line_end":257,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19281,"byte_end":19284,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ The error will not contain any further information but is very easy to create.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19289,"byte_end":19371,"line_start":259,"line_end":259,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19597,"byte_end":19608,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"format_hint","qualname":"<EncodingError>::format_hint","value":"pub fn format_hint(&Self) -> ImageFormatHint","parent":null,"children":[],"decl_id":null,"docs":" Return the image format associated with this error.\n","sig":null,"attributes":[{"value":"/ Return the image format associated with this error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19530,"byte_end":19585,"line_start":267,"line_end":267,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19780,"byte_end":19789,"line_start":275,"line_end":275,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<ParameterError>::from_kind","value":"pub fn from_kind(ParameterErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a `ParameterError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a `ParameterError` directly from a corresponding kind.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19700,"byte_end":19768,"line_start":274,"line_end":274,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19996,"byte_end":20000,"line_start":283,"line_end":283,"column_start":12,"column_end":16},"name":"kind","qualname":"<ParameterError>::kind","value":"pub fn kind(&Self) -> ParameterErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `ParameterErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `ParameterErrorKind` of the error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19920,"byte_end":19984,"line_start":282,"line_end":282,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20173,"byte_end":20182,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"from_kind","qualname":"<LimitError>::from_kind","value":"pub fn from_kind(LimitErrorKind) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic `LimitError` directly from a corresponding kind.\n","sig":null,"attributes":[{"value":"/ Construct a generic `LimitError` directly from a corresponding kind.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20089,"byte_end":20161,"line_start":289,"line_end":289,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20347,"byte_end":20351,"line_start":297,"line_end":297,"column_start":12,"column_end":16},"name":"kind","qualname":"<LimitError>::kind","value":"pub fn kind(&Self) -> LimitErrorKind","parent":null,"children":[],"decl_id":null,"docs":" Returns the corresponding `LimitErrorKind` of the error.\n","sig":null,"attributes":[{"value":"/ Returns the corresponding `LimitErrorKind` of the error.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20275,"byte_end":20335,"line_start":296,"line_end":296,"column_start":5,"column_end":65}}]},{"kind":"Type","id":{"krate":0,"index":91},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21230,"byte_end":21241,"line_start":333,"line_end":333,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::error::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21172,"byte_end":21220,"line_start":332,"line_end":332,"column_start":1,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":117},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8311,"byte_end":8317,"line_start":184,"line_end":184,"column_start":9,"column_end":15},"name":"buffer","qualname":"::buffer","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":" Iterators and other auxiliary structure for the `ImageBuffer` type.\n","sig":null,"attributes":[{"value":"/ Iterators and other auxiliary structure for the `ImageBuffer` type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8231,"byte_end":8302,"line_start":183,"line_end":183,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":170},{"krate":0,"index":173},{"krate":0,"index":174}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"! Mathematical helper functions and types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27874,"byte_end":27918,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":129},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":2457},{"krate":0,"index":2465},{"krate":0,"index":2463},{"krate":0,"index":143},{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":153}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>\n","sig":null,"attributes":[{"value":"! NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":27984,"byte_end":28055,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"! See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28056,"byte_end":28121,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"! in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28122,"byte_end":28195,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"! for a discussion of the algorithm.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28196,"byte_end":28234,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"! See also <https://scientificgems.wordpress.com/stuff/neuquant-fast-high-quality-image-quantization/>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":28235,"byte_end":28339,"line_start":5,"line_end":5,"column_start":1,"column_end":105}}]},{"kind":"Struct","id":{"krate":0,"index":145},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31874,"byte_end":31882,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"decl_id":null,"docs":" Neural network color quantizer","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30177,"byte_end":30211,"line_start":62,"line_end":62,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30212,"byte_end":30215,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30216,"byte_end":30230,"line_start":64,"line_end":64,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30231,"byte_end":30238,"line_start":65,"line_end":65,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, ColorMap};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30239,"byte_end":30299,"line_start":66,"line_end":66,"column_start":1,"column_end":61}},{"value":"/ use image::math::nq::NeuQuant;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30300,"byte_end":30334,"line_start":67,"line_end":67,"column_start":1,"column_end":35}},{"value":"/ use image::{ImageBuffer, Rgba, RgbaImage};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30335,"byte_end":30381,"line_start":68,"line_end":68,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30382,"byte_end":30385,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ // Create simple color image with RGBA pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30386,"byte_end":30436,"line_start":70,"line_end":70,"column_start":1,"column_end":51}},{"value":"/ let (w, h) = (2, 2);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30437,"byte_end":30461,"line_start":71,"line_end":71,"column_start":1,"column_end":25}},{"value":"/ let red: Rgba<u8> = [255, 0, 0, 255].into();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30462,"byte_end":30510,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ let green: Rgba<u8> = [0, 255, 0, 255].into();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30511,"byte_end":30561,"line_start":73,"line_end":73,"column_start":1,"column_end":51}},{"value":"/ let blue: Rgba<u8> = [0, 0, 255, 255].into();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30562,"byte_end":30611,"line_start":74,"line_end":74,"column_start":1,"column_end":50}},{"value":"/ let white: Rgba<u8> = [255, 255, 255, 255].into();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30612,"byte_end":30666,"line_start":75,"line_end":75,"column_start":1,"column_end":55}},{"value":"/ let mut color_image = RgbaImage::new(w, h);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30667,"byte_end":30714,"line_start":76,"line_end":76,"column_start":1,"column_end":48}},{"value":"/ color_image.put_pixel(0, 0, red);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30715,"byte_end":30752,"line_start":77,"line_end":77,"column_start":1,"column_end":38}},{"value":"/ color_image.put_pixel(1, 0, green);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30753,"byte_end":30792,"line_start":78,"line_end":78,"column_start":1,"column_end":40}},{"value":"/ color_image.put_pixel(0, 1, blue);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30793,"byte_end":30831,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/ color_image.put_pixel(1, 1, white);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30832,"byte_end":30871,"line_start":80,"line_end":80,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30872,"byte_end":30875,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // Create a `NeuQuant` colormap that will build an approximate color palette that best matches","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30876,"byte_end":30974,"line_start":82,"line_end":82,"column_start":1,"column_end":99}},{"value":"/ // the original image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":30975,"byte_end":31001,"line_start":83,"line_end":83,"column_start":1,"column_end":27}},{"value":"/ // Note, the NeuQuant algorithm is only designed to work with 6-8 bit output, so `colors`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31002,"byte_end":31095,"line_start":84,"line_end":84,"column_start":1,"column_end":94}},{"value":"/ // should be a power of 2 in the range [64, 256].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31096,"byte_end":31149,"line_start":85,"line_end":85,"column_start":1,"column_end":54}},{"value":"/ let pixels = color_image.clone().into_raw();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31150,"byte_end":31198,"line_start":86,"line_end":86,"column_start":1,"column_end":49}},{"value":"/ let cmap = NeuQuant::new(1, 256, &pixels);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31199,"byte_end":31245,"line_start":87,"line_end":87,"column_start":1,"column_end":47}},{"value":"/ // Map the original image through the color map to create an indexed image stored in a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31246,"byte_end":31336,"line_start":88,"line_end":88,"column_start":1,"column_end":91}},{"value":"/ // `GrayImage`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31337,"byte_end":31356,"line_start":89,"line_end":89,"column_start":1,"column_end":20}},{"value":"/ let palletized = index_colors(&color_image, &cmap);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31357,"byte_end":31412,"line_start":90,"line_end":90,"column_start":1,"column_end":56}},{"value":"/ // Map indexed image back `RgbaImage`.  Note the NeuQuant algorithm creates an approximation of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31413,"byte_end":31512,"line_start":91,"line_end":91,"column_start":1,"column_end":100}},{"value":"/ // the original colors, so even in this simple example the output is not pixel equivalent to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31513,"byte_end":31609,"line_start":92,"line_end":92,"column_start":1,"column_end":97}},{"value":"/ // the original.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31610,"byte_end":31630,"line_start":93,"line_end":93,"column_start":1,"column_end":21}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| -> Rgba<u8> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31631,"byte_end":31695,"line_start":94,"line_end":94,"column_start":1,"column_end":65}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31696,"byte_end":31739,"line_start":95,"line_end":95,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31740,"byte_end":31776,"line_start":96,"line_end":96,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31777,"byte_end":31826,"line_start":97,"line_end":97,"column_start":1,"column_end":50}},{"value":"/         .into()","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31827,"byte_end":31846,"line_start":98,"line_end":98,"column_start":1,"column_end":20}},{"value":"/ });","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31847,"byte_end":31854,"line_start":99,"line_end":99,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":31855,"byte_end":31862,"line_start":100,"line_end":100,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32184,"byte_end":32187,"line_start":113,"line_end":113,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neural network and trains it with the supplied data","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32103,"byte_end":32172,"line_start":112,"line_end":112,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32728,"byte_end":32732,"line_start":129,"line_end":129,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neural network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neural network and trains it with the supplied data","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32645,"byte_end":32716,"line_start":128,"line_end":128,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33722,"byte_end":33731,"line_start":161,"line_end":161,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33617,"byte_end":33688,"line_start":159,"line_end":159,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":33693,"byte_end":33710,"line_start":160,"line_end":160,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34201,"byte_end":34209,"line_start":173,"line_end":173,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34105,"byte_end":34167,"line_start":171,"line_end":171,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34172,"byte_end":34189,"line_start":172,"line_end":172,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34470,"byte_end":34476,"line_start":180,"line_end":180,"column_start":12,"column_end":18},"name":"lookup","qualname":"<NeuQuant>::lookup","value":"pub fn lookup(&Self, usize) -> Option<[u8; ]>","parent":null,"children":[],"decl_id":null,"docs":" Lookup pixel values for color at `idx` in the colormap.\n","sig":null,"attributes":[{"value":"/ Lookup pixel values for color at `idx` in the colormap.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":34399,"byte_end":34458,"line_start":179,"line_end":179,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":171}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"! Shared mathematical utility functions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44106,"byte_end":44148,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44393,"byte_end":44398,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44150,"byte_end":44188,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44189,"byte_end":44192,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44193,"byte_end":44200,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44201,"byte_end":44228,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44229,"byte_end":44232,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44233,"byte_end":44277,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44278,"byte_end":44322,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44323,"byte_end":44367,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44368,"byte_end":44375,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/utils.rs","byte_start":44376,"byte_end":44385,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":2468},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44679,"byte_end":44683,"line_start":3,"line_end":3,"column_start":12,"column_end":16},"name":"Rect","qualname":"::math::rect::Rect","value":"Rect { x, y, width, height }","parent":null,"children":[{"krate":0,"index":2469},{"krate":0,"index":2470},{"krate":0,"index":2471},{"krate":0,"index":2472}],"decl_id":null,"docs":" A Rectangle defined by its top left corner, width and height.\n","sig":null,"attributes":[{"value":"/ A Rectangle defined by its top left corner, width and height.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44551,"byte_end":44616,"line_start":1,"line_end":1,"column_start":1,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":2469},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44743,"byte_end":44744,"line_start":5,"line_end":5,"column_start":9,"column_end":10},"name":"x","qualname":"::math::rect::Rect::x","value":"u32","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" The x coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The x coordinate of the top left corner.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44690,"byte_end":44734,"line_start":4,"line_end":4,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2470},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44808,"byte_end":44809,"line_start":7,"line_end":7,"column_start":9,"column_end":10},"name":"y","qualname":"::math::rect::Rect::y","value":"u32","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" The y coordinate of the top left corner.\n","sig":null,"attributes":[{"value":"/ The y coordinate of the top left corner.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44755,"byte_end":44799,"line_start":6,"line_end":6,"column_start":5,"column_end":49}}]},{"kind":"Field","id":{"krate":0,"index":2471},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44855,"byte_end":44860,"line_start":9,"line_end":9,"column_start":9,"column_end":14},"name":"width","qualname":"::math::rect::Rect::width","value":"u32","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" The rectangle's width.\n","sig":null,"attributes":[{"value":"/ The rectangle's width.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44820,"byte_end":44846,"line_start":8,"line_end":8,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":2472},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44907,"byte_end":44913,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"height","qualname":"::math::rect::Rect::height","value":"u32","parent":{"krate":0,"index":2468},"children":[],"decl_id":null,"docs":" The rectangle's height.\n","sig":null,"attributes":[{"value":"/ The rectangle's height.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/rect.rs","byte_start":44871,"byte_end":44898,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":175},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":3945},{"krate":0,"index":190},{"krate":0,"index":3947},{"krate":0,"index":191},{"krate":0,"index":3949},{"krate":0,"index":192},{"krate":0,"index":3951},{"krate":0,"index":193},{"krate":0,"index":3953},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221},{"krate":0,"index":222},{"krate":0,"index":4005},{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":265},{"krate":0,"index":335},{"krate":0,"index":420},{"krate":0,"index":422},{"krate":0,"index":424},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":430},{"krate":0,"index":433},{"krate":0,"index":438},{"krate":0,"index":443}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"! Image Processing Functions","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":44923,"byte_end":44953,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":234},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57096,"byte_end":57104,"line_start":9,"line_end":9,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57047,"byte_end":57088,"line_start":8,"line_end":8,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":236},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57436,"byte_end":57445,"line_start":21,"line_end":21,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57386,"byte_end":57428,"line_start":20,"line_end":20,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":238},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57778,"byte_end":57787,"line_start":33,"line_end":33,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":57728,"byte_end":57770,"line_start":32,"line_end":32,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":240},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58175,"byte_end":58186,"line_start":45,"line_end":45,"column_start":8,"column_end":19},"name":"rotate90_in","qualname":"::imageops::affine::rotate90_in","value":"pub fn rotate90_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58070,"byte_end":58167,"line_start":44,"line_end":44,"column_start":1,"column_end":98}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58960,"byte_end":58972,"line_start":70,"line_end":70,"column_start":8,"column_end":20},"name":"rotate180_in","qualname":"::imageops::affine::rotate180_in","value":"pub fn rotate180_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":58854,"byte_end":58952,"line_start":69,"line_end":69,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":246},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":59755,"byte_end":59767,"line_start":95,"line_end":95,"column_start":8,"column_end":20},"name":"rotate270_in","qualname":"::imageops::affine::rotate270_in","value":"pub fn rotate270_in<I, Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":59649,"byte_end":59747,"line_start":94,"line_end":94,"column_start":1,"column_end":99}}]},{"kind":"Function","id":{"krate":0,"index":249},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60473,"byte_end":60488,"line_start":120,"line_end":120,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60435,"byte_end":60465,"line_start":119,"line_end":119,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":251},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60813,"byte_end":60826,"line_start":132,"line_end":132,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImageView>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":60777,"byte_end":60805,"line_start":131,"line_end":131,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61208,"byte_end":61226,"line_start":144,"line_end":144,"column_start":8,"column_end":26},"name":"flip_horizontal_in","qualname":"::imageops::affine::flip_horizontal_in","value":"pub fn flip_horizontal_in<I,\n                          Container>(&I,\n                                     &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61113,"byte_end":61200,"line_start":143,"line_end":143,"column_start":1,"column_end":88}}]},{"kind":"Function","id":{"krate":0,"index":256},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61987,"byte_end":62003,"line_start":169,"line_end":169,"column_start":8,"column_end":24},"name":"flip_vertical_in","qualname":"::imageops::affine::flip_vertical_in","value":"pub fn flip_vertical_in<I,\n                        Container>(&I, &mut ImageBuffer<I::Pixel, Container>)\n-> crate::ImageResult<()> where I: GenericImageView, I::Pixel: 'static,\nContainer: std::ops::DerefMut<Target = [<I::Pixel as Pixel>::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically and put the result into the destination [`ImageBuffer`].\n","sig":null,"attributes":[{"value":"/ Flip an image vertically and put the result into the destination [`ImageBuffer`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":61894,"byte_end":61979,"line_start":168,"line_end":168,"column_start":1,"column_end":86}}]},{"kind":"Function","id":{"krate":0,"index":259},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":62730,"byte_end":62748,"line_start":194,"line_end":194,"column_start":8,"column_end":26},"name":"rotate180_in_place","qualname":"::imageops::affine::rotate180_in_place","value":"pub fn rotate180_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise in place.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise in place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":62671,"byte_end":62722,"line_start":193,"line_end":193,"column_start":1,"column_end":52}}]},{"kind":"Function","id":{"krate":0,"index":261},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63528,"byte_end":63552,"line_start":225,"line_end":225,"column_start":8,"column_end":32},"name":"flip_horizontal_in_place","qualname":"::imageops::affine::flip_horizontal_in_place","value":"pub fn flip_horizontal_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally in place.\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally in place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63480,"byte_end":63520,"line_start":224,"line_end":224,"column_start":1,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":263},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63958,"byte_end":63980,"line_start":240,"line_end":240,"column_start":8,"column_end":30},"name":"flip_vertical_in_place","qualname":"::imageops::affine::flip_vertical_in_place","value":"pub fn flip_vertical_in_place<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically in place.\n","sig":null,"attributes":[{"value":"/ Flip an image vertically in place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/affine.rs","byte_start":63912,"byte_end":63950,"line_start":239,"line_end":239,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":265},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":266},{"krate":0,"index":267},{"krate":0,"index":268},{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":4029},{"krate":0,"index":272},{"krate":0,"index":4031},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288},{"krate":0,"index":293},{"krate":0,"index":299},{"krate":0,"index":304},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2490},{"krate":0,"index":310},{"krate":0,"index":316},{"krate":0,"index":323},{"krate":0,"index":327},{"krate":0,"index":332}],"decl_id":null,"docs":" Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"! Functions for altering and converting the color of pixelbufs","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":68933,"byte_end":68997,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":284},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69382,"byte_end":69391,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<I: GenericImageView>(&I)\n-> ImageBuffer<Luma<Subpixel<I>>, Vec<Subpixel<I>>> where\nSubpixel<I>: 'static, <Subpixel<I> as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69331,"byte_end":69374,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":286},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69923,"byte_end":69929,"line_start":36,"line_end":36,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69830,"byte_end":69878,"line_start":34,"line_end":34,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":69879,"byte_end":69915,"line_start":35,"line_end":35,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":288},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70392,"byte_end":70400,"line_start":52,"line_end":52,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70193,"byte_end":70239,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70240,"byte_end":70299,"line_start":50,"line_end":50,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":70300,"byte_end":70384,"line_start":51,"line_end":51,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":293},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71375,"byte_end":71383,"line_start":87,"line_end":87,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71201,"byte_end":71233,"line_start":84,"line_end":84,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71234,"byte_end":71290,"line_start":85,"line_end":85,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":71291,"byte_end":71367,"line_start":86,"line_end":86,"column_start":1,"column_end":77}}]},{"kind":"Function","id":{"krate":0,"index":299},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72369,"byte_end":72378,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"huerotate","qualname":"::imageops::colorops::huerotate","value":"pub fn huerotate<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72153,"byte_end":72187,"line_start":118,"line_end":118,"column_start":1,"column_end":35}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72188,"byte_end":72239,"line_start":119,"line_end":119,"column_start":1,"column_end":52}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72240,"byte_end":72309,"line_start":120,"line_end":120,"column_start":1,"column_end":70}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":72310,"byte_end":72361,"line_start":121,"line_end":121,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":304},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74292,"byte_end":74300,"line_start":179,"line_end":179,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74266,"byte_end":74281,"line_start":178,"line_end":178,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":305},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74364,"byte_end":74369,"line_start":181,"line_end":181,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74307,"byte_end":74354,"line_start":180,"line_end":180,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74462,"byte_end":74470,"line_start":184,"line_end":184,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Returns the index of the closest match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closest match of `color`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74375,"byte_end":74428,"line_start":182,"line_end":182,"column_start":5,"column_end":58}},{"value":"/ in the color map.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74433,"byte_end":74454,"line_start":183,"line_end":183,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":307},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74678,"byte_end":74684,"line_start":187,"line_end":187,"column_start":8,"column_end":14},"name":"lookup","qualname":"::imageops::colorops::ColorMap::lookup","value":"pub fn lookup(&Self, usize) -> Option<Self::Color>","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Looks up color by index in the color map.  If `idx` is out of range for the color map, or\n ColorMap doesn't implement `lookup` `None` is returned.\n","sig":null,"attributes":[{"value":"/ Looks up color by index in the color map.  If `idx` is out of range for the color map, or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74513,"byte_end":74606,"line_start":185,"line_end":185,"column_start":5,"column_end":98}},{"value":"/ ColorMap doesn't implement `lookup` `None` is returned.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74611,"byte_end":74670,"line_start":186,"line_end":186,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74865,"byte_end":74875,"line_start":192,"line_end":192,"column_start":8,"column_end":18},"name":"has_lookup","qualname":"::imageops::colorops::ColorMap::has_lookup","value":"pub fn has_lookup(&Self) -> bool","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Determine if this implementation of ColorMap overrides the default `lookup`.\n","sig":null,"attributes":[{"value":"/ Determine if this implementation of ColorMap overrides the default `lookup`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74777,"byte_end":74857,"line_start":191,"line_end":191,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":309},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74980,"byte_end":74989,"line_start":196,"line_end":196,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":304},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":74917,"byte_end":74972,"line_start":195,"line_end":195,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2488},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76134,"byte_end":76141,"line_start":229,"line_end":229,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75026,"byte_end":75050,"line_start":199,"line_end":199,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75051,"byte_end":75054,"line_start":200,"line_end":200,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75055,"byte_end":75069,"line_start":201,"line_end":201,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75070,"byte_end":75077,"line_start":202,"line_end":202,"column_start":1,"column_end":8}},{"value":"/ use image::imageops::colorops::{index_colors, BiLevel, ColorMap};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75078,"byte_end":75147,"line_start":203,"line_end":203,"column_start":1,"column_end":70}},{"value":"/ use image::{ImageBuffer, Luma};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75148,"byte_end":75183,"line_start":204,"line_end":204,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75184,"byte_end":75187,"line_start":205,"line_end":205,"column_start":1,"column_end":4}},{"value":"/ let (w, h) = (16, 16);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75188,"byte_end":75214,"line_start":206,"line_end":206,"column_start":1,"column_end":27}},{"value":"/ // Create an image with a smooth horizontal gradient from black (0) to white (255).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75215,"byte_end":75302,"line_start":207,"line_end":207,"column_start":1,"column_end":88}},{"value":"/ let gray = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> { [(255 * x / w) as u8].into() });","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75303,"byte_end":75398,"line_start":208,"line_end":208,"column_start":1,"column_end":96}},{"value":"/ // Mapping the gray image through the `BiLevel` filter should map gray pixels less than half","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75399,"byte_end":75495,"line_start":209,"line_end":209,"column_start":1,"column_end":97}},{"value":"/ // intensity (127) to black (0), and anything greater to white (255).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75496,"byte_end":75569,"line_start":210,"line_end":210,"column_start":1,"column_end":74}},{"value":"/ let cmap = BiLevel;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75570,"byte_end":75593,"line_start":211,"line_end":211,"column_start":1,"column_end":24}},{"value":"/ let palletized = index_colors(&gray, &cmap);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75594,"byte_end":75642,"line_start":212,"line_end":212,"column_start":1,"column_end":49}},{"value":"/ let mapped = ImageBuffer::from_fn(w, h, |x, y| {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75643,"byte_end":75695,"line_start":213,"line_end":213,"column_start":1,"column_end":53}},{"value":"/     let p = palletized.get_pixel(x, y);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75696,"byte_end":75739,"line_start":214,"line_end":214,"column_start":1,"column_end":44}},{"value":"/     cmap.lookup(p.0[0] as usize)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75740,"byte_end":75776,"line_start":215,"line_end":215,"column_start":1,"column_end":37}},{"value":"/         .expect(\"indexed color out-of-range\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75777,"byte_end":75826,"line_start":216,"line_end":216,"column_start":1,"column_end":50}},{"value":"/ });","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75827,"byte_end":75834,"line_start":217,"line_end":217,"column_start":1,"column_end":8}},{"value":"/ // Create an black and white image of expected output.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75835,"byte_end":75893,"line_start":218,"line_end":218,"column_start":1,"column_end":59}},{"value":"/ let bw = ImageBuffer::from_fn(w, h, |x, y| -> Luma<u8> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75894,"byte_end":75954,"line_start":219,"line_end":219,"column_start":1,"column_end":61}},{"value":"/     if x <= (w / 2) {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75955,"byte_end":75980,"line_start":220,"line_end":220,"column_start":1,"column_end":26}},{"value":"/         [0].into()","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":75981,"byte_end":76003,"line_start":221,"line_end":221,"column_start":1,"column_end":23}},{"value":"/     } else {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76004,"byte_end":76020,"line_start":222,"line_end":222,"column_start":1,"column_end":17}},{"value":"/         [255].into()","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76021,"byte_end":76045,"line_start":223,"line_end":223,"column_start":1,"column_end":25}},{"value":"/     }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76046,"byte_end":76055,"line_start":224,"line_end":224,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76056,"byte_end":76063,"line_start":225,"line_end":225,"column_start":1,"column_end":8}},{"value":"/ assert_eq!(mapped, bw);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76064,"byte_end":76091,"line_start":226,"line_end":226,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76092,"byte_end":76099,"line_start":227,"line_end":227,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":327},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78546,"byte_end":78552,"line_start":319,"line_end":319,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map: ?Sized>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78394,"byte_end":78475,"line_start":317,"line_end":317,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":78476,"byte_end":78538,"line_start":318,"line_end":318,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":332},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":80106,"byte_end":80118,"line_start":357,"line_end":357,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map: ?Sized>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":80009,"byte_end":80098,"line_start":356,"line_end":356,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83810,"byte_end":83817,"line_start":84,"line_end":84,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83785,"byte_end":83805,"line_start":83,"line_end":83,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83846,"byte_end":83854,"line_start":87,"line_end":87,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83824,"byte_end":83841,"line_start":86,"line_end":86,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83882,"byte_end":83892,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83861,"byte_end":83877,"line_start":89,"line_end":89,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2500},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83923,"byte_end":83931,"line_start":93,"line_end":93,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83899,"byte_end":83918,"line_start":92,"line_end":92,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2502},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83968,"byte_end":83976,"line_start":96,"line_end":96,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":2493},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83938,"byte_end":83963,"line_start":95,"line_end":95,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2493},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83768,"byte_end":83778,"line_start":82,"line_end":82,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":2494},{"krate":0,"index":2496},{"krate":0,"index":2498},{"krate":0,"index":2500},{"krate":0,"index":2502}],"decl_id":null,"docs":" Available Sampling Filters.","sig":null,"attributes":[{"value":"/ Available Sampling Filters.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81326,"byte_end":81357,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81358,"byte_end":81361,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81362,"byte_end":81377,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81378,"byte_end":81381,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ To test the different sampling filters on a real example, you can find two","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81382,"byte_end":81460,"line_start":19,"line_end":19,"column_start":1,"column_end":79}},{"value":"/ examples called","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81461,"byte_end":81480,"line_start":20,"line_end":20,"column_start":1,"column_end":20}},{"value":"/ [`scaledown`](https://github.com/image-rs/image/tree/master/examples/scaledown)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81481,"byte_end":81564,"line_start":21,"line_end":21,"column_start":1,"column_end":84}},{"value":"/ and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81565,"byte_end":81572,"line_start":22,"line_end":22,"column_start":1,"column_end":8}},{"value":"/ [`scaleup`](https://github.com/image-rs/image/tree/master/examples/scaleup)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81573,"byte_end":81652,"line_start":23,"line_end":23,"column_start":1,"column_end":80}},{"value":"/ in the `examples` directory of the crate source code.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81653,"byte_end":81710,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81711,"byte_end":81714,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Here is a 3.58 MiB","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81715,"byte_end":81737,"line_start":26,"line_end":26,"column_start":1,"column_end":23}},{"value":"/ [test image](https://github.com/image-rs/image/blob/master/examples/scaledown/test.jpg)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81738,"byte_end":81829,"line_start":27,"line_end":27,"column_start":1,"column_end":92}},{"value":"/ that has been scaled down to 300x225 px:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81830,"byte_end":81874,"line_start":28,"line_end":28,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81875,"byte_end":81878,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ <!-- NOTE: To test new test images locally, replace the GitHub path with `../../../docs/` -->","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81879,"byte_end":81976,"line_start":30,"line_end":30,"column_start":1,"column_end":98}},{"value":"/ <div style=\"display: flex; flex-wrap: wrap; align-items: flex-start;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":81977,"byte_end":82051,"line_start":31,"line_end":31,"column_start":1,"column_end":75}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82052,"byte_end":82092,"line_start":32,"line_end":32,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-near.png\" title=\"Nearest\"><br>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82093,"byte_end":82231,"line_start":33,"line_end":33,"column_start":1,"column_end":139}},{"value":"/     Nearest Neighbor","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82232,"byte_end":82256,"line_start":34,"line_end":34,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82257,"byte_end":82269,"line_start":35,"line_end":35,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82270,"byte_end":82310,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-tri.png\" title=\"Triangle\"><br>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82311,"byte_end":82449,"line_start":37,"line_end":37,"column_start":1,"column_end":139}},{"value":"/     Linear: Triangle","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82450,"byte_end":82474,"line_start":38,"line_end":38,"column_start":1,"column_end":25}},{"value":"/   </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82475,"byte_end":82487,"line_start":39,"line_end":39,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82488,"byte_end":82528,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-cmr.png\" title=\"CatmullRom\"><br>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82529,"byte_end":82669,"line_start":41,"line_end":41,"column_start":1,"column_end":141}},{"value":"/     Cubic: Catmull-Rom","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82670,"byte_end":82696,"line_start":42,"line_end":42,"column_start":1,"column_end":27}},{"value":"/   </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82697,"byte_end":82709,"line_start":43,"line_end":43,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82710,"byte_end":82750,"line_start":44,"line_end":44,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-gauss.png\" title=\"Gaussian\"><br>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82751,"byte_end":82891,"line_start":45,"line_end":45,"column_start":1,"column_end":141}},{"value":"/     Gaussian","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82892,"byte_end":82908,"line_start":46,"line_end":46,"column_start":1,"column_end":17}},{"value":"/   </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82909,"byte_end":82921,"line_start":47,"line_end":47,"column_start":1,"column_end":13}},{"value":"/   <div style=\"margin: 0 8px 8px 0;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82922,"byte_end":82962,"line_start":48,"line_end":48,"column_start":1,"column_end":41}},{"value":"/     <img src=\"https://raw.githubusercontent.com/image-rs/image/master/examples/scaledown/scaledown-test-lcz2.png\" title=\"Lanczos3\"><br>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":82963,"byte_end":83102,"line_start":49,"line_end":49,"column_start":1,"column_end":140}},{"value":"/     Lanczos with window 3","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83103,"byte_end":83132,"line_start":50,"line_end":50,"column_start":1,"column_end":30}},{"value":"/   </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83133,"byte_end":83145,"line_start":51,"line_end":51,"column_start":1,"column_end":13}},{"value":"/ </div>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83146,"byte_end":83156,"line_start":52,"line_end":52,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83157,"byte_end":83160,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ## Speed","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83161,"byte_end":83173,"line_start":54,"line_end":54,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83174,"byte_end":83177,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Time required to create each of the examples above, tested on an Intel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83178,"byte_end":83252,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ i7-4770 CPU with Rust 1.37 in release mode:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83253,"byte_end":83300,"line_start":57,"line_end":57,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83301,"byte_end":83304,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ <table style=\"width: auto;\">","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83305,"byte_end":83337,"line_start":59,"line_end":59,"column_start":1,"column_end":33}},{"value":"/   <tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83338,"byte_end":83348,"line_start":60,"line_end":60,"column_start":1,"column_end":11}},{"value":"/     <th>Nearest</th>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83349,"byte_end":83373,"line_start":61,"line_end":61,"column_start":1,"column_end":25}},{"value":"/     <td>31 ms</td>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83374,"byte_end":83396,"line_start":62,"line_end":62,"column_start":1,"column_end":23}},{"value":"/   </tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83397,"byte_end":83408,"line_start":63,"line_end":63,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83409,"byte_end":83419,"line_start":64,"line_end":64,"column_start":1,"column_end":11}},{"value":"/     <th>Triangle</th>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83420,"byte_end":83445,"line_start":65,"line_end":65,"column_start":1,"column_end":26}},{"value":"/     <td>414 ms</td>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83446,"byte_end":83469,"line_start":66,"line_end":66,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83470,"byte_end":83481,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83482,"byte_end":83492,"line_start":68,"line_end":68,"column_start":1,"column_end":11}},{"value":"/     <th>CatmullRom</th>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83493,"byte_end":83520,"line_start":69,"line_end":69,"column_start":1,"column_end":28}},{"value":"/     <td>817 ms</td>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83521,"byte_end":83544,"line_start":70,"line_end":70,"column_start":1,"column_end":24}},{"value":"/   </tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83545,"byte_end":83556,"line_start":71,"line_end":71,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83557,"byte_end":83567,"line_start":72,"line_end":72,"column_start":1,"column_end":11}},{"value":"/     <th>Gaussian</th>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83568,"byte_end":83593,"line_start":73,"line_end":73,"column_start":1,"column_end":26}},{"value":"/     <td>1180 ms</td>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83594,"byte_end":83618,"line_start":74,"line_end":74,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83619,"byte_end":83630,"line_start":75,"line_end":75,"column_start":1,"column_end":12}},{"value":"/   <tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83631,"byte_end":83641,"line_start":76,"line_end":76,"column_start":1,"column_end":11}},{"value":"/     <th>Lanczos3</th>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83642,"byte_end":83667,"line_start":77,"line_end":77,"column_start":1,"column_end":26}},{"value":"/     <td>1170 ms</td>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83668,"byte_end":83692,"line_start":78,"line_end":78,"column_start":1,"column_end":25}},{"value":"/   </tr>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83693,"byte_end":83704,"line_start":79,"line_end":79,"column_start":1,"column_end":12}},{"value":"/ </table>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":83705,"byte_end":83717,"line_start":80,"line_end":80,"column_start":1,"column_end":13}}]},{"kind":"Function","id":{"krate":0,"index":382},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93438,"byte_end":93447,"line_start":393,"line_end":393,"column_start":8,"column_end":17},"name":"thumbnail","qualname":"::imageops::sample::thumbnail","value":"pub fn thumbnail<I, P, S>(&I, u32, u32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + Enlargeable + 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specific dimensions.","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specific dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92692,"byte_end":92749,"line_start":381,"line_end":381,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92750,"byte_end":92753,"line_start":382,"line_end":382,"column_start":1,"column_end":4}},{"value":"/ For downscaling, this method uses a fast integer algorithm where each source pixel contributes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92754,"byte_end":92852,"line_start":383,"line_end":383,"column_start":1,"column_end":99}},{"value":"/ to exactly one target pixel.  May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92853,"byte_end":92948,"line_start":384,"line_end":384,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92949,"byte_end":92952,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/ In case the current width is smaller than the new width or similar for the height, another","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92953,"byte_end":93047,"line_start":386,"line_end":386,"column_start":1,"column_end":95}},{"value":"/ strategy is used instead.  For each pixel in the output, a rectangular region of the input is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93048,"byte_end":93145,"line_start":387,"line_end":387,"column_start":1,"column_end":98}},{"value":"/ determined, just as previously.  But when no input pixel is part of this region, the nearest","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93146,"byte_end":93242,"line_start":388,"line_end":388,"column_start":1,"column_end":97}},{"value":"/ pixels are interpolated instead.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93243,"byte_end":93279,"line_start":389,"line_end":389,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93280,"byte_end":93283,"line_start":390,"line_end":390,"column_start":1,"column_end":4}},{"value":"/ For speed reasons, all interpolation is performed linearly over the colour values.  It will not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93284,"byte_end":93383,"line_start":391,"line_end":391,"column_start":1,"column_end":100}},{"value":"/ take the pixel colour spaces into account.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":93384,"byte_end":93430,"line_start":392,"line_end":392,"column_start":1,"column_end":47}}]},{"kind":"Function","id":{"krate":0,"index":405},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101306,"byte_end":101315,"line_start":632,"line_end":632,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101183,"byte_end":101234,"line_start":630,"line_end":630,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":101235,"byte_end":101298,"line_start":631,"line_end":631,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103742,"byte_end":103748,"line_start":712,"line_end":712,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImageView>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103569,"byte_end":103627,"line_start":709,"line_end":709,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103628,"byte_end":103686,"line_start":710,"line_end":710,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":103687,"byte_end":103734,"line_start":711,"line_end":711,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104874,"byte_end":104878,"line_start":751,"line_end":751,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImageView>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104762,"byte_end":104813,"line_start":749,"line_end":749,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":104814,"byte_end":104866,"line_start":750,"line_end":750,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":415},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105701,"byte_end":105710,"line_start":778,"line_end":778,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImageView<Pixel = P>, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105440,"byte_end":105493,"line_start":773,"line_end":773,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105494,"byte_end":105545,"line_start":774,"line_end":774,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105546,"byte_end":105609,"line_start":775,"line_end":775,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105610,"byte_end":105613,"line_start":776,"line_end":776,"column_start":1,"column_end":4}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":105614,"byte_end":105693,"line_start":777,"line_end":777,"column_start":1,"column_end":80}}]},{"kind":"Function","id":{"krate":0,"index":420},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45934,"byte_end":45938,"line_start":33,"line_end":33,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImageView>(&mut I, u32, u32, u32, u32)\n-> SubImage<&mut I>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45887,"byte_end":45926,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":422},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46232,"byte_end":46240,"line_start":45,"line_end":45,"column_start":8,"column_end":16},"name":"crop_imm","qualname":"::imageops::crop_imm","value":"pub fn crop_imm<I: GenericImageView>(&I, u32, u32, u32, u32) -> SubImage<&I>","parent":null,"children":[],"decl_id":null,"docs":" Return an immutable view into an image\n","sig":null,"attributes":[{"value":"/ Return an immutable view into an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46182,"byte_end":46224,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":426},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49024,"byte_end":49038,"line_start":129,"line_end":129,"column_start":8,"column_end":22},"name":"overlay_bounds","qualname":"::imageops::overlay_bounds","value":"pub fn overlay_bounds((u32, u32), (u32, u32), u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Calculate the region that can be copied from top to bottom.","sig":null,"attributes":[{"value":"/ Calculate the region that can be copied from top to bottom.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46852,"byte_end":46915,"line_start":74,"line_end":74,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46916,"byte_end":46919,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Given image size of bottom and top image, and a point at which we want to place the top image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":46920,"byte_end":47017,"line_start":76,"line_end":76,"column_start":1,"column_end":98}},{"value":"/ onto the bottom image, how large can we be? Have to wary of the following issues:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47018,"byte_end":47103,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ * Top might be larger than bottom","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47104,"byte_end":47141,"line_start":78,"line_end":78,"column_start":1,"column_end":38}},{"value":"/ * Overflows in the computation","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47142,"byte_end":47176,"line_start":79,"line_end":79,"column_start":1,"column_end":35}},{"value":"/ * Coordinates could be completely out of bounds","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47177,"byte_end":47228,"line_start":80,"line_end":80,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47229,"byte_end":47232,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ The main idea is to make use of inequalities provided by the nature of `saturing_add` and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47233,"byte_end":47326,"line_start":82,"line_end":82,"column_start":1,"column_end":94}},{"value":"/ `saturating_sub`. These intrinsically validate that all resulting coordinates will be in bounds","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47327,"byte_end":47426,"line_start":83,"line_end":83,"column_start":1,"column_end":100}},{"value":"/ for both images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47427,"byte_end":47447,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47448,"byte_end":47451,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ We want that all these coordinate accesses are safe:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47452,"byte_end":47508,"line_start":86,"line_end":86,"column_start":1,"column_end":57}},{"value":"/ 1. `bottom.get_pixel(x + [0..x_range), y + [0..y_range))`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47509,"byte_end":47570,"line_start":87,"line_end":87,"column_start":1,"column_end":62}},{"value":"/ 2. `top.get_pixel([0..x_range), [0..y_range))`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47571,"byte_end":47621,"line_start":88,"line_end":88,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47622,"byte_end":47625,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Proof that the function provides the necessary bounds for width. Note that all unaugmented math","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47626,"byte_end":47725,"line_start":90,"line_end":90,"column_start":1,"column_end":100}},{"value":"/ operations are to be read in standard arithmetic, not integer arithmetic. Since no direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47726,"byte_end":47819,"line_start":91,"line_end":91,"column_start":1,"column_end":94}},{"value":"/ integer arithmetic occurs in the implementation, this is unambiguous.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47820,"byte_end":47893,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47894,"byte_end":47897,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47898,"byte_end":47909,"line_start":94,"line_end":94,"column_start":1,"column_end":12}},{"value":"/ Three short notes/lemmata:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47910,"byte_end":47940,"line_start":95,"line_end":95,"column_start":1,"column_end":31}},{"value":"/ - Iff `(a - b) <= 0` then `a.saturating_sub(b) = 0`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47941,"byte_end":47996,"line_start":96,"line_end":96,"column_start":1,"column_end":56}},{"value":"/ - Iff `(a - b) >= 0` then `a.saturating_sub(b) = a - b`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":47997,"byte_end":48056,"line_start":97,"line_end":97,"column_start":1,"column_end":60}},{"value":"/ - If  `a <= c` then `a.saturating_sub(b) <= c.saturating_sub(b)`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48057,"byte_end":48125,"line_start":98,"line_end":98,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48126,"byte_end":48129,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ 1.1 We show that if `bottom_width <= x`, then `x_range = 0` therefore `x + [0..x_range)` is empty.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48130,"byte_end":48232,"line_start":100,"line_end":100,"column_start":1,"column_end":103}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48233,"byte_end":48236,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48237,"byte_end":48248,"line_start":102,"line_end":102,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48249,"byte_end":48321,"line_start":103,"line_end":103,"column_start":1,"column_end":73}},{"value":"/ <= bottom_width.saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48322,"byte_end":48359,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48360,"byte_end":48363,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ bottom_width <= x","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48364,"byte_end":48385,"line_start":106,"line_end":106,"column_start":1,"column_end":22}},{"value":"/ <==> bottom_width - x <= 0","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48386,"byte_end":48416,"line_start":107,"line_end":107,"column_start":1,"column_end":31}},{"value":"/ <==> bottom_width.saturating_sub(x) = 0","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48417,"byte_end":48460,"line_start":108,"line_end":108,"column_start":1,"column_end":44}},{"value":"/  ==> x_range <= 0","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48461,"byte_end":48482,"line_start":109,"line_end":109,"column_start":1,"column_end":22}},{"value":"/  ==> x_range  = 0","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48483,"byte_end":48504,"line_start":110,"line_end":110,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48505,"byte_end":48508,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ 1.2 If `x < bottom_width` then `x + x_range < bottom_width`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48509,"byte_end":48572,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48573,"byte_end":48576,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ x + x_range","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48577,"byte_end":48592,"line_start":114,"line_end":114,"column_start":1,"column_end":16}},{"value":"/ <= x + bottom_width.saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48593,"byte_end":48634,"line_start":115,"line_end":115,"column_start":1,"column_end":42}},{"value":"/  = x + (bottom_width - x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48635,"byte_end":48664,"line_start":116,"line_end":116,"column_start":1,"column_end":30}},{"value":"/  = bottom_width","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48665,"byte_end":48684,"line_start":117,"line_end":117,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48685,"byte_end":48688,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ 2. We show that `x_range <= top_width`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48689,"byte_end":48731,"line_start":119,"line_end":119,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48732,"byte_end":48735,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ x_range","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48736,"byte_end":48747,"line_start":121,"line_end":121,"column_start":1,"column_end":12}},{"value":"/  = (top_width.saturating_add(x).min(bottom_width)).saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48748,"byte_end":48820,"line_start":122,"line_end":122,"column_start":1,"column_end":73}},{"value":"/ <= top_width.saturating_add(x).saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48821,"byte_end":48873,"line_start":123,"line_end":123,"column_start":1,"column_end":53}},{"value":"/ <= (top_wdith + x).saturating_sub(x)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48874,"byte_end":48914,"line_start":124,"line_end":124,"column_start":1,"column_end":41}},{"value":"/  = top_width (due to `top_width >= 0` and `x >= 0`)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48915,"byte_end":48970,"line_start":125,"line_end":125,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48971,"byte_end":48978,"line_start":126,"line_end":126,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48979,"byte_end":48982,"line_start":127,"line_end":127,"column_start":1,"column_end":4}},{"value":"/ Proof is the same for height.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":48983,"byte_end":49016,"line_start":128,"line_end":128,"column_start":1,"column_end":34}}]},{"kind":"Function","id":{"krate":0,"index":427},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49552,"byte_end":49559,"line_start":147,"line_end":147,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":49495,"byte_end":49544,"line_start":146,"line_end":146,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":430},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50578,"byte_end":50582,"line_start":183,"line_end":183,"column_start":8,"column_end":12},"name":"tile","qualname":"::imageops::tile","value":"pub fn tile<I, J>(&mut I, &J) where I: GenericImage, J: GenericImageView<Pixel\n= I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Tile an image by repeating it multiple times","sig":null,"attributes":[{"value":"/ Tile an image by repeating it multiple times","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50218,"byte_end":50266,"line_start":169,"line_end":169,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50267,"byte_end":50270,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50271,"byte_end":50285,"line_start":171,"line_end":171,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50286,"byte_end":50299,"line_start":172,"line_end":172,"column_start":1,"column_end":14}},{"value":"/ use image::{RgbaImage};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50300,"byte_end":50327,"line_start":173,"line_end":173,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50328,"byte_end":50331,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50332,"byte_end":50347,"line_start":175,"line_end":175,"column_start":1,"column_end":16}},{"value":"/      let mut img = RgbaImage::new(1920, 1080);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50348,"byte_end":50398,"line_start":176,"line_end":176,"column_start":1,"column_end":51}},{"value":"/      let tile = image::open(\"tile.png\").unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50399,"byte_end":50452,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50453,"byte_end":50456,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/      image::imageops::tile(&mut img, &tile);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50457,"byte_end":50505,"line_start":179,"line_end":179,"column_start":1,"column_end":49}},{"value":"/      img.save(\"tiled_wallpaper.png\").unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50506,"byte_end":50556,"line_start":180,"line_end":180,"column_start":1,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50557,"byte_end":50562,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50563,"byte_end":50570,"line_start":182,"line_end":182,"column_start":1,"column_end":8}}]},{"kind":"Function","id":{"krate":0,"index":433},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51379,"byte_end":51396,"line_start":211,"line_end":211,"column_start":8,"column_end":25},"name":"vertical_gradient","qualname":"::imageops::vertical_gradient","value":"pub fn vertical_gradient<S, P, I>(&mut I, &P, &P) where I: GenericImage<Pixel\n= P>, P: Pixel<Subpixel = S> + 'static, S: Primitive + Lerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear vertical gradient\n \n This function assumes a linear color space.\n \n # Examples\n ```no_run\n use image::{Rgba, RgbaImage, Pixel};\n \n fn main() {\n     let mut img = RgbaImage::new(100, 100);\n     let start = Rgba::from_slice(&[0, 128, 0, 0]);\n     let end = Rgba::from_slice(&[255, 255, 255, 255]);\n \n     image::imageops::vertical_gradient(&mut img, start, end);\n     img.save(\"vertical_gradient.png\").unwrap();\n }\n","sig":null,"attributes":[{"value":"/ Fill the image with a linear vertical gradient","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50881,"byte_end":50931,"line_start":195,"line_end":195,"column_start":1,"column_end":51}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50932,"byte_end":50936,"line_start":196,"line_end":196,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50937,"byte_end":50984,"line_start":197,"line_end":197,"column_start":1,"column_end":48}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50985,"byte_end":50989,"line_start":198,"line_end":198,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":50990,"byte_end":51004,"line_start":199,"line_end":199,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51005,"byte_end":51018,"line_start":200,"line_end":200,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51019,"byte_end":51059,"line_start":201,"line_end":201,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51060,"byte_end":51064,"line_start":202,"line_end":202,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51065,"byte_end":51080,"line_start":203,"line_end":203,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51081,"byte_end":51128,"line_start":204,"line_end":204,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51129,"byte_end":51183,"line_start":205,"line_end":205,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51184,"byte_end":51242,"line_start":206,"line_end":206,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51243,"byte_end":51247,"line_start":207,"line_end":207,"column_start":1,"column_end":5}},{"value":"/     image::imageops::vertical_gradient(&mut img, start, end);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51248,"byte_end":51313,"line_start":208,"line_end":208,"column_start":1,"column_end":66}},{"value":"/     img.save(\"vertical_gradient.png\").unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51314,"byte_end":51365,"line_start":209,"line_end":209,"column_start":1,"column_end":52}},{"value":"/ }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51366,"byte_end":51371,"line_start":210,"line_end":210,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":438},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52426,"byte_end":52445,"line_start":246,"line_end":246,"column_start":8,"column_end":27},"name":"horizontal_gradient","qualname":"::imageops::horizontal_gradient","value":"pub fn horizontal_gradient<S, P, I>(&mut I, &P, &P) where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\nLerp + 'static","parent":null,"children":[],"decl_id":null,"docs":" Fill the image with a linear horizontal gradient\n \n This function assumes a linear color space.","sig":null,"attributes":[{"value":"/ Fill the image with a linear horizontal gradient","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51923,"byte_end":51975,"line_start":230,"line_end":230,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51976,"byte_end":51980,"line_start":231,"line_end":231,"column_start":1,"column_end":5}},{"value":"/ This function assumes a linear color space.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":51981,"byte_end":52028,"line_start":232,"line_end":232,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52029,"byte_end":52032,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52033,"byte_end":52047,"line_start":234,"line_end":234,"column_start":1,"column_end":15}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52048,"byte_end":52061,"line_start":235,"line_end":235,"column_start":1,"column_end":14}},{"value":"/ use image::{Rgba, RgbaImage, Pixel};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52062,"byte_end":52102,"line_start":236,"line_end":236,"column_start":1,"column_end":41}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52103,"byte_end":52107,"line_start":237,"line_end":237,"column_start":1,"column_end":5}},{"value":"/ fn main() {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52108,"byte_end":52123,"line_start":238,"line_end":238,"column_start":1,"column_end":16}},{"value":"/     let mut img = RgbaImage::new(100, 100);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52124,"byte_end":52171,"line_start":239,"line_end":239,"column_start":1,"column_end":48}},{"value":"/     let start = Rgba::from_slice(&[0, 128, 0, 0]);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52172,"byte_end":52226,"line_start":240,"line_end":240,"column_start":1,"column_end":55}},{"value":"/     let end = Rgba::from_slice(&[255, 255, 255, 255]);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52227,"byte_end":52285,"line_start":241,"line_end":241,"column_start":1,"column_end":59}},{"value":"/ ","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52286,"byte_end":52290,"line_start":242,"line_end":242,"column_start":1,"column_end":5}},{"value":"/     image::imageops::horizontal_gradient(&mut img, start, end);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52291,"byte_end":52358,"line_start":243,"line_end":243,"column_start":1,"column_end":68}},{"value":"/     img.save(\"horizontal_gradient.png\").unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52359,"byte_end":52412,"line_start":244,"line_end":244,"column_start":1,"column_end":54}},{"value":"/ }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52413,"byte_end":52418,"line_start":245,"line_end":245,"column_start":1,"column_end":6}}]},{"kind":"Function","id":{"krate":0,"index":443},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":53042,"byte_end":53049,"line_start":266,"line_end":266,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I, J>(&mut I, &J, u32, u32) where I: GenericImage,\nJ: GenericImageView<Pixel = I::Pixel>","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":52969,"byte_end":53034,"line_start":265,"line_end":265,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":446},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"io","qualname":"::io","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":493},{"krate":0,"index":541}],"decl_id":null,"docs":" Input and output of images.\n","sig":null,"attributes":[{"value":"! Input and output of images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/mod.rs","byte_start":108671,"byte_end":108702,"line_start":1,"line_end":1,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":468},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110899,"byte_end":110905,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"Reader","qualname":"::io::reader::Reader","value":"Reader {  }","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471}],"decl_id":null,"docs":" A multi-format image reader.","sig":null,"attributes":[{"value":"/ A multi-format image reader.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109100,"byte_end":109132,"line_start":12,"line_end":12,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109133,"byte_end":109136,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Wraps an input reader to facilitate automatic detection of an image's format, appropriate","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109137,"byte_end":109230,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ decoding method, and dispatches into the set of supported [`ImageDecoder`] implementations.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109231,"byte_end":109326,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109327,"byte_end":109330,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109331,"byte_end":109343,"line_start":17,"line_end":17,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109344,"byte_end":109347,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ Opening a file, deducing the format based on the file path automatically, and trying to decode","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109348,"byte_end":109446,"line_start":19,"line_end":19,"column_start":1,"column_end":99}},{"value":"/ the image contained can be performed by constructing the reader and immediately consuming it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109447,"byte_end":109544,"line_start":20,"line_end":20,"column_start":1,"column_end":98}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109545,"byte_end":109548,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109549,"byte_end":109562,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109563,"byte_end":109591,"line_start":23,"line_end":23,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109592,"byte_end":109620,"line_start":24,"line_end":24,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109621,"byte_end":109664,"line_start":25,"line_end":25,"column_start":1,"column_end":44}},{"value":"/ let image = Reader::open(\"path/to/image.png\")?","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109665,"byte_end":109715,"line_start":26,"line_end":26,"column_start":1,"column_end":51}},{"value":"/     .decode()?;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109716,"byte_end":109735,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109736,"byte_end":109750,"line_start":28,"line_end":28,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109751,"byte_end":109758,"line_start":29,"line_end":29,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109759,"byte_end":109762,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ It is also possible to make a guess based on the content. This is especially handy if the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109763,"byte_end":109856,"line_start":31,"line_end":31,"column_start":1,"column_end":94}},{"value":"/ source is some blob in memory and you have constructed the reader in another way. Here is an","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109857,"byte_end":109953,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ example with a `pnm` black-and-white subformat that encodes its pixel matrix with ascii values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":109954,"byte_end":110053,"line_start":33,"line_end":33,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110054,"byte_end":110057,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110153,"byte_end":110181,"line_start":37,"line_end":37,"column_start":1,"column_end":29}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110182,"byte_end":110210,"line_start":38,"line_end":38,"column_start":1,"column_end":29}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110211,"byte_end":110254,"line_start":39,"line_end":39,"column_start":1,"column_end":44}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110255,"byte_end":110279,"line_start":40,"line_end":40,"column_start":1,"column_end":25}},{"value":"/ use image::ImageFormat;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110280,"byte_end":110307,"line_start":41,"line_end":41,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110308,"byte_end":110311,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let raw_data = b\"P1 2 2\\n\\","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110312,"byte_end":110342,"line_start":43,"line_end":43,"column_start":1,"column_end":31}},{"value":"/     0 1\\n\\","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110343,"byte_end":110357,"line_start":44,"line_end":44,"column_start":1,"column_end":15}},{"value":"/     1 0\\n\";","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110358,"byte_end":110373,"line_start":45,"line_end":45,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110374,"byte_end":110377,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ let mut reader = Reader::new(Cursor::new(raw_data))","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110378,"byte_end":110433,"line_start":47,"line_end":47,"column_start":1,"column_end":56}},{"value":"/     .with_guessed_format()","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110434,"byte_end":110464,"line_start":48,"line_end":48,"column_start":1,"column_end":31}},{"value":"/     .expect(\"Cursor io never fails\");","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110465,"byte_end":110506,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(reader.format(), Some(ImageFormat::Pnm));","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110507,"byte_end":110563,"line_start":50,"line_end":50,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110564,"byte_end":110567,"line_start":51,"line_end":51,"column_start":1,"column_end":4}},{"value":"/ let image = reader.decode()?;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110568,"byte_end":110601,"line_start":52,"line_end":52,"column_start":1,"column_end":34}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110602,"byte_end":110616,"line_start":53,"line_end":53,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110617,"byte_end":110624,"line_start":54,"line_end":54,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110625,"byte_end":110628,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ As a final fallback or if only a specific format must be used, the reader always allows manual","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110629,"byte_end":110727,"line_start":56,"line_end":56,"column_start":1,"column_end":99}},{"value":"/ specification of the supposed image format with [`set_format`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110728,"byte_end":110795,"line_start":57,"line_end":57,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110796,"byte_end":110799,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ [`set_format`]: #method.set_format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110800,"byte_end":110838,"line_start":59,"line_end":59,"column_start":1,"column_end":39}},{"value":"/ [`ImageDecoder`]: ../trait.ImageDecoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":110839,"byte_end":110887,"line_start":60,"line_end":60,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111426,"byte_end":111429,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<Reader<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new image reader without a preset format.","sig":null,"attributes":[{"value":"/ Create a new image reader without a preset format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111069,"byte_end":111123,"line_start":69,"line_end":69,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111128,"byte_end":111131,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ It is possible to guess the format based on the content of the read object with","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111136,"byte_end":111219,"line_start":71,"line_end":71,"column_start":5,"column_end":88}},{"value":"/ [`with_guessed_format`], or to set the format directly with [`set_format`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111224,"byte_end":111303,"line_start":72,"line_end":72,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111308,"byte_end":111311,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111316,"byte_end":111372,"line_start":74,"line_end":74,"column_start":5,"column_end":61}},{"value":"/ [`set_format`]: method.set_format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111377,"byte_end":111414,"line_start":75,"line_end":75,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":475},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111599,"byte_end":111610,"line_start":84,"line_end":84,"column_start":12,"column_end":23},"name":"with_format","qualname":"<Reader<R>>::with_format","value":"pub fn with_format(R, ImageFormat) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct a reader with specified format.\n","sig":null,"attributes":[{"value":"/ Construct a reader with specified format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111542,"byte_end":111587,"line_start":83,"line_end":83,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111804,"byte_end":111810,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"format","qualname":"<Reader<R>>::format","value":"pub fn format(&Self) -> Option<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Get the currently determined format.\n","sig":null,"attributes":[{"value":"/ Get the currently determined format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111752,"byte_end":111792,"line_start":91,"line_end":91,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":477},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111945,"byte_end":111955,"line_start":97,"line_end":97,"column_start":12,"column_end":22},"name":"set_format","qualname":"<Reader<R>>::set_format","value":"pub fn set_format(&mut Self, ImageFormat)","parent":null,"children":[],"decl_id":null,"docs":" Supply the format as which to interpret the read image.\n","sig":null,"attributes":[{"value":"/ Supply the format as which to interpret the read image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111874,"byte_end":111933,"line_start":96,"line_end":96,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112285,"byte_end":112297,"line_start":105,"line_end":105,"column_start":12,"column_end":24},"name":"clear_format","qualname":"<Reader<R>>::clear_format","value":"pub fn clear_format(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove the current information on the image format.","sig":null,"attributes":[{"value":"/ Remove the current information on the image format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112037,"byte_end":112092,"line_start":101,"line_end":101,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112097,"byte_end":112100,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Note that many operations require format information to be present and will return e.g. an","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112105,"byte_end":112199,"line_start":103,"line_end":103,"column_start":5,"column_end":99}},{"value":"/ `ImageError::Unsupported` when the image format has not been set.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112204,"byte_end":112273,"line_start":104,"line_end":104,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":479},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112384,"byte_end":112394,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Reader<R>>::into_inner","value":"pub fn into_inner(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the reader.\n","sig":null,"attributes":[{"value":"/ Unwrap the reader.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112350,"byte_end":112372,"line_start":109,"line_end":109,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":481},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112877,"byte_end":112881,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"open","qualname":"<Reader<BufReader<File>>>::open","value":"pub fn open<P>(P) -> io::Result<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open a file to read, format will be guessed from path.","sig":null,"attributes":[{"value":"/ Open a file to read, format will be guessed from path.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112471,"byte_end":112529,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112534,"byte_end":112537,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ This will not attempt any io operation on the opened file.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112542,"byte_end":112604,"line_start":118,"line_end":118,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112609,"byte_end":112612,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ If you want to inspect the content for a better guess on the format, which does not depend","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112617,"byte_end":112711,"line_start":120,"line_end":120,"column_start":5,"column_end":99}},{"value":"/ on file extensions, follow this call with a call to [`with_guessed_format`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112716,"byte_end":112796,"line_start":121,"line_end":121,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112801,"byte_end":112804,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ [`with_guessed_format`]: #method.with_guessed_format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112809,"byte_end":112865,"line_start":123,"line_end":123,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114523,"byte_end":114542,"line_start":166,"line_end":166,"column_start":12,"column_end":31},"name":"with_guessed_format","qualname":"<Reader<R>>::with_guessed_format","value":"pub fn with_guessed_format(Self) -> io::Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Make a format guess based on the content, replacing it on success.","sig":null,"attributes":[{"value":"/ Make a format guess based on the content, replacing it on success.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113249,"byte_end":113319,"line_start":138,"line_end":138,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113324,"byte_end":113327,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `Ok` with the guess if no io error occurs. Additionally, replaces the current","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113332,"byte_end":113421,"line_start":140,"line_end":140,"column_start":5,"column_end":94}},{"value":"/ format if the guess was successful. If the guess was unable to determine a format then","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113426,"byte_end":113516,"line_start":141,"line_end":141,"column_start":5,"column_end":95}},{"value":"/ the current format of the reader is unchanged.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113521,"byte_end":113571,"line_start":142,"line_end":142,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113576,"byte_end":113579,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ Returns an error if the underlying reader fails. The format is unchanged. The error is a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113584,"byte_end":113676,"line_start":144,"line_end":144,"column_start":5,"column_end":97}},{"value":"/ `std::io::Error` and not `ImageError` since the only error case is an error when the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113681,"byte_end":113769,"line_start":145,"line_end":145,"column_start":5,"column_end":93}},{"value":"/ underlying reader seeks.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113774,"byte_end":113802,"line_start":146,"line_end":146,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113807,"byte_end":113810,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ When an error occurs, the reader may not have been properly reset and it is potentially","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113815,"byte_end":113906,"line_start":148,"line_end":148,"column_start":5,"column_end":96}},{"value":"/ hazardous to continue with more io.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113911,"byte_end":113950,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113955,"byte_end":113958,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ ## Usage","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113963,"byte_end":113975,"line_start":151,"line_end":151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113980,"byte_end":113983,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ This supplements the path based type deduction from [`open`](Reader::open) with content based deduction.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113988,"byte_end":114096,"line_start":153,"line_end":153,"column_start":5,"column_end":113}},{"value":"/ This is more common in Linux and UNIX operating systems and also helpful if the path can","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114101,"byte_end":114193,"line_start":154,"line_end":154,"column_start":5,"column_end":97}},{"value":"/ not be directly controlled.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114198,"byte_end":114229,"line_start":155,"line_end":155,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114234,"byte_end":114237,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114242,"byte_end":114255,"line_start":157,"line_end":157,"column_start":5,"column_end":18}},{"value":"/ # use image::ImageError;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114260,"byte_end":114288,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ # use image::io::Reader;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114293,"byte_end":114321,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/ # fn main() -> Result<(), ImageError> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114326,"byte_end":114369,"line_start":160,"line_end":160,"column_start":5,"column_end":48}},{"value":"/ let image = Reader::open(\"image.unknown\")?","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114374,"byte_end":114420,"line_start":161,"line_end":161,"column_start":5,"column_end":51}},{"value":"/     .with_guessed_format()?","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114425,"byte_end":114456,"line_start":162,"line_end":162,"column_start":5,"column_end":36}},{"value":"/     .decode()?;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114461,"byte_end":114480,"line_start":163,"line_end":163,"column_start":5,"column_end":24}},{"value":"/ # Ok(()) }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114485,"byte_end":114499,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":114504,"byte_end":114511,"line_start":165,"line_end":165,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115500,"byte_end":115515,"line_start":192,"line_end":192,"column_start":12,"column_end":27},"name":"into_dimensions","qualname":"<Reader<R>>::into_dimensions","value":"pub fn into_dimensions(Self) -> ImageResult<(u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Read the image dimensions.","sig":null,"attributes":[{"value":"/ Read the image dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115287,"byte_end":115317,"line_start":187,"line_end":187,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115322,"byte_end":115325,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115330,"byte_end":115405,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115410,"byte_end":115413,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115418,"byte_end":115488,"line_start":191,"line_end":191,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115909,"byte_end":115915,"line_start":202,"line_end":202,"column_start":12,"column_end":18},"name":"decode","qualname":"<Reader<R>>::decode","value":"pub fn decode(Self) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Read the image (replaces `load`).","sig":null,"attributes":[{"value":"/ Read the image (replaces `load`).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115689,"byte_end":115726,"line_start":197,"line_end":197,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115731,"byte_end":115734,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ Uses the current format to construct the correct reader for the format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115739,"byte_end":115814,"line_start":199,"line_end":199,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115819,"byte_end":115822,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no format was determined, returns an `ImageError::Unsupported`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":115827,"byte_end":115897,"line_start":201,"line_end":201,"column_start":5,"column_end":75}}]},{"kind":"Function","id":{"krate":0,"index":524},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":118028,"byte_end":118032,"line_start":67,"line_end":67,"column_start":8,"column_end":12},"name":"load","qualname":"::io::free_functions::load","value":"pub fn load<R: BufRead + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117815,"byte_end":117851,"line_start":60,"line_end":60,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117852,"byte_end":117855,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117856,"byte_end":117902,"line_start":62,"line_end":62,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117903,"byte_end":117906,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117907,"byte_end":117948,"line_start":64,"line_end":64,"column_start":1,"column_end":42}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":117949,"byte_end":117975,"line_start":65,"line_end":65,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":537},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127931,"byte_end":127943,"line_start":289,"line_end":289,"column_start":8,"column_end":20},"name":"guess_format","qualname":"::io::free_functions::guess_format","value":"pub fn guess_format(&[u8]) -> ImageResult<ImageFormat>","parent":null,"children":[],"decl_id":null,"docs":" Guess image format from memory block","sig":null,"attributes":[{"value":"/ Guess image format from memory block","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127670,"byte_end":127710,"line_start":284,"line_end":284,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127711,"byte_end":127714,"line_start":285,"line_end":285,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format based on the Magic Bytes at the beginning.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127715,"byte_end":127808,"line_start":286,"line_end":286,"column_start":1,"column_end":94}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127809,"byte_end":127851,"line_start":287,"line_end":287,"column_start":1,"column_end":43}},{"value":"/ This is not to be trusted on the validity of the whole memory block","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":127852,"byte_end":127923,"line_start":288,"line_end":288,"column_start":1,"column_end":72}}]},{"kind":"Mod","id":{"krate":0,"index":542},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"flat","qualname":"::flat","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":4155},{"krate":0,"index":552},{"krate":0,"index":553},{"krate":0,"index":554},{"krate":0,"index":555},{"krate":0,"index":556},{"krate":0,"index":557},{"krate":0,"index":558},{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":2512},{"krate":0,"index":2520},{"krate":0,"index":2517},{"krate":0,"index":2523},{"krate":0,"index":2543},{"krate":0,"index":2542},{"krate":0,"index":2540},{"krate":0,"index":2536},{"krate":0,"index":2537},{"krate":0,"index":2533},{"krate":0,"index":2534},{"krate":0,"index":2530},{"krate":0,"index":2545},{"krate":0,"index":2571},{"krate":0,"index":2570},{"krate":0,"index":2568},{"krate":0,"index":2564},{"krate":0,"index":2565},{"krate":0,"index":2561},{"krate":0,"index":2562},{"krate":0,"index":2551},{"krate":0,"index":2549},{"krate":0,"index":569},{"krate":0,"index":592},{"krate":0,"index":596},{"krate":0,"index":638},{"krate":0,"index":2573},{"krate":0,"index":2582},{"krate":0,"index":2578},{"krate":0,"index":2586},{"krate":0,"index":2595},{"krate":0,"index":2591},{"krate":0,"index":2599},{"krate":0,"index":2621},{"krate":0,"index":2620},{"krate":0,"index":2618},{"krate":0,"index":2614},{"krate":0,"index":2615},{"krate":0,"index":2611},{"krate":0,"index":2612},{"krate":0,"index":2608},{"krate":0,"index":2623},{"krate":0,"index":2646},{"krate":0,"index":2645},{"krate":0,"index":2643},{"krate":0,"index":2640},{"krate":0,"index":2641},{"krate":0,"index":2637},{"krate":0,"index":2638},{"krate":0,"index":2634},{"krate":0,"index":643},{"krate":0,"index":656},{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":675},{"krate":0,"index":679},{"krate":0,"index":691},{"krate":0,"index":703},{"krate":0,"index":711},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":719}],"decl_id":null,"docs":" Image representations for ffi.","sig":null,"attributes":[{"value":"! Image representations for ffi.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128719,"byte_end":128753,"line_start":1,"line_end":1,"column_start":1,"column_end":35}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128754,"byte_end":128757,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! # Usage","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128758,"byte_end":128769,"line_start":3,"line_end":3,"column_start":1,"column_end":12}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128770,"byte_end":128773,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! Imagine you want to offer a very simple ffi interface: The caller provides an image buffer and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128774,"byte_end":128872,"line_start":5,"line_end":5,"column_start":1,"column_end":99}},{"value":"! your program creates a thumbnail from it and dumps that image as `png`. This module is designed","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128873,"byte_end":128972,"line_start":6,"line_end":6,"column_start":1,"column_end":100}},{"value":"! to help you transition from raw memory data to Rust representation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":128973,"byte_end":129044,"line_start":7,"line_end":7,"column_start":1,"column_end":72}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129045,"byte_end":129048,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"! ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129049,"byte_end":129062,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"! use std::ptr;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129063,"byte_end":129080,"line_start":10,"line_end":10,"column_start":1,"column_end":18}},{"value":"! use std::slice;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129081,"byte_end":129100,"line_start":11,"line_end":11,"column_start":1,"column_end":20}},{"value":"! use image::Rgb;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129101,"byte_end":129120,"line_start":12,"line_end":12,"column_start":1,"column_end":20}},{"value":"! use image::flat::{FlatSamples, SampleLayout};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129121,"byte_end":129170,"line_start":13,"line_end":13,"column_start":1,"column_end":50}},{"value":"! use image::imageops::thumbnail;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129171,"byte_end":129206,"line_start":14,"line_end":14,"column_start":1,"column_end":36}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129207,"byte_end":129210,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"! #[no_mangle]","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129211,"byte_end":129227,"line_start":16,"line_end":16,"column_start":1,"column_end":17}},{"value":"! pub extern \"C\" fn store_rgb8_compressed(","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129228,"byte_end":129272,"line_start":17,"line_end":17,"column_start":1,"column_end":45}},{"value":"!     data: *const u8, len: usize,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129273,"byte_end":129309,"line_start":18,"line_end":18,"column_start":1,"column_end":37}},{"value":"!     layout: *const SampleLayout","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129310,"byte_end":129345,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"! )","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129346,"byte_end":129351,"line_start":20,"line_end":20,"column_start":1,"column_end":6}},{"value":"!     -> bool","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129352,"byte_end":129367,"line_start":21,"line_end":21,"column_start":1,"column_end":16}},{"value":"! {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129368,"byte_end":129373,"line_start":22,"line_end":22,"column_start":1,"column_end":6}},{"value":"!     let samples = unsafe { slice::from_raw_parts(data, len) };","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129374,"byte_end":129440,"line_start":23,"line_end":23,"column_start":1,"column_end":67}},{"value":"!     let layout = unsafe { ptr::read(layout) };","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129441,"byte_end":129491,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129492,"byte_end":129495,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"!     let buffer = FlatSamples {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129496,"byte_end":129530,"line_start":26,"line_end":26,"column_start":1,"column_end":35}},{"value":"!         samples,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129531,"byte_end":129551,"line_start":27,"line_end":27,"column_start":1,"column_end":21}},{"value":"!         layout,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129552,"byte_end":129571,"line_start":28,"line_end":28,"column_start":1,"column_end":20}},{"value":"!         color_hint: None,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129572,"byte_end":129601,"line_start":29,"line_end":29,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129602,"byte_end":129612,"line_start":30,"line_end":30,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129613,"byte_end":129616,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"!     let view = match buffer.as_view::<Rgb<u8>>() {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129617,"byte_end":129671,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"!         Err(_) => return false, // Invalid layout.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129672,"byte_end":129726,"line_start":33,"line_end":33,"column_start":1,"column_end":55}},{"value":"!         Ok(view) => view,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129727,"byte_end":129756,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"!     };","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129757,"byte_end":129767,"line_start":35,"line_end":35,"column_start":1,"column_end":11}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129768,"byte_end":129771,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"!     thumbnail(&view, 64, 64)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129772,"byte_end":129804,"line_start":37,"line_end":37,"column_start":1,"column_end":33}},{"value":"!         .save(\"output.png\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129805,"byte_end":129836,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"!         .map(|_| true)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129837,"byte_end":129863,"line_start":39,"line_end":39,"column_start":1,"column_end":27}},{"value":"!         .unwrap_or_else(|_| false)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129864,"byte_end":129902,"line_start":40,"line_end":40,"column_start":1,"column_end":39}},{"value":"! }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129903,"byte_end":129908,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"! ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129909,"byte_end":129916,"line_start":42,"line_end":42,"column_start":1,"column_end":8}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":129917,"byte_end":129920,"line_start":43,"line_end":43,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2512},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131911,"byte_end":131922,"line_start":81,"line_end":81,"column_start":12,"column_end":23},"name":"FlatSamples","qualname":"::flat::FlatSamples","value":"FlatSamples { samples, layout, color_hint }","parent":null,"children":[{"krate":0,"index":2514},{"krate":0,"index":2515},{"krate":0,"index":2516}],"decl_id":null,"docs":" A flat buffer over a (multi channel) image.","sig":null,"attributes":[{"value":"/ A flat buffer over a (multi channel) image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130328,"byte_end":130375,"line_start":56,"line_end":56,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130376,"byte_end":130379,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ In contrast to `ImageBuffer`, this representation of a sample collection is much more lenient","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130380,"byte_end":130477,"line_start":58,"line_end":58,"column_start":1,"column_end":98}},{"value":"/ in the layout thereof. It also allows grouping by color planes instead of by pixel as long as","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130478,"byte_end":130575,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ the strides of each extent are constant. This struct itself has no invariants on the strides","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130576,"byte_end":130672,"line_start":60,"line_end":60,"column_start":1,"column_end":97}},{"value":"/ but not every possible configuration can be interpreted as a [`GenericImageView`] or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130673,"byte_end":130761,"line_start":61,"line_end":61,"column_start":1,"column_end":89}},{"value":"/ [`GenericImage`]. The methods [`as_view`] and [`as_view_mut`] construct the actual implementors","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130762,"byte_end":130861,"line_start":62,"line_end":62,"column_start":1,"column_end":100}},{"value":"/ of these traits and perform necessary checks. To manually perform this and other layout checks","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130862,"byte_end":130960,"line_start":63,"line_end":63,"column_start":1,"column_end":99}},{"value":"/ use [`is_normal`] or [`has_aliased_samples`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":130961,"byte_end":131010,"line_start":64,"line_end":64,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131011,"byte_end":131014,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/ Instances can be constructed not only by hand. The buffer instances returned by library","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131015,"byte_end":131106,"line_start":66,"line_end":66,"column_start":1,"column_end":92}},{"value":"/ functions such as [`ImageBuffer::as_flat_samples`] guarantee that the conversion to a generic","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131107,"byte_end":131204,"line_start":67,"line_end":67,"column_start":1,"column_end":98}},{"value":"/ image or generic view succeeds. A very different constructor is [`with_monocolor`]. It uses a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131205,"byte_end":131302,"line_start":68,"line_end":68,"column_start":1,"column_end":98}},{"value":"/ single pixel as the backing storage for an arbitrarily sized read-only raster by mapping each","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131303,"byte_end":131400,"line_start":69,"line_end":69,"column_start":1,"column_end":98}},{"value":"/ pixel to the same samples by setting some strides to `0`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131401,"byte_end":131462,"line_start":70,"line_end":70,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131463,"byte_end":131466,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: ../trait.GenericImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131467,"byte_end":131515,"line_start":72,"line_end":72,"column_start":1,"column_end":49}},{"value":"/ [`GenericImageView`]: ../trait.GenericImageView.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131516,"byte_end":131572,"line_start":73,"line_end":73,"column_start":1,"column_end":57}},{"value":"/ [`ImageBuffer::as_flat_samples`]: ../struct.ImageBuffer.html#method.as_flat_samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131573,"byte_end":131660,"line_start":74,"line_end":74,"column_start":1,"column_end":88}},{"value":"/ [`is_normal`]: #method.is_normal","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131661,"byte_end":131697,"line_start":75,"line_end":75,"column_start":1,"column_end":37}},{"value":"/ [`has_aliased_samples`]: #method.has_aliased_samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131698,"byte_end":131754,"line_start":76,"line_end":76,"column_start":1,"column_end":57}},{"value":"/ [`as_view`]: #method.as_view","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131755,"byte_end":131787,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ [`as_view_mut`]: #method.as_view_mut","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131788,"byte_end":131828,"line_start":78,"line_end":78,"column_start":1,"column_end":41}},{"value":"/ [`with_monocolor`]: #method.with_monocolor","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131829,"byte_end":131875,"line_start":79,"line_end":79,"column_start":1,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":2514},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132000,"byte_end":132007,"line_start":83,"line_end":83,"column_start":9,"column_end":16},"name":"samples","qualname":"::flat::FlatSamples::samples","value":"Buffer","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" Underlying linear container holding sample values.\n","sig":null,"attributes":[{"value":"/ Underlying linear container holding sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":131937,"byte_end":131991,"line_start":82,"line_end":82,"column_start":5,"column_end":59}}]},{"kind":"Field","id":{"krate":0,"index":2515},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132091,"byte_end":132097,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"layout","qualname":"::flat::FlatSamples::layout","value":"flat::SampleLayout","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" A `repr(C)` description of the layout of buffer samples.\n","sig":null,"attributes":[{"value":"/ A `repr(C)` description of the layout of buffer samples.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132022,"byte_end":132082,"line_start":85,"line_end":85,"column_start":5,"column_end":65}}]},{"kind":"Field","id":{"krate":0,"index":2516},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132552,"byte_end":132562,"line_start":94,"line_end":94,"column_start":9,"column_end":19},"name":"color_hint","qualname":"::flat::FlatSamples::color_hint","value":"std::option::Option<color::ColorType>","parent":{"krate":0,"index":2512},"children":[],"decl_id":null,"docs":" Supplementary color information.","sig":null,"attributes":[{"value":"/ Supplementary color information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132118,"byte_end":132154,"line_start":88,"line_end":88,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132159,"byte_end":132162,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ You may keep this as `None` in most cases. This is NOT checked in `View` or other","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132167,"byte_end":132252,"line_start":90,"line_end":90,"column_start":5,"column_end":90}},{"value":"/ converters. It is intended mainly as a way for types that convert to this buffer type to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132257,"byte_end":132349,"line_start":91,"line_end":91,"column_start":5,"column_end":97}},{"value":"/ attach their otherwise static color information. A dynamic image representation could","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132354,"byte_end":132443,"line_start":92,"line_end":92,"column_start":5,"column_end":94}},{"value":"/ however use this to resolve representational ambiguities such as the order of RGB channels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132448,"byte_end":132543,"line_start":93,"line_end":93,"column_start":5,"column_end":100}}]},{"kind":"Struct","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132712,"byte_end":132724,"line_start":100,"line_end":100,"column_start":12,"column_end":24},"name":"SampleLayout","qualname":"::flat::SampleLayout","value":"SampleLayout { channels, channel_stride, width, width_stride, height, height_stride }","parent":null,"children":[{"krate":0,"index":2524},{"krate":0,"index":2525},{"krate":0,"index":2526},{"krate":0,"index":2527},{"krate":0,"index":2528},{"krate":0,"index":2529}],"decl_id":null,"docs":" A ffi compatible description of a sample buffer.\n","sig":null,"attributes":[{"value":"/ A ffi compatible description of a sample buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132586,"byte_end":132638,"line_start":97,"line_end":97,"column_start":1,"column_end":53}},{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132639,"byte_end":132649,"line_start":98,"line_end":98,"column_start":1,"column_end":11}}]},{"kind":"Field","id":{"krate":0,"index":2524},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132808,"byte_end":132816,"line_start":102,"line_end":102,"column_start":9,"column_end":17},"name":"channels","qualname":"::flat::SampleLayout::channels","value":"u8","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" The number of channels in the color representation of the image.\n","sig":null,"attributes":[{"value":"/ The number of channels in the color representation of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132731,"byte_end":132799,"line_start":101,"line_end":101,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132902,"byte_end":132916,"line_start":105,"line_end":105,"column_start":9,"column_end":23},"name":"channel_stride","qualname":"::flat::SampleLayout::channel_stride","value":"usize","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" Add this to an index to get to the sample in the next channel.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the sample in the next channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132827,"byte_end":132893,"line_start":104,"line_end":104,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2526},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132978,"byte_end":132983,"line_start":108,"line_end":108,"column_start":9,"column_end":14},"name":"width","qualname":"::flat::SampleLayout::width","value":"u32","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" The width of the represented image.\n","sig":null,"attributes":[{"value":"/ The width of the represented image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132930,"byte_end":132969,"line_start":107,"line_end":107,"column_start":5,"column_end":44}}]},{"kind":"Field","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133070,"byte_end":133082,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"width_stride","qualname":"::flat::SampleLayout::width_stride","value":"usize","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in x-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in x-direction.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":132995,"byte_end":133061,"line_start":110,"line_end":110,"column_start":5,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":2528},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133145,"byte_end":133151,"line_start":114,"line_end":114,"column_start":9,"column_end":15},"name":"height","qualname":"::flat::SampleLayout::height","value":"u32","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" The height of the represented image.\n","sig":null,"attributes":[{"value":"/ The height of the represented image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133096,"byte_end":133136,"line_start":113,"line_end":113,"column_start":5,"column_end":45}}]},{"kind":"Field","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133238,"byte_end":133251,"line_start":117,"line_end":117,"column_start":9,"column_end":22},"name":"height_stride","qualname":"::flat::SampleLayout::height_stride","value":"usize","parent":{"krate":0,"index":2523},"children":[],"decl_id":null,"docs":" Add this to an index to get to the next sample in y-direction.\n","sig":null,"attributes":[{"value":"/ Add this to an index to get to the next sample in y-direction.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133163,"byte_end":133229,"line_start":116,"line_end":116,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134226,"byte_end":134242,"line_start":141,"line_end":141,"column_start":12,"column_end":28},"name":"row_major_packed","qualname":"<SampleLayout>::row_major_packed","value":"pub fn row_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a row-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a row-major image packed in all directions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133432,"byte_end":133488,"line_start":125,"line_end":125,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133493,"byte_end":133496,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::RowMajorPacked`. It can therefore be converted to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133501,"byte_end":133596,"line_start":127,"line_end":127,"column_start":5,"column_end":100}},{"value":"/ safely to an `ImageBuffer` with a large enough underlying buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133601,"byte_end":133670,"line_start":128,"line_end":128,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133675,"byte_end":133678,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133683,"byte_end":133690,"line_start":130,"line_end":130,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133695,"byte_end":133745,"line_start":131,"line_end":131,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::row_major_packed(3, 640, 480);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133750,"byte_end":133811,"line_start":132,"line_end":132,"column_start":5,"column_end":66}},{"value":"/ assert!(layout.is_normal(NormalForm::RowMajorPacked));","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133816,"byte_end":133874,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133879,"byte_end":133886,"line_start":134,"line_end":134,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133891,"byte_end":133894,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133899,"byte_end":133911,"line_start":136,"line_end":136,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133916,"byte_end":133919,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133924,"byte_end":134019,"line_start":138,"line_end":138,"column_start":5,"column_end":100}},{"value":"/ in the `height` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134024,"byte_end":134115,"line_start":139,"line_end":139,"column_start":5,"column_end":96}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134120,"byte_end":134214,"line_start":140,"line_end":140,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135493,"byte_end":135512,"line_start":170,"line_end":170,"column_start":12,"column_end":31},"name":"column_major_packed","qualname":"<SampleLayout>::column_major_packed","value":"pub fn column_major_packed(u8, u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Describe a column-major image packed in all directions.","sig":null,"attributes":[{"value":"/ Describe a column-major image packed in all directions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134680,"byte_end":134739,"line_start":154,"line_end":154,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134744,"byte_end":134747,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ The resulting will surely be `NormalForm::ColumnMajorPacked`. This is not particularly","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134752,"byte_end":134842,"line_start":156,"line_end":156,"column_start":5,"column_end":95}},{"value":"/ useful for conversion but can be used to describe such a buffer without pitfalls.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134847,"byte_end":134932,"line_start":157,"line_end":157,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134937,"byte_end":134940,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134945,"byte_end":134952,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ # use image::flat::{NormalForm, SampleLayout};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":134957,"byte_end":135007,"line_start":160,"line_end":160,"column_start":5,"column_end":55}},{"value":"/ let layout = SampleLayout::column_major_packed(3, 640, 480);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135012,"byte_end":135076,"line_start":161,"line_end":161,"column_start":5,"column_end":69}},{"value":"/ assert!(layout.is_normal(NormalForm::ColumnMajorPacked));","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135081,"byte_end":135142,"line_start":162,"line_end":162,"column_start":5,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135147,"byte_end":135154,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135159,"byte_end":135162,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135167,"byte_end":135179,"line_start":165,"line_end":165,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135184,"byte_end":135187,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ On platforms where `usize` has the same size as `u32` this panics when the resulting stride","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135192,"byte_end":135287,"line_start":167,"line_end":167,"column_start":5,"column_end":100}},{"value":"/ in the `width` direction would be larger than `usize::max_value()`. On other platforms","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135292,"byte_end":135382,"line_start":168,"line_end":168,"column_start":5,"column_end":95}},{"value":"/ where it can surely accomodate `u8::max_value() * u32::max_value(), this can never happen.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135387,"byte_end":135481,"line_start":169,"line_end":169,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136128,"byte_end":136139,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<SampleLayout>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":135953,"byte_end":136012,"line_start":183,"line_end":183,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136017,"byte_end":136020,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136025,"byte_end":136096,"line_start":185,"line_end":185,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136101,"byte_end":136116,"line_start":186,"line_end":186,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":573},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136456,"byte_end":136463,"line_start":195,"line_end":195,"column_start":12,"column_end":19},"name":"extents","qualname":"<SampleLayout>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136254,"byte_end":136305,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136310,"byte_end":136313,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136318,"byte_end":136411,"line_start":193,"line_end":193,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136416,"byte_end":136444,"line_start":194,"line_end":194,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136837,"byte_end":136843,"line_start":203,"line_end":203,"column_start":12,"column_end":18},"name":"bounds","qualname":"<SampleLayout>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136585,"byte_end":136639,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136644,"byte_end":136647,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136652,"byte_end":136742,"line_start":201,"line_end":201,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136747,"byte_end":136825,"line_start":202,"line_end":202,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":575},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138996,"byte_end":139006,"line_start":258,"line_end":258,"column_start":12,"column_end":22},"name":"min_length","qualname":"<SampleLayout>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":136931,"byte_end":137021,"line_start":207,"line_end":207,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137026,"byte_end":137029,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137034,"byte_end":137129,"line_start":209,"line_end":209,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137134,"byte_end":137224,"line_start":210,"line_end":210,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137229,"byte_end":137320,"line_start":211,"line_end":211,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137325,"byte_end":137382,"line_start":212,"line_end":212,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137387,"byte_end":137390,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137395,"byte_end":137412,"line_start":214,"line_end":214,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137417,"byte_end":137420,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137425,"byte_end":137509,"line_start":216,"line_end":216,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137514,"byte_end":137605,"line_start":217,"line_end":217,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137610,"byte_end":137613,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137618,"byte_end":137643,"line_start":219,"line_end":219,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137648,"byte_end":137651,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137656,"byte_end":137710,"line_start":221,"line_end":221,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137715,"byte_end":137739,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137744,"byte_end":137761,"line_start":223,"line_end":223,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137766,"byte_end":137791,"line_start":224,"line_end":224,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137796,"byte_end":137814,"line_start":225,"line_end":225,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137819,"byte_end":137822,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137827,"byte_end":137838,"line_start":227,"line_end":227,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137843,"byte_end":137866,"line_start":228,"line_end":228,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137871,"byte_end":137890,"line_start":229,"line_end":229,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137895,"byte_end":137937,"line_start":230,"line_end":230,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137942,"byte_end":137949,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137954,"byte_end":137957,"line_start":232,"line_end":232,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":137962,"byte_end":138054,"line_start":233,"line_end":233,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138059,"byte_end":138149,"line_start":234,"line_end":234,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138154,"byte_end":138157,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138162,"byte_end":138190,"line_start":236,"line_end":236,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138195,"byte_end":138198,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138203,"byte_end":138295,"line_start":238,"line_end":238,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138300,"byte_end":138394,"line_start":239,"line_end":239,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138399,"byte_end":138454,"line_start":240,"line_end":240,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138459,"byte_end":138462,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138467,"byte_end":138491,"line_start":242,"line_end":242,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138496,"byte_end":138513,"line_start":243,"line_end":243,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138518,"byte_end":138543,"line_start":244,"line_end":244,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138548,"byte_end":138566,"line_start":245,"line_end":245,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138571,"byte_end":138574,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138579,"byte_end":138590,"line_start":247,"line_end":247,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138595,"byte_end":138611,"line_start":248,"line_end":248,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138616,"byte_end":138635,"line_start":249,"line_end":249,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138640,"byte_end":138663,"line_start":250,"line_end":250,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138668,"byte_end":138697,"line_start":251,"line_end":251,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138702,"byte_end":138737,"line_start":252,"line_end":252,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138742,"byte_end":138749,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138754,"byte_end":138757,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138762,"byte_end":138856,"line_start":255,"line_end":255,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138861,"byte_end":138954,"line_start":256,"line_end":256,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":138959,"byte_end":138984,"line_start":257,"line_end":257,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":577},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":139338,"byte_end":139342,"line_start":268,"line_end":268,"column_start":12,"column_end":16},"name":"fits","qualname":"<SampleLayout>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":139272,"byte_end":139326,"line_start":267,"line_end":267,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140452,"byte_end":140471,"line_start":293,"line_end":293,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<SampleLayout>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140102,"byte_end":140151,"line_start":288,"line_end":288,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140156,"byte_end":140159,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140164,"byte_end":140257,"line_start":290,"line_end":290,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140262,"byte_end":140356,"line_start":291,"line_end":291,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":140361,"byte_end":140440,"line_start":292,"line_end":292,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141716,"byte_end":141725,"line_start":323,"line_end":323,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<SampleLayout>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141206,"byte_end":141271,"line_start":316,"line_end":316,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141276,"byte_end":141279,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141284,"byte_end":141377,"line_start":318,"line_end":318,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141382,"byte_end":141477,"line_start":319,"line_end":319,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141482,"byte_end":141574,"line_start":320,"line_end":320,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141579,"byte_end":141673,"line_start":321,"line_end":321,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":141678,"byte_end":141704,"line_start":322,"line_end":322,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143423,"byte_end":143432,"line_start":378,"line_end":378,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<SampleLayout>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143081,"byte_end":143142,"line_start":373,"line_end":373,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143147,"byte_end":143150,"line_start":374,"line_end":374,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143155,"byte_end":143244,"line_start":375,"line_end":375,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143249,"byte_end":143343,"line_start":376,"line_end":376,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143348,"byte_end":143411,"line_start":377,"line_end":377,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143706,"byte_end":143711,"line_start":385,"line_end":385,"column_start":12,"column_end":17},"name":"index","qualname":"<SampleLayout>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143559,"byte_end":143604,"line_start":382,"line_end":382,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143609,"byte_end":143612,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143617,"byte_end":143694,"line_start":384,"line_end":384,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144305,"byte_end":144326,"line_start":398,"line_end":398,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<SampleLayout>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (channel, x, y).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (channel, x, y).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143934,"byte_end":143993,"line_start":393,"line_end":393,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":143998,"byte_end":144001,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144006,"byte_end":144095,"line_start":395,"line_end":395,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144100,"byte_end":144194,"line_start":396,"line_end":396,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144199,"byte_end":144293,"line_start":397,"line_end":397,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145257,"byte_end":145272,"line_start":419,"line_end":419,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<SampleLayout>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":144956,"byte_end":144996,"line_start":414,"line_end":414,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145001,"byte_end":145004,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145009,"byte_end":145101,"line_start":416,"line_end":416,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145106,"byte_end":145201,"line_start":417,"line_end":417,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145206,"byte_end":145245,"line_start":418,"line_end":418,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145800,"byte_end":145809,"line_start":430,"line_end":430,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<SampleLayout>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145475,"byte_end":145540,"line_start":425,"line_end":425,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145545,"byte_end":145548,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145553,"byte_end":145641,"line_start":427,"line_end":427,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145646,"byte_end":145741,"line_start":428,"line_end":428,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":145746,"byte_end":145788,"line_start":429,"line_end":429,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146482,"byte_end":146493,"line_start":457,"line_end":457,"column_start":12,"column_end":23},"name":"strides_cwh","qualname":"<FlatSamples<Buffer>>::strides_cwh","value":"pub fn strides_cwh(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the strides for indexing matrix-like `[(c, w, h)]`.","sig":null,"attributes":[{"value":"/ Get the strides for indexing matrix-like `[(c, w, h)]`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146307,"byte_end":146366,"line_start":453,"line_end":453,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146371,"byte_end":146374,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ For a row-major layout with grouped samples, this tuple is strictly","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146379,"byte_end":146450,"line_start":455,"line_end":455,"column_start":5,"column_end":76}},{"value":"/ increasing.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146455,"byte_end":146470,"line_start":456,"line_end":456,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146775,"byte_end":146782,"line_start":465,"line_end":465,"column_start":12,"column_end":19},"name":"extents","qualname":"<FlatSamples<Buffer>>::extents","value":"pub fn extents(&Self) -> (usize, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Get the dimensions `(channels, width, height)`.","sig":null,"attributes":[{"value":"/ Get the dimensions `(channels, width, height)`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146573,"byte_end":146624,"line_start":461,"line_end":461,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146629,"byte_end":146632,"line_start":462,"line_end":462,"column_start":5,"column_end":8}},{"value":"/ The interface is optimized for use with `strides_cwh` instead. The channel extent will be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146637,"byte_end":146730,"line_start":463,"line_end":463,"column_start":5,"column_end":98}},{"value":"/ before width and height.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146735,"byte_end":146763,"line_start":464,"line_end":464,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147110,"byte_end":147116,"line_start":473,"line_end":473,"column_start":12,"column_end":18},"name":"bounds","qualname":"<FlatSamples<Buffer>>::bounds","value":"pub fn bounds(&Self) -> (u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Tuple of bounds in the order of coordinate inputs.","sig":null,"attributes":[{"value":"/ Tuple of bounds in the order of coordinate inputs.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146858,"byte_end":146912,"line_start":469,"line_end":469,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146917,"byte_end":146920,"line_start":470,"line_end":470,"column_start":5,"column_end":8}},{"value":"/ This function should be used whenever working with image coordinates opposed to buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146925,"byte_end":147015,"line_start":471,"line_end":471,"column_start":5,"column_end":95}},{"value":"/ coordinates. The only difference compared to `extents` is the output type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147020,"byte_end":147098,"line_start":472,"line_end":472,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147230,"byte_end":147236,"line_start":478,"line_end":478,"column_start":12,"column_end":18},"name":"as_ref","qualname":"<FlatSamples<Buffer>>::as_ref","value":"pub fn as_ref<T>(&Self) -> FlatSamples<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference based version.\n","sig":null,"attributes":[{"value":"/ Get a reference based version.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147184,"byte_end":147218,"line_start":477,"line_end":477,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147510,"byte_end":147516,"line_start":487,"line_end":487,"column_start":12,"column_end":18},"name":"as_mut","qualname":"<FlatSamples<Buffer>>::as_mut","value":"pub fn as_mut<T>(&mut Self) -> FlatSamples<&mut [T]> where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference based version.\n","sig":null,"attributes":[{"value":"/ Get a mutable reference based version.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147456,"byte_end":147498,"line_start":486,"line_end":486,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":605},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147795,"byte_end":147801,"line_start":496,"line_end":496,"column_start":12,"column_end":18},"name":"to_vec","qualname":"<FlatSamples<Buffer>>::to_vec","value":"pub fn to_vec<T>(&Self) -> FlatSamples<Vec<T>> where T: Clone,\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Copy the data into an owned vector.\n","sig":null,"attributes":[{"value":"/ Copy the data into an owned vector.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":147744,"byte_end":147783,"line_start":495,"line_end":495,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":607},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149074,"byte_end":149084,"line_start":527,"line_end":527,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<FlatSamples<Buffer>>::get_sample","value":"pub fn get_sample<T>(&Self, u8, u32, u32) -> Option<&T> where\nBuffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a reference to a single sample.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148054,"byte_end":148093,"line_start":506,"line_end":506,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148098,"byte_end":148101,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::Index` but guarantees to properly","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148106,"byte_end":148201,"line_start":508,"line_end":508,"column_start":5,"column_end":100}},{"value":"/ check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148206,"byte_end":148284,"line_start":509,"line_end":509,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148289,"byte_end":148292,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148297,"byte_end":148304,"line_start":511,"line_end":511,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148309,"byte_end":148337,"line_start":512,"line_end":512,"column_start":5,"column_end":33}},{"value":"/ let flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148342,"byte_end":148401,"line_start":513,"line_end":513,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148406,"byte_end":148409,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ // Get the blue channel at (10, 10).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148414,"byte_end":148454,"line_start":515,"line_end":515,"column_start":5,"column_end":45}},{"value":"/ assert!(flat.get_sample(1, 10, 10).is_some());","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148459,"byte_end":148509,"line_start":516,"line_end":516,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148514,"byte_end":148517,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148522,"byte_end":148555,"line_start":518,"line_end":518,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148560,"byte_end":148610,"line_start":519,"line_end":519,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148615,"byte_end":148622,"line_start":520,"line_end":520,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148627,"byte_end":148630,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148635,"byte_end":148725,"line_start":522,"line_end":522,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148730,"byte_end":148811,"line_start":523,"line_end":523,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148816,"byte_end":148911,"line_start":524,"line_end":524,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":148916,"byte_end":149003,"line_start":525,"line_end":525,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149008,"byte_end":149062,"line_start":526,"line_end":526,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150681,"byte_end":150695,"line_start":560,"line_end":560,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<FlatSamples<Buffer>>::get_mut_sample","value":"pub fn get_mut_sample<T>(&mut Self, u8, u32, u32) -> Option<&mut T> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a single sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a single sample.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149271,"byte_end":149318,"line_start":534,"line_end":534,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149323,"byte_end":149326,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ This more restrictive than the method based on `std::ops::IndexMut` but guarantees to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149331,"byte_end":149420,"line_start":536,"line_end":536,"column_start":5,"column_end":94}},{"value":"/ properly check all bounds and not panic as long as `Buffer::as_ref` does not do so.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149425,"byte_end":149512,"line_start":537,"line_end":537,"column_start":5,"column_end":92}},{"value":"/ Contrary to conversion to `ViewMut`, this does not require that samples are packed since it","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149517,"byte_end":149612,"line_start":538,"line_end":538,"column_start":5,"column_end":100}},{"value":"/ does not need to convert samples to a color representation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149617,"byte_end":149680,"line_start":539,"line_end":539,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149685,"byte_end":149688,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149693,"byte_end":149787,"line_start":541,"line_end":541,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149792,"byte_end":149861,"line_start":542,"line_end":542,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149866,"byte_end":149869,"line_start":543,"line_end":543,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149874,"byte_end":149881,"line_start":544,"line_end":544,"column_start":5,"column_end":12}},{"value":"/ # use image::{RgbImage};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149886,"byte_end":149914,"line_start":545,"line_end":545,"column_start":5,"column_end":33}},{"value":"/ let mut flat = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149919,"byte_end":149982,"line_start":546,"line_end":546,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149987,"byte_end":149990,"line_start":547,"line_end":547,"column_start":5,"column_end":8}},{"value":"/ // Assign some new color to the blue channel at (10, 10).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":149995,"byte_end":150056,"line_start":548,"line_end":548,"column_start":5,"column_end":66}},{"value":"/ *flat.get_mut_sample(1, 10, 10).unwrap() = 255;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150061,"byte_end":150112,"line_start":549,"line_end":549,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150117,"byte_end":150120,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ // There is no alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150125,"byte_end":150158,"line_start":551,"line_end":551,"column_start":5,"column_end":38}},{"value":"/ assert!(flat.get_mut_sample(3, 10, 10).is_none());","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150163,"byte_end":150217,"line_start":552,"line_end":552,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150222,"byte_end":150229,"line_start":553,"line_end":553,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150234,"byte_end":150237,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ For cases where a special buffer does not provide `AsRef<[T]>`, consider encapsulating","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150242,"byte_end":150332,"line_start":555,"line_end":555,"column_start":5,"column_end":95}},{"value":"/ bounds checks with `min_length` in a type similar to `View`. Then you may use","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150337,"byte_end":150418,"line_start":556,"line_end":556,"column_start":5,"column_end":86}},{"value":"/ `in_bounds_index` as a small speedup over the index calculation of this method which relies","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150423,"byte_end":150518,"line_start":557,"line_end":557,"column_start":5,"column_end":100}},{"value":"/ on `index_ignoring_bounds` since it can not have a-priori knowledge that the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150523,"byte_end":150610,"line_start":558,"line_end":558,"column_start":5,"column_end":92}},{"value":"/ coordinate is in fact backed by any memory buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150615,"byte_end":150669,"line_start":559,"line_end":559,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151359,"byte_end":151366,"line_start":575,"line_end":575,"column_start":12,"column_end":19},"name":"as_view","qualname":"<FlatSamples<Buffer>>::as_view","value":"pub fn as_view<P>(&Self) -> Result<View<&[P::Subpixel], P>, Error> where\nP: Pixel, Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer as an image over some type of pixel.","sig":null,"attributes":[{"value":"/ View this buffer as an image over some type of pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":150947,"byte_end":151004,"line_start":569,"line_end":569,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151009,"byte_end":151012,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151017,"byte_end":151107,"line_start":571,"line_end":571,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151112,"byte_end":151206,"line_start":572,"line_end":572,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151211,"byte_end":151305,"line_start":573,"line_end":573,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151310,"byte_end":151347,"line_start":574,"line_end":574,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152943,"byte_end":152967,"line_start":612,"line_end":612,"column_start":12,"column_end":36},"name":"as_view_with_mut_samples","qualname":"<FlatSamples<Buffer>>::as_view_with_mut_samples","value":"pub fn as_view_with_mut_samples<P>(&mut Self)\n-> Result<View<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" View this buffer but keep mutability at a sample level.","sig":null,"attributes":[{"value":"/ View this buffer but keep mutability at a sample level.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":151978,"byte_end":152037,"line_start":597,"line_end":597,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152042,"byte_end":152045,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ This is similar to `as_view` but subtly different from `as_view_mut`. The resulting type","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152050,"byte_end":152142,"line_start":599,"line_end":599,"column_start":5,"column_end":97}},{"value":"/ can be used as a `GenericImage` with the same prior invariants needed as for `as_view`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152147,"byte_end":152238,"line_start":600,"line_end":600,"column_start":5,"column_end":96}},{"value":"/ It can not be used as a mutable `GenericImage` but does not need channels to be packed in","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152243,"byte_end":152336,"line_start":601,"line_end":601,"column_start":5,"column_end":98}},{"value":"/ their pixel representation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152341,"byte_end":152372,"line_start":602,"line_end":602,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152377,"byte_end":152380,"line_start":603,"line_end":603,"column_start":5,"column_end":8}},{"value":"/ This first ensures that all in-bounds coordinates refer to valid indices in the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152385,"byte_end":152475,"line_start":604,"line_end":604,"column_start":5,"column_end":95}},{"value":"/ buffer. It also checks that the specified pixel format expects the same number of channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152480,"byte_end":152574,"line_start":605,"line_end":605,"column_start":5,"column_end":99}},{"value":"/ that are present in this buffer. Neither are larger nor a smaller number will be accepted.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152579,"byte_end":152673,"line_start":606,"line_end":606,"column_start":5,"column_end":99}},{"value":"/ There is no automatic conversion.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152678,"byte_end":152715,"line_start":607,"line_end":607,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152720,"byte_end":152723,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152728,"byte_end":152822,"line_start":609,"line_end":609,"column_start":5,"column_end":99}},{"value":"/ for one sample can in fact modify other samples as well. Sometimes exactly this is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152827,"byte_end":152913,"line_start":610,"line_end":610,"column_start":5,"column_end":91}},{"value":"/ intended.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":152918,"byte_end":152931,"line_start":611,"line_end":611,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154330,"byte_end":154341,"line_start":645,"line_end":645,"column_start":12,"column_end":23},"name":"as_view_mut","qualname":"<FlatSamples<Buffer>>::as_view_mut","value":"pub fn as_view_mut<P>(&mut Self)\n-> Result<ViewMut<&mut [P::Subpixel], P>, Error> where P: Pixel,\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Interpret this buffer as a mutable image.","sig":null,"attributes":[{"value":"/ Interpret this buffer as a mutable image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153587,"byte_end":153632,"line_start":634,"line_end":634,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153637,"byte_end":153640,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ To succeed, the pixels in this buffer may not alias each other and the samples of each","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153645,"byte_end":153735,"line_start":636,"line_end":636,"column_start":5,"column_end":95}},{"value":"/ pixel must be packed (i.e. `channel_stride` is `1`). The number of channels must be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153740,"byte_end":153827,"line_start":637,"line_end":637,"column_start":5,"column_end":92}},{"value":"/ consistent with the channel count expected by the pixel format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153832,"byte_end":153899,"line_start":638,"line_end":638,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153904,"byte_end":153907,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ This is similar to an `ImageBuffer` except it is a temporary view that is not normalized as","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":153912,"byte_end":154007,"line_start":640,"line_end":640,"column_start":5,"column_end":100}},{"value":"/ strongly. To get an owning version, consider copying the data into an `ImageBuffer`. This","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154012,"byte_end":154105,"line_start":641,"line_end":641,"column_start":5,"column_end":98}},{"value":"/ provides many more operations, is possibly faster (if not you may want to open an issue) is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154110,"byte_end":154205,"line_start":642,"line_end":642,"column_start":5,"column_end":100}},{"value":"/ generally polished. You can also try to convert this buffer inline, see","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154210,"byte_end":154285,"line_start":643,"line_end":643,"column_start":5,"column_end":80}},{"value":"/ `ImageBuffer::from_raw`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":154290,"byte_end":154318,"line_start":644,"line_end":644,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155338,"byte_end":155346,"line_start":675,"line_end":675,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<FlatSamples<Buffer>>::as_slice","value":"pub fn as_slice<T>(&Self) -> &[T] where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155114,"byte_end":155146,"line_start":671,"line_end":671,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155151,"byte_end":155154,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155159,"byte_end":155251,"line_start":673,"line_end":673,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155256,"byte_end":155326,"line_start":674,"line_end":674,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155657,"byte_end":155669,"line_start":683,"line_end":683,"column_start":12,"column_end":24},"name":"as_mut_slice","qualname":"<FlatSamples<Buffer>>::as_mut_slice","value":"pub fn as_mut_slice<T>(&mut Self) -> &mut [T] where Buffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" View the samples as a slice.","sig":null,"attributes":[{"value":"/ View the samples as a slice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155433,"byte_end":155465,"line_start":679,"line_end":679,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155470,"byte_end":155473,"line_start":680,"line_end":680,"column_start":5,"column_end":8}},{"value":"/ The slice is not limited to the region of the image and not all sample indices are valid","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155478,"byte_end":155570,"line_start":681,"line_end":681,"column_start":5,"column_end":97}},{"value":"/ indices into this buffer. See `image_mut_slice` as an alternative.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155575,"byte_end":155645,"line_start":682,"line_end":682,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156100,"byte_end":156111,"line_start":692,"line_end":692,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<FlatSamples<Buffer>>::image_slice","value":"pub fn image_slice<T>(&Self) -> Option<&[T]> where Buffer: AsRef<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155764,"byte_end":155826,"line_start":687,"line_end":687,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155831,"byte_end":155834,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ This may fail when the coordinates in this image are either out-of-bounds of the underlying","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155839,"byte_end":155934,"line_start":689,"line_end":689,"column_start":5,"column_end":100}},{"value":"/ buffer or can not be represented. Note that the slice may have holes that do not correspond","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":155939,"byte_end":156034,"line_start":690,"line_end":690,"column_start":5,"column_end":100}},{"value":"/ to any sample in the image represented by it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156039,"byte_end":156088,"line_start":691,"line_end":691,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156528,"byte_end":156543,"line_start":707,"line_end":707,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<FlatSamples<Buffer>>::image_mut_slice","value":"pub fn image_mut_slice<T>(&mut Self) -> Option<&mut [T]> where\nBuffer: AsMut<[T]>","parent":null,"children":[],"decl_id":null,"docs":" Mutable portion of the buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156457,"byte_end":156516,"line_start":706,"line_end":706,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157197,"byte_end":157212,"line_start":726,"line_end":726,"column_start":12,"column_end":27},"name":"try_into_buffer","qualname":"<FlatSamples<Buffer>>::try_into_buffer","value":"pub fn try_into_buffer<P>(Self)\n-> Result<ImageBuffer<P, Buffer>, (Error, Self)> where P: Pixel + 'static,\nP::Subpixel: 'static, Buffer: Deref<Target = [P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Move the data into an image buffer.","sig":null,"attributes":[{"value":"/ Move the data into an image buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156901,"byte_end":156940,"line_start":721,"line_end":721,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156945,"byte_end":156948,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ This does **not** convert the sample layout. The buffer needs to be in packed row-major form","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":156953,"byte_end":157049,"line_start":723,"line_end":723,"column_start":5,"column_end":101}},{"value":"/ before calling this function. In case of an error, returns the buffer again so that it does","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157054,"byte_end":157149,"line_start":724,"line_end":724,"column_start":5,"column_end":100}},{"value":"/ not release any allocation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157154,"byte_end":157185,"line_start":725,"line_end":725,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":629},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160048,"byte_end":160058,"line_start":800,"line_end":800,"column_start":12,"column_end":22},"name":"min_length","qualname":"<FlatSamples<Buffer>>::min_length","value":"pub fn min_length(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":157983,"byte_end":158073,"line_start":749,"line_end":749,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158078,"byte_end":158081,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ This method will allow zero strides, allowing compact representations of monochrome images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158086,"byte_end":158181,"line_start":751,"line_end":751,"column_start":5,"column_end":100}},{"value":"/ To check that no aliasing occurs, try `check_alias_invariants`. For compact images (no","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158186,"byte_end":158276,"line_start":752,"line_end":752,"column_start":5,"column_end":95}},{"value":"/ aliasing and no unindexed samples) this is `width*height*channels`. But for both of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158281,"byte_end":158372,"line_start":753,"line_end":753,"column_start":5,"column_end":96}},{"value":"/ other cases, the reasoning is slightly more involved.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158377,"byte_end":158434,"line_start":754,"line_end":754,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158439,"byte_end":158442,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ # Explanation","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158447,"byte_end":158464,"line_start":756,"line_end":756,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158469,"byte_end":158472,"line_start":757,"line_end":757,"column_start":5,"column_end":8}},{"value":"/ Note that there is a difference between `min_length` and the index of the sample","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158477,"byte_end":158561,"line_start":758,"line_end":758,"column_start":5,"column_end":89}},{"value":"/ 'one-past-the-end`. This is due to strides that may be larger than the dimension below.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158566,"byte_end":158657,"line_start":759,"line_end":759,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158662,"byte_end":158665,"line_start":760,"line_end":760,"column_start":5,"column_end":8}},{"value":"/ ## Example with holes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158670,"byte_end":158695,"line_start":761,"line_end":761,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158700,"byte_end":158703,"line_start":762,"line_end":762,"column_start":5,"column_end":8}},{"value":"/ Let's look at an example of a grayscale image with","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158708,"byte_end":158762,"line_start":763,"line_end":763,"column_start":5,"column_end":59}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158767,"byte_end":158791,"line_start":764,"line_end":764,"column_start":5,"column_end":29}},{"value":"/ * `width = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158796,"byte_end":158813,"line_start":765,"line_end":765,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 3`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158818,"byte_end":158843,"line_start":766,"line_end":766,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158848,"byte_end":158866,"line_start":767,"line_end":767,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158871,"byte_end":158874,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158879,"byte_end":158890,"line_start":769,"line_end":769,"column_start":5,"column_end":16}},{"value":"/ | x x   | x x m | $","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158895,"byte_end":158918,"line_start":770,"line_end":770,"column_start":5,"column_end":28}},{"value":"/  min_length m ^","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158923,"byte_end":158942,"line_start":771,"line_end":771,"column_start":5,"column_end":24}},{"value":"/                   ^ one-past-the-end $","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158947,"byte_end":158989,"line_start":772,"line_end":772,"column_start":5,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":158994,"byte_end":159001,"line_start":773,"line_end":773,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159006,"byte_end":159009,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ The difference is also extreme for empty images with large strides. The one-past-the-end","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159014,"byte_end":159106,"line_start":775,"line_end":775,"column_start":5,"column_end":97}},{"value":"/ sample index is still as large as the largest of these strides while `min_length = 0`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159111,"byte_end":159201,"line_start":776,"line_end":776,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159206,"byte_end":159209,"line_start":777,"line_end":777,"column_start":5,"column_end":8}},{"value":"/ ## Example with aliasing","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159214,"byte_end":159242,"line_start":778,"line_end":778,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159247,"byte_end":159250,"line_start":779,"line_end":779,"column_start":5,"column_end":8}},{"value":"/ The concept gets even more important when you allow samples to alias each other. Here we","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159255,"byte_end":159347,"line_start":780,"line_end":780,"column_start":5,"column_end":97}},{"value":"/ have the buffer of a small grayscale image where this is the case, this time we will first","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159352,"byte_end":159446,"line_start":781,"line_end":781,"column_start":5,"column_end":99}},{"value":"/ show the buffer and then the individual rows below.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159451,"byte_end":159506,"line_start":782,"line_end":782,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159511,"byte_end":159514,"line_start":783,"line_end":783,"column_start":5,"column_end":8}},{"value":"/ * `width_stride = 1`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159519,"byte_end":159543,"line_start":784,"line_end":784,"column_start":5,"column_end":29}},{"value":"/ * `width = 3`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159548,"byte_end":159565,"line_start":785,"line_end":785,"column_start":5,"column_end":22}},{"value":"/ * `height_stride = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159570,"byte_end":159595,"line_start":786,"line_end":786,"column_start":5,"column_end":30}},{"value":"/ * `height = 2`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159600,"byte_end":159618,"line_start":787,"line_end":787,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159623,"byte_end":159626,"line_start":788,"line_end":788,"column_start":5,"column_end":8}},{"value":"/ ```text","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159631,"byte_end":159642,"line_start":789,"line_end":789,"column_start":5,"column_end":16}},{"value":"/  1 2 3 4 5 m","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159647,"byte_end":159663,"line_start":790,"line_end":790,"column_start":5,"column_end":21}},{"value":"/ |1 2 3| row one","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159668,"byte_end":159687,"line_start":791,"line_end":791,"column_start":5,"column_end":24}},{"value":"/     |3 4 5| row two","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159692,"byte_end":159715,"line_start":792,"line_end":792,"column_start":5,"column_end":28}},{"value":"/            ^ m min_length","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159720,"byte_end":159749,"line_start":793,"line_end":793,"column_start":5,"column_end":34}},{"value":"/          ^ ??? one-past-the-end","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159754,"byte_end":159789,"line_start":794,"line_end":794,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159794,"byte_end":159801,"line_start":795,"line_end":795,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159806,"byte_end":159809,"line_start":796,"line_end":796,"column_start":5,"column_end":8}},{"value":"/ This time 'one-past-the-end' is not even simply the largest stride times the extent of its","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159814,"byte_end":159908,"line_start":797,"line_end":797,"column_start":5,"column_end":99}},{"value":"/ dimension. That still points inside the image because `height*height_stride = 4` but also","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":159913,"byte_end":160006,"line_start":798,"line_end":798,"column_start":5,"column_end":98}},{"value":"/ `index_of(1, 2) = 4`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160011,"byte_end":160036,"line_start":799,"line_end":799,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160195,"byte_end":160199,"line_start":805,"line_end":805,"column_start":12,"column_end":16},"name":"fits","qualname":"<FlatSamples<Buffer>>::fits","value":"pub fn fits(&Self, usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer of length `len` is large enough.\n","sig":null,"attributes":[{"value":"/ Check if a buffer of length `len` is large enough.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160129,"byte_end":160183,"line_start":804,"line_end":804,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":631},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160620,"byte_end":160639,"line_start":814,"line_end":814,"column_start":12,"column_end":31},"name":"has_aliased_samples","qualname":"<FlatSamples<Buffer>>::has_aliased_samples","value":"pub fn has_aliased_samples(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" If there are any samples aliasing each other.","sig":null,"attributes":[{"value":"/ If there are any samples aliasing each other.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160270,"byte_end":160319,"line_start":809,"line_end":809,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160324,"byte_end":160327,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ If this is not the case, it would always be safe to allow mutable access to two different","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160332,"byte_end":160425,"line_start":811,"line_end":811,"column_start":5,"column_end":98}},{"value":"/ samples at the same time. Otherwise, this operation would need additional checks. When one","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160430,"byte_end":160524,"line_start":812,"line_end":812,"column_start":5,"column_end":99}},{"value":"/ dimension overflows `usize` with its stride we also consider this aliasing.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160529,"byte_end":160608,"line_start":813,"line_end":813,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161220,"byte_end":161229,"line_start":825,"line_end":825,"column_start":12,"column_end":21},"name":"is_normal","qualname":"<FlatSamples<Buffer>>::is_normal","value":"pub fn is_normal(&Self, NormalForm) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check if a buffer fulfills the requirements of a normal form.","sig":null,"attributes":[{"value":"/ Check if a buffer fulfills the requirements of a normal form.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160710,"byte_end":160775,"line_start":818,"line_end":818,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160780,"byte_end":160783,"line_start":819,"line_end":819,"column_start":5,"column_end":8}},{"value":"/ Certain conversions have preconditions on the structure of the sample buffer that are not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160788,"byte_end":160881,"line_start":820,"line_end":820,"column_start":5,"column_end":98}},{"value":"/ captured (by design) by the type system. These are then checked before the conversion. Such","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160886,"byte_end":160981,"line_start":821,"line_end":821,"column_start":5,"column_end":100}},{"value":"/ checks can all be done in constant time and will not inspect the buffer content. You can","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":160986,"byte_end":161078,"line_start":822,"line_end":822,"column_start":5,"column_end":97}},{"value":"/ perform these checks yourself when the conversion is not required at this moment but maybe","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161083,"byte_end":161177,"line_start":823,"line_end":823,"column_start":5,"column_end":99}},{"value":"/ still performed later.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161182,"byte_end":161208,"line_start":824,"line_end":824,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161654,"byte_end":161663,"line_start":834,"line_end":834,"column_start":12,"column_end":21},"name":"in_bounds","qualname":"<FlatSamples<Buffer>>::in_bounds","value":"pub fn in_bounds(&Self, u8, u32, u32) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Check that the pixel and the channel index are in bounds.","sig":null,"attributes":[{"value":"/ Check that the pixel and the channel index are in bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161312,"byte_end":161373,"line_start":829,"line_end":829,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161378,"byte_end":161381,"line_start":830,"line_end":830,"column_start":5,"column_end":8}},{"value":"/ An in-bound coordinate does not yet guarantee that the corresponding calculation of a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161386,"byte_end":161475,"line_start":831,"line_end":831,"column_start":5,"column_end":94}},{"value":"/ buffer index does not overflow. However, if such a buffer large enough to hold all samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161480,"byte_end":161574,"line_start":832,"line_end":832,"column_start":5,"column_end":99}},{"value":"/ actually exists in memory, this porperty of course follows.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161579,"byte_end":161642,"line_start":833,"line_end":833,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161913,"byte_end":161918,"line_start":841,"line_end":841,"column_start":12,"column_end":17},"name":"index","qualname":"<FlatSamples<Buffer>>::index","value":"pub fn index(&Self, u8, u32, u32) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Resolve the index of a particular sample.","sig":null,"attributes":[{"value":"/ Resolve the index of a particular sample.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161766,"byte_end":161811,"line_start":838,"line_end":838,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161816,"byte_end":161819,"line_start":839,"line_end":839,"column_start":5,"column_end":8}},{"value":"/ `None` if the index is outside the bounds or does not fit into a `usize`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":161824,"byte_end":161901,"line_start":840,"line_end":840,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":635},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162397,"byte_end":162418,"line_start":850,"line_end":850,"column_start":12,"column_end":33},"name":"index_ignoring_bounds","qualname":"<FlatSamples<Buffer>>::index_ignoring_bounds","value":"pub fn index_ignoring_bounds(&Self, usize, usize, usize) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Get the theoretical position of sample (x, y, channel).","sig":null,"attributes":[{"value":"/ Get the theoretical position of sample (x, y, channel).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162026,"byte_end":162085,"line_start":845,"line_end":845,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162090,"byte_end":162093,"line_start":846,"line_end":846,"column_start":5,"column_end":8}},{"value":"/ The 'check' is for overflow during index calculation, not that it is contained in the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162098,"byte_end":162187,"line_start":847,"line_end":847,"column_start":5,"column_end":94}},{"value":"/ image. Two samples may return the same index, even when one of them is out of bounds. This","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162192,"byte_end":162286,"line_start":848,"line_end":848,"column_start":5,"column_end":99}},{"value":"/ happens when all strides are `0`, i.e. the image is an arbitrarily large monochrome image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162291,"byte_end":162385,"line_start":849,"line_end":849,"column_start":5,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162850,"byte_end":162865,"line_start":859,"line_end":859,"column_start":12,"column_end":27},"name":"in_bounds_index","qualname":"<FlatSamples<Buffer>>::in_bounds_index","value":"pub fn in_bounds_index(&Self, u8, u32, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get an index provided it is inbouds.","sig":null,"attributes":[{"value":"/ Get an index provided it is inbouds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162549,"byte_end":162589,"line_start":854,"line_end":854,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162594,"byte_end":162597,"line_start":855,"line_end":855,"column_start":5,"column_end":8}},{"value":"/ Assumes that the image is backed by some sufficiently large buffer. Then computation can","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162602,"byte_end":162694,"line_start":856,"line_end":856,"column_start":5,"column_end":97}},{"value":"/ not overflow as we could represent the maximum coordinate. Since overflow is defined either","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162699,"byte_end":162794,"line_start":857,"line_end":857,"column_start":5,"column_end":100}},{"value":"/ way, this method can not be unsafe.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162799,"byte_end":162838,"line_start":858,"line_end":858,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":637},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163300,"byte_end":163309,"line_start":868,"line_end":868,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<FlatSamples<Buffer>>::shrink_to","value":"pub fn shrink_to(&mut Self, u8, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the image to the minimum of current and given extents.","sig":null,"attributes":[{"value":"/ Shrink the image to the minimum of current and given extents.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":162975,"byte_end":163040,"line_start":863,"line_end":863,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163045,"byte_end":163048,"line_start":864,"line_end":864,"column_start":5,"column_end":8}},{"value":"/ This does not modify the strides, so that the resulting sample buffer may have holes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163053,"byte_end":163141,"line_start":865,"line_end":865,"column_start":5,"column_end":93}},{"value":"/ created by the shrinking operation. Shrinking could also lead to an non-aliasing image when","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163146,"byte_end":163241,"line_start":866,"line_end":866,"column_start":5,"column_end":100}},{"value":"/ samples had aliased each other before.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163246,"byte_end":163288,"line_start":867,"line_end":867,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":641},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164195,"byte_end":164209,"line_start":894,"line_end":894,"column_start":12,"column_end":26},"name":"with_monocolor","qualname":"<FlatSamples<&'buf [Subpixel]>>::with_monocolor","value":"pub fn with_monocolor<P>(&'buf P, u32, u32) -> Self where P: Pixel<Subpixel =\nSubpixel>, Subpixel: Primitive","parent":null,"children":[],"decl_id":null,"docs":" Create a monocolor image from a single pixel.","sig":null,"attributes":[{"value":"/ Create a monocolor image from a single pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163483,"byte_end":163532,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163537,"byte_end":163540,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ This can be used as a very cheap source of a `GenericImageView` with an arbitrary number of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163545,"byte_end":163640,"line_start":876,"line_end":876,"column_start":5,"column_end":100}},{"value":"/ pixels of a single color, without any dynamic allocation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163645,"byte_end":163706,"line_start":877,"line_end":877,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163711,"byte_end":163714,"line_start":878,"line_end":878,"column_start":5,"column_end":8}},{"value":"/ ## Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163719,"byte_end":163734,"line_start":879,"line_end":879,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163739,"byte_end":163742,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163747,"byte_end":163754,"line_start":881,"line_end":881,"column_start":5,"column_end":12}},{"value":"/ # fn paint_something<T>(_: T) {}","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163759,"byte_end":163795,"line_start":882,"line_end":882,"column_start":5,"column_end":41}},{"value":"/ use image::{flat::FlatSamples, GenericImage, RgbImage, Rgb};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163800,"byte_end":163864,"line_start":883,"line_end":883,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163869,"byte_end":163872,"line_start":884,"line_end":884,"column_start":5,"column_end":8}},{"value":"/ let background = Rgb([20, 20, 20]);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163877,"byte_end":163916,"line_start":885,"line_end":885,"column_start":5,"column_end":44}},{"value":"/ let bg = FlatSamples::with_monocolor(&background, 200, 200);;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163921,"byte_end":163986,"line_start":886,"line_end":886,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163991,"byte_end":163994,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ let mut image = RgbImage::new(200, 200);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163999,"byte_end":164043,"line_start":888,"line_end":888,"column_start":5,"column_end":49}},{"value":"/ paint_something(&mut image);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164048,"byte_end":164080,"line_start":889,"line_end":889,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164085,"byte_end":164088,"line_start":890,"line_end":890,"column_start":5,"column_end":8}},{"value":"/ // Reset the canvas","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164093,"byte_end":164116,"line_start":891,"line_end":891,"column_start":5,"column_end":28}},{"value":"/ image.copy_from(&bg.as_view().unwrap(), 0, 0);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164121,"byte_end":164171,"line_start":892,"line_end":892,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164176,"byte_end":164183,"line_start":893,"line_end":893,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165414,"byte_end":165418,"line_start":929,"line_end":929,"column_start":12,"column_end":16},"name":"View","qualname":"::flat::View","value":"View {  }","parent":null,"children":[{"krate":0,"index":2576},{"krate":0,"index":2577}],"decl_id":null,"docs":" A flat buffer that can be used as an image view.","sig":null,"attributes":[{"value":"/ A flat buffer that can be used as an image view.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164712,"byte_end":164764,"line_start":914,"line_end":914,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164765,"byte_end":164768,"line_start":915,"line_end":915,"column_start":1,"column_end":4}},{"value":"/ This is a nearly trivial wrapper around a buffer but at least sanitizes by checking the buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164769,"byte_end":164867,"line_start":916,"line_end":916,"column_start":1,"column_end":99}},{"value":"/ length first and constraining the pixel type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164868,"byte_end":164917,"line_start":917,"line_end":917,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164918,"byte_end":164921,"line_start":918,"line_end":918,"column_start":1,"column_end":4}},{"value":"/ Note that this does not eliminate panics as the `AsRef<[T]>` implementation of `Buffer` may be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":164922,"byte_end":165020,"line_start":919,"line_end":919,"column_start":1,"column_end":99}},{"value":"/ unreliable, i.e. return different buffers at different times. This of course is a non-issue for","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165021,"byte_end":165120,"line_start":920,"line_end":920,"column_start":1,"column_end":100}},{"value":"/ all common collections where the bounds check once must be enough.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165121,"byte_end":165191,"line_start":921,"line_end":921,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165192,"byte_end":165195,"line_start":922,"line_end":922,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165196,"byte_end":165218,"line_start":923,"line_end":923,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165219,"byte_end":165222,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165223,"byte_end":165306,"line_start":925,"line_end":925,"column_start":1,"column_end":84}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165307,"byte_end":165374,"line_start":926,"line_end":926,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165375,"byte_end":165378,"line_start":927,"line_end":927,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2586},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166264,"byte_end":166271,"line_start":952,"line_end":952,"column_start":12,"column_end":19},"name":"ViewMut","qualname":"::flat::ViewMut","value":"ViewMut {  }","parent":null,"children":[{"krate":0,"index":2589},{"krate":0,"index":2590}],"decl_id":null,"docs":" A mutable owning version of a flat buffer.","sig":null,"attributes":[{"value":"/ A mutable owning version of a flat buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165542,"byte_end":165588,"line_start":937,"line_end":937,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165589,"byte_end":165592,"line_start":938,"line_end":938,"column_start":1,"column_end":4}},{"value":"/ While this wraps a buffer similar to `ImageBuffer`, this is mostly intended as a utility. The","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165593,"byte_end":165690,"line_start":939,"line_end":939,"column_start":1,"column_end":98}},{"value":"/ library endorsed normalized representation is still `ImageBuffer`. Also, the implementation of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165691,"byte_end":165789,"line_start":940,"line_end":940,"column_start":1,"column_end":99}},{"value":"/ `AsMut<[P::Subpixel]>` must always yield the same buffer. Therefore there is no public way to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165790,"byte_end":165887,"line_start":941,"line_end":941,"column_start":1,"column_end":98}},{"value":"/ construct this with an owning buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165888,"byte_end":165929,"line_start":942,"line_end":942,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165930,"byte_end":165933,"line_start":943,"line_end":943,"column_start":1,"column_end":4}},{"value":"/ # Inner invariants","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165934,"byte_end":165956,"line_start":944,"line_end":944,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165957,"byte_end":165960,"line_start":945,"line_end":945,"column_start":1,"column_end":4}},{"value":"/ * For all indices inside bounds, the corresponding index is valid in the buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":165961,"byte_end":166044,"line_start":946,"line_end":946,"column_start":1,"column_end":84}},{"value":"/ * There is no aliasing of samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166045,"byte_end":166082,"line_start":947,"line_end":947,"column_start":1,"column_end":38}},{"value":"/ * The samples are packed, i.e. `self.inner.layout.sample_stride == 1`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166083,"byte_end":166156,"line_start":948,"line_end":948,"column_start":1,"column_end":74}},{"value":"/ * `P::channel_count()` agrees with `self.inner.layout.channels`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166157,"byte_end":166224,"line_start":949,"line_end":949,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166225,"byte_end":166228,"line_start":950,"line_end":950,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2600},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166979,"byte_end":166987,"line_start":971,"line_end":971,"column_start":5,"column_end":13},"name":"TooLarge","qualname":"::flat::Error::TooLarge","value":"Error::TooLarge","parent":{"krate":0,"index":2599},"children":[],"decl_id":null,"docs":" The represented image was too large.","sig":null,"attributes":[{"value":"/ The represented image was too large.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166856,"byte_end":166896,"line_start":968,"line_end":968,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166901,"byte_end":166904,"line_start":969,"line_end":969,"column_start":5,"column_end":8}},{"value":"/ The optional value denotes a possibly accepted maximal bound.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166909,"byte_end":166974,"line_start":970,"line_end":970,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2602},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167144,"byte_end":167162,"line_start":976,"line_end":976,"column_start":5,"column_end":23},"name":"NormalFormRequired","qualname":"::flat::Error::NormalFormRequired","value":"Error::NormalFormRequired(NormalForm)","parent":{"krate":0,"index":2599},"children":[],"decl_id":null,"docs":" The represented image can not use this representation.","sig":null,"attributes":[{"value":"/ The represented image can not use this representation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166994,"byte_end":167052,"line_start":973,"line_end":973,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167057,"byte_end":167060,"line_start":974,"line_end":974,"column_start":5,"column_end":8}},{"value":"/ Has an additional value of the normalized form that would be accepted.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167065,"byte_end":167139,"line_start":975,"line_end":975,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2605},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167771,"byte_end":167781,"line_start":987,"line_end":987,"column_start":5,"column_end":15},"name":"WrongColor","qualname":"::flat::Error::WrongColor","value":"Error::WrongColor(ColorType)","parent":{"krate":0,"index":2599},"children":[],"decl_id":null,"docs":" The color format did not match the channel count.","sig":null,"attributes":[{"value":"/ The color format did not match the channel count.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167181,"byte_end":167234,"line_start":978,"line_end":978,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167239,"byte_end":167242,"line_start":979,"line_end":979,"column_start":5,"column_end":8}},{"value":"/ In some cases you might be able to fix this by lowering the reported pixel count of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167247,"byte_end":167338,"line_start":980,"line_end":980,"column_start":5,"column_end":96}},{"value":"/ buffer without touching the strides.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167343,"byte_end":167383,"line_start":981,"line_end":981,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167388,"byte_end":167391,"line_start":982,"line_end":982,"column_start":5,"column_end":8}},{"value":"/ In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167396,"byte_end":167491,"line_start":983,"line_end":983,"column_start":5,"column_end":100}},{"value":"/ directly memory unsafe although that will likely alias pixels. One scenario is when you","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167496,"byte_end":167587,"line_start":984,"line_end":984,"column_start":5,"column_end":96}},{"value":"/ want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167592,"byte_end":167687,"line_start":985,"line_end":985,"column_start":5,"column_end":100}},{"value":"/ care about the value of the alpha channel even though you need `Rgba`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167692,"byte_end":167766,"line_start":986,"line_end":986,"column_start":5,"column_end":79}}]},{"kind":"Enum","id":{"krate":0,"index":2599},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166844,"byte_end":166849,"line_start":967,"line_end":967,"column_start":10,"column_end":15},"name":"Error","qualname":"::flat::Error","value":"pub enum Error {\n\n    /// The represented image was too large.\n    ///\n    /// The optional value denotes a possibly accepted maximal bound.\n    TooLarge,\n\n    /// The represented image can not use this representation.\n    ///\n    /// Has an additional value of the normalized form that would be accepted.\n    NormalFormRequired(NormalForm),\n\n    /// The color format did not match the channel count.\n    ///\n    /// In some cases you might be able to fix this by lowering the reported pixel count of the\n    /// buffer without touching the strides.\n    ///\n    /// In very special circumstances you *may* do the opposite. This is **VERY** dangerous but not\n    /// directly memory unsafe although that will likely alias pixels. One scenario is when you\n    /// want to construct an `Rgba` image but have only 3 bytes per pixel and for some reason don't\n    /// care about the value of the alpha channel even though you need `Rgba`.\n    WrongColor(ColorType),\n}","parent":null,"children":[{"krate":0,"index":2600},{"krate":0,"index":2602},{"krate":0,"index":2605}],"decl_id":null,"docs":" Denotes invalid flat sample buffers when trying to convert to stricter types.","sig":null,"attributes":[{"value":"/ Denotes invalid flat sample buffers when trying to convert to stricter types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166395,"byte_end":166476,"line_start":960,"line_end":960,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166477,"byte_end":166480,"line_start":961,"line_end":961,"column_start":1,"column_end":4}},{"value":"/ The biggest use case being `ImageBuffer` which expects closely packed","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166481,"byte_end":166554,"line_start":962,"line_end":962,"column_start":1,"column_end":74}},{"value":"/ samples in a row major matrix representation. But this error type may be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166555,"byte_end":166631,"line_start":963,"line_end":963,"column_start":1,"column_end":77}},{"value":"/ resused for other import functions. A more versatile user may also try to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166632,"byte_end":166709,"line_start":964,"line_end":964,"column_start":1,"column_end":78}},{"value":"/ correct the underlying representation depending on the error variant.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":166710,"byte_end":166783,"line_start":965,"line_end":965,"column_start":1,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2624},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168280,"byte_end":168289,"line_start":1000,"line_end":1000,"column_start":5,"column_end":14},"name":"Unaliased","qualname":"::flat::NormalForm::Unaliased","value":"NormalForm::Unaliased","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" No pixel aliases another.","sig":null,"attributes":[{"value":"/ No pixel aliases another.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168057,"byte_end":168086,"line_start":996,"line_end":996,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168091,"byte_end":168094,"line_start":997,"line_end":997,"column_start":5,"column_end":8}},{"value":"/ Unaliased also guarantees that all index calculations in the image bounds using","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168099,"byte_end":168182,"line_start":998,"line_end":998,"column_start":5,"column_end":88}},{"value":"/ `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168187,"byte_end":168275,"line_start":999,"line_end":999,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2626},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168519,"byte_end":168530,"line_start":1006,"line_end":1006,"column_start":5,"column_end":16},"name":"PixelPacked","qualname":"::flat::NormalForm::PixelPacked","value":"NormalForm::PixelPacked","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" At least pixels are packed.","sig":null,"attributes":[{"value":"/ At least pixels are packed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168296,"byte_end":168327,"line_start":1002,"line_end":1002,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168332,"byte_end":168335,"line_start":1003,"line_end":1003,"column_start":5,"column_end":8}},{"value":"/ Images of these types can wrap `[T]`-slices into the standard color types. This is a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168340,"byte_end":168428,"line_start":1004,"line_end":1004,"column_start":5,"column_end":93}},{"value":"/ precondition for `GenericImage` which requires by-reference access to pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168433,"byte_end":168514,"line_start":1005,"line_end":1005,"column_start":5,"column_end":86}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2628},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168814,"byte_end":168825,"line_start":1013,"line_end":1013,"column_start":5,"column_end":16},"name":"ImagePacked","qualname":"::flat::NormalForm::ImagePacked","value":"NormalForm::ImagePacked","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" All samples are packed.","sig":null,"attributes":[{"value":"/ All samples are packed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168537,"byte_end":168564,"line_start":1008,"line_end":1008,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168569,"byte_end":168572,"line_start":1009,"line_end":1009,"column_start":5,"column_end":8}},{"value":"/ This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168577,"byte_end":168670,"line_start":1010,"line_end":1010,"column_start":5,"column_end":98}},{"value":"/ it is not necessary that the pixel samples themselves are adjacent. An example of this","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168675,"byte_end":168765,"line_start":1011,"line_end":1011,"column_start":5,"column_end":95}},{"value":"/ behaviour is a planar image layout.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168770,"byte_end":168809,"line_start":1012,"line_end":1012,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2630},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169035,"byte_end":169049,"line_start":1019,"line_end":1019,"column_start":5,"column_end":19},"name":"RowMajorPacked","qualname":"::flat::NormalForm::RowMajorPacked","value":"NormalForm::RowMajorPacked","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" The samples are in row-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in row-major form and all samples are packed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168832,"byte_end":168897,"line_start":1015,"line_end":1015,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168902,"byte_end":168905,"line_start":1016,"line_end":1016,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168910,"byte_end":169003,"line_start":1017,"line_end":1017,"column_start":5,"column_end":98}},{"value":"/ in row-major form.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169008,"byte_end":169030,"line_start":1018,"line_end":1018,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2632},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169265,"byte_end":169282,"line_start":1025,"line_end":1025,"column_start":5,"column_end":22},"name":"ColumnMajorPacked","qualname":"::flat::NormalForm::ColumnMajorPacked","value":"NormalForm::ColumnMajorPacked","parent":{"krate":0,"index":2623},"children":[],"decl_id":null,"docs":" The samples are in column-major form and all samples are packed.","sig":null,"attributes":[{"value":"/ The samples are in column-major form and all samples are packed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169056,"byte_end":169124,"line_start":1021,"line_end":1021,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169129,"byte_end":169132,"line_start":1022,"line_end":1022,"column_start":5,"column_end":8}},{"value":"/ In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169137,"byte_end":169230,"line_start":1023,"line_end":1023,"column_start":5,"column_end":98}},{"value":"/ in column-major form.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169235,"byte_end":169260,"line_start":1024,"line_end":1024,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2623},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":168040,"byte_end":168050,"line_start":995,"line_end":995,"column_start":10,"column_end":20},"name":"NormalForm","qualname":"::flat::NormalForm","value":"pub enum NormalForm {\n\n    /// No pixel aliases another.\n    ///\n    /// Unaliased also guarantees that all index calculations in the image bounds using\n    /// `dim_index*dim_stride` (such as `x*width_stride + y*height_stride`) do not overflow.\n    Unaliased,\n\n    /// At least pixels are packed.\n    ///\n    /// Images of these types can wrap `[T]`-slices into the standard color types. This is a\n    /// precondition for `GenericImage` which requires by-reference access to pixels.\n    PixelPacked,\n\n    /// All samples are packed.\n    ///\n    /// This is orthogonal to `PixelPacked`. It requires that there are no holes in the image but\n    /// it is not necessary that the pixel samples themselves are adjacent. An example of this\n    /// behaviour is a planar image layout.\n    ImagePacked,\n\n    /// The samples are in row-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in row-major form.\n    RowMajorPacked,\n\n    /// The samples are in column-major form and all samples are packed.\n    ///\n    /// In addition to `PixelPacked` and `ImagePacked` this also asserts that the pixel matrix is\n    /// in column-major form.\n    ColumnMajorPacked,\n}","parent":null,"children":[{"krate":0,"index":2624},{"krate":0,"index":2626},{"krate":0,"index":2628},{"krate":0,"index":2630},{"krate":0,"index":2632}],"decl_id":null,"docs":" Different normal forms of buffers.","sig":null,"attributes":[{"value":"/ Different normal forms of buffers.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167797,"byte_end":167835,"line_start":990,"line_end":990,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167836,"byte_end":167839,"line_start":991,"line_end":991,"column_start":1,"column_end":4}},{"value":"/ A normal form is an unaliased buffer with some additional constraints.  The `ÌmageBuffer` uses","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167840,"byte_end":167939,"line_start":992,"line_end":992,"column_start":1,"column_end":99}},{"value":"/ row major form with packed samples.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":167940,"byte_end":167979,"line_start":993,"line_end":993,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169490,"byte_end":169500,"line_start":1035,"line_end":1035,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<View<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169371,"byte_end":169402,"line_start":1032,"line_end":1032,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169407,"byte_end":169410,"line_start":1033,"line_end":1033,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169415,"byte_end":169478,"line_start":1034,"line_end":1034,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":647},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169983,"byte_end":169987,"line_start":1045,"line_end":1045,"column_start":12,"column_end":16},"name":"flat","qualname":"<View<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner sample descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the inner sample descriptor.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169562,"byte_end":169613,"line_start":1039,"line_end":1039,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169618,"byte_end":169621,"line_start":1040,"line_end":1040,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169626,"byte_end":169715,"line_start":1041,"line_end":1041,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169720,"byte_end":169813,"line_start":1042,"line_end":1042,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169818,"byte_end":169905,"line_start":1043,"line_end":1043,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169910,"byte_end":169971,"line_start":1044,"line_end":1044,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170266,"byte_end":170273,"line_start":1053,"line_end":1053,"column_start":12,"column_end":19},"name":"samples","qualname":"<View<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170052,"byte_end":170092,"line_start":1049,"line_end":1049,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170097,"byte_end":170100,"line_start":1050,"line_end":1050,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170105,"byte_end":170195,"line_start":1051,"line_end":1051,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170200,"byte_end":170254,"line_start":1052,"line_end":1052,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":649},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170592,"byte_end":170602,"line_start":1061,"line_end":1061,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<View<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170333,"byte_end":170395,"line_start":1057,"line_end":1057,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170400,"byte_end":170403,"line_start":1058,"line_end":1058,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170408,"byte_end":170498,"line_start":1059,"line_end":1059,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170503,"byte_end":170580,"line_start":1060,"line_end":1060,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171476,"byte_end":171490,"line_start":1079,"line_end":1079,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<View<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>\nwhere Buffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected subpixel if it is in-bounds.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected subpixel if it is in-bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":170934,"byte_end":171004,"line_start":1071,"line_end":1071,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171009,"byte_end":171012,"line_start":1072,"line_end":1072,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`.  This","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171017,"byte_end":171111,"line_start":1073,"line_end":1073,"column_start":5,"column_end":99}},{"value":"/ method will return `None` when the sample is out-of-bounds. All errors that could occur due","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171116,"byte_end":171211,"line_start":1074,"line_end":1074,"column_start":5,"column_end":100}},{"value":"/ to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171216,"byte_end":171283,"line_start":1075,"line_end":1075,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171288,"byte_end":171291,"line_start":1076,"line_end":1076,"column_start":5,"column_end":8}},{"value":"/ **WARNING**: Note that of course samples may alias, so that the mutable reference returned","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171296,"byte_end":171390,"line_start":1077,"line_end":1077,"column_start":5,"column_end":99}},{"value":"/ here can in fact modify more than the coordinate in the argument.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171395,"byte_end":171464,"line_start":1078,"line_end":1078,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":651},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172067,"byte_end":172077,"line_start":1094,"line_end":1094,"column_start":12,"column_end":22},"name":"min_length","qualname":"<View<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171885,"byte_end":171975,"line_start":1091,"line_end":1091,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171980,"byte_end":171983,"line_start":1092,"line_end":1092,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":171988,"byte_end":172055,"line_start":1093,"line_end":1093,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172411,"byte_end":172422,"line_start":1102,"line_end":1102,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<View<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172148,"byte_end":172210,"line_start":1098,"line_end":1098,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172215,"byte_end":172218,"line_start":1099,"line_end":1099,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172223,"byte_end":172314,"line_start":1100,"line_end":1100,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172319,"byte_end":172399,"line_start":1101,"line_end":1101,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172879,"byte_end":172894,"line_start":1111,"line_end":1111,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<View<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel] where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the mutable portion of the buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172515,"byte_end":172585,"line_start":1106,"line_end":1106,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172590,"byte_end":172593,"line_start":1107,"line_end":1107,"column_start":5,"column_end":8}},{"value":"/ This is relevant only when constructed with `FlatSamples::as_view_with_mut_samples`. While","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172598,"byte_end":172692,"line_start":1108,"line_end":1108,"column_start":5,"column_end":99}},{"value":"/ this can not fail–the validity of all coordinates has been validated during the conversion","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172697,"byte_end":172793,"line_start":1109,"line_end":1109,"column_start":5,"column_end":99}},{"value":"/ from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":172798,"byte_end":172867,"line_start":1110,"line_end":1110,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173417,"byte_end":173426,"line_start":1123,"line_end":1123,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<View<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173087,"byte_end":173114,"line_start":1118,"line_end":1118,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173119,"byte_end":173122,"line_start":1119,"line_end":1119,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173127,"byte_end":173214,"line_start":1120,"line_end":1120,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173219,"byte_end":173312,"line_start":1121,"line_end":1121,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173317,"byte_end":173405,"line_start":1122,"line_end":1122,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":655},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174430,"byte_end":174441,"line_start":1146,"line_end":1146,"column_start":12,"column_end":23},"name":"try_upgrade","qualname":"<View<Buffer, P>>::try_upgrade","value":"pub fn try_upgrade(Self) -> Result<ViewMut<Buffer, P>, (Error, Self)> where\nBuffer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Try to convert this into an image with mutable pixels.","sig":null,"attributes":[{"value":"/ Try to convert this into an image with mutable pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173581,"byte_end":173639,"line_start":1128,"line_end":1128,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173644,"byte_end":173647,"line_start":1129,"line_end":1129,"column_start":5,"column_end":8}},{"value":"/ The resulting image implements `GenericImage` in addition to `GenericImageView`. While this","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173652,"byte_end":173747,"line_start":1130,"line_end":1130,"column_start":5,"column_end":100}},{"value":"/ has mutable samples, it does not enforce that pixel can not alias and that samples are","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173752,"byte_end":173842,"line_start":1131,"line_end":1131,"column_start":5,"column_end":95}},{"value":"/ packed enough for a mutable pixel reference. This is slightly cheaper than the chain","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173847,"byte_end":173935,"line_start":1132,"line_end":1132,"column_start":5,"column_end":93}},{"value":"/ `self.into_inner().as_view_mut()` and keeps the `View` alive on failure.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":173940,"byte_end":174016,"line_start":1133,"line_end":1133,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174021,"byte_end":174024,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174029,"byte_end":174036,"line_start":1135,"line_end":1135,"column_start":5,"column_end":12}},{"value":"/ # use image::RgbImage;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174041,"byte_end":174067,"line_start":1136,"line_end":1136,"column_start":5,"column_end":31}},{"value":"/ # use image::Rgb;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174072,"byte_end":174093,"line_start":1137,"line_end":1137,"column_start":5,"column_end":26}},{"value":"/ let mut buffer = RgbImage::new(480, 640).into_flat_samples();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174098,"byte_end":174163,"line_start":1138,"line_end":1138,"column_start":5,"column_end":70}},{"value":"/ let view = buffer.as_view_with_mut_samples::<Rgb<u8>>().unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174168,"byte_end":174237,"line_start":1139,"line_end":1139,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174242,"byte_end":174245,"line_start":1140,"line_end":1140,"column_start":5,"column_end":8}},{"value":"/ // Inspect some pixels, …","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174250,"byte_end":174281,"line_start":1141,"line_end":1141,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174286,"byte_end":174289,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ // Doesn't fail because it was originally an `RgbImage`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174294,"byte_end":174354,"line_start":1143,"line_end":1143,"column_start":5,"column_end":65}},{"value":"/ let view_mut = view.try_upgrade().unwrap();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174359,"byte_end":174406,"line_start":1144,"line_end":1144,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174411,"byte_end":174418,"line_start":1145,"line_end":1145,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175082,"byte_end":175092,"line_start":1168,"line_end":1168,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ViewMut<Buffer, P>>::into_inner","value":"pub fn into_inner(Self) -> FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Take out the sample buffer.","sig":null,"attributes":[{"value":"/ Take out the sample buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174963,"byte_end":174994,"line_start":1165,"line_end":1165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174999,"byte_end":175002,"line_start":1166,"line_end":1166,"column_start":5,"column_end":8}},{"value":"/ Gives up the normalization invariants on the buffer format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175007,"byte_end":175070,"line_start":1167,"line_end":1167,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175576,"byte_end":175580,"line_start":1178,"line_end":1178,"column_start":12,"column_end":16},"name":"flat","qualname":"<ViewMut<Buffer, P>>::flat","value":"pub fn flat(&Self) -> &FlatSamples<Buffer>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the sample buffer descriptor.","sig":null,"attributes":[{"value":"/ Get a reference on the sample buffer descriptor.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175154,"byte_end":175206,"line_start":1172,"line_end":1172,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175211,"byte_end":175214,"line_start":1173,"line_end":1173,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counterpart as modifying the buffer format, including strides and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175219,"byte_end":175308,"line_start":1174,"line_end":1174,"column_start":5,"column_end":94}},{"value":"/ lengths, could invalidate the accessibility invariants of the `View`. It is not specified","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175313,"byte_end":175406,"line_start":1175,"line_end":1175,"column_start":5,"column_end":98}},{"value":"/ if the inner buffer is the same as the buffer of the image from which this view was","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175411,"byte_end":175498,"line_start":1176,"line_end":1176,"column_start":5,"column_end":92}},{"value":"/ created. It might have been truncated as an optimization.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175503,"byte_end":175564,"line_start":1177,"line_end":1177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":661},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175953,"byte_end":175960,"line_start":1187,"line_end":1187,"column_start":12,"column_end":19},"name":"samples","qualname":"<ViewMut<Buffer, P>>::samples","value":"pub fn samples(&Self) -> &Buffer","parent":null,"children":[],"decl_id":null,"docs":" Get a reference on the inner buffer.","sig":null,"attributes":[{"value":"/ Get a reference on the inner buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175645,"byte_end":175685,"line_start":1182,"line_end":1182,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175690,"byte_end":175693,"line_start":1183,"line_end":1183,"column_start":5,"column_end":8}},{"value":"/ There is no mutable counter part since it is not intended to allow you to reassign the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175698,"byte_end":175788,"line_start":1184,"line_end":1184,"column_start":5,"column_end":95}},{"value":"/ buffer or otherwise change its size or properties. However, its contents can be accessed","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175793,"byte_end":175885,"line_start":1185,"line_end":1185,"column_start":5,"column_end":97}},{"value":"/ mutable through a slice with `image_mut_slice`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":175890,"byte_end":175941,"line_start":1186,"line_end":1186,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176202,"byte_end":176212,"line_start":1194,"line_end":1194,"column_start":12,"column_end":22},"name":"min_length","qualname":"<ViewMut<Buffer, P>>::min_length","value":"pub fn min_length(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the minimum length of a buffer such that all in-bounds samples have valid indices.","sig":null,"attributes":[{"value":"/ Get the minimum length of a buffer such that all in-bounds samples have valid indices.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176020,"byte_end":176110,"line_start":1191,"line_end":1191,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176115,"byte_end":176118,"line_start":1192,"line_end":1192,"column_start":5,"column_end":8}},{"value":"/ See `FlatSamples::min_length`. This method will always succeed.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176123,"byte_end":176190,"line_start":1193,"line_end":1193,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":663},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176523,"byte_end":176533,"line_start":1202,"line_end":1202,"column_start":12,"column_end":22},"name":"get_sample","qualname":"<ViewMut<Buffer, P>>::get_sample","value":"pub fn get_sample(&Self, u8, u32, u32) -> Option<&P::Subpixel> where\nBuffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to a selected subpixel.","sig":null,"attributes":[{"value":"/ Get a reference to a selected subpixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176283,"byte_end":176326,"line_start":1198,"line_end":1198,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176331,"byte_end":176334,"line_start":1199,"line_end":1199,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176339,"byte_end":176429,"line_start":1200,"line_end":1200,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176434,"byte_end":176511,"line_start":1201,"line_end":1201,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177158,"byte_end":177172,"line_start":1218,"line_end":1218,"column_start":12,"column_end":26},"name":"get_mut_sample","qualname":"<ViewMut<Buffer, P>>::get_mut_sample","value":"pub fn get_mut_sample(&mut Self, u8, u32, u32) -> Option<&mut P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to a selected sample.","sig":null,"attributes":[{"value":"/ Get a mutable reference to a selected sample.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176912,"byte_end":176961,"line_start":1214,"line_end":1214,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176966,"byte_end":176969,"line_start":1215,"line_end":1215,"column_start":5,"column_end":8}},{"value":"/ This method will return `None` when the sample is out-of-bounds. All errors that could","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":176974,"byte_end":177064,"line_start":1216,"line_end":1216,"column_start":5,"column_end":95}},{"value":"/ occur due to overflow have been eliminated while construction the `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177069,"byte_end":177146,"line_start":1217,"line_end":1217,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":665},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177783,"byte_end":177794,"line_start":1232,"line_end":1232,"column_start":12,"column_end":23},"name":"image_slice","qualname":"<ViewMut<Buffer, P>>::image_slice","value":"pub fn image_slice(&Self) -> &[P::Subpixel] where Buffer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the portion of the buffer that holds sample values.","sig":null,"attributes":[{"value":"/ Return the portion of the buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177520,"byte_end":177582,"line_start":1228,"line_end":1228,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177587,"byte_end":177590,"line_start":1229,"line_end":1229,"column_start":5,"column_end":8}},{"value":"/ While this can not fail–the validity of all coordinates has been validated during the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177595,"byte_end":177686,"line_start":1230,"line_end":1230,"column_start":5,"column_end":94}},{"value":"/ conversion from `FlatSamples`–the resulting slice may still contain holes.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177691,"byte_end":177771,"line_start":1231,"line_end":1231,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":666},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177993,"byte_end":178008,"line_start":1237,"line_end":1237,"column_start":12,"column_end":27},"name":"image_mut_slice","qualname":"<ViewMut<Buffer, P>>::image_mut_slice","value":"pub fn image_mut_slice(&mut Self) -> &mut [P::Subpixel]","parent":null,"children":[],"decl_id":null,"docs":" Return the mutable buffer that holds sample values.\n","sig":null,"attributes":[{"value":"/ Return the mutable buffer that holds sample values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":177926,"byte_end":177981,"line_start":1236,"line_end":1236,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":667},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178476,"byte_end":178485,"line_start":1247,"line_end":1247,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<ViewMut<Buffer, P>>::shrink_to","value":"pub fn shrink_to(&mut Self, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Shrink the inner image.","sig":null,"attributes":[{"value":"/ Shrink the inner image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178146,"byte_end":178173,"line_start":1242,"line_end":1242,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178178,"byte_end":178181,"line_start":1243,"line_end":1243,"column_start":5,"column_end":8}},{"value":"/ The new dimensions will be the minimum of the previous dimensions. Since the set of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178186,"byte_end":178273,"line_start":1244,"line_end":1244,"column_start":5,"column_end":92}},{"value":"/ in-bounds pixels afterwards is a subset of the current ones, this is allowed on a `View`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178278,"byte_end":178371,"line_start":1245,"line_end":1245,"column_start":5,"column_end":98}},{"value":"/ Note that you can not change the number of channels as an intrinsic property of `P`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":178376,"byte_end":178464,"line_start":1246,"line_end":1246,"column_start":5,"column_end":93}}]},{"kind":"Mod","id":{"krate":0,"index":721},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":724},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":931}],"decl_id":null,"docs":"  Decoding and Encoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8771,"byte_end":8794,"line_start":212,"line_end":212,"column_start":1,"column_end":24}},{"value":"!  Decoding and Encoding of BMP Images","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191661,"byte_end":191701,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191702,"byte_end":191705,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"!  A decoder and encoder for BMP (Windows Bitmap) images","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191706,"byte_end":191764,"line_start":3,"line_end":3,"column_start":1,"column_end":59}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191765,"byte_end":191768,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"!  # Related Links","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191769,"byte_end":191789,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"!  * <https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191790,"byte_end":191882,"line_start":6,"line_end":6,"column_start":1,"column_end":93}},{"value":"!  * <https://en.wikipedia.org/wiki/BMP_file_format>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191883,"byte_end":191937,"line_start":7,"line_end":7,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/mod.rs","byte_start":191938,"byte_end":191941,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":832},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210078,"byte_end":210088,"line_start":545,"line_end":545,"column_start":12,"column_end":22},"name":"BmpDecoder","qualname":"::bmp::decoder::BmpDecoder","value":"BmpDecoder {  }","parent":null,"children":[{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210049,"byte_end":210066,"line_start":544,"line_end":544,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212656,"byte_end":212659,"line_start":632,"line_end":632,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<BmpDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212583,"byte_end":212644,"line_start":631,"line_end":631,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":907},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244413,"byte_end":244422,"line_start":1419,"line_end":1419,"column_start":12,"column_end":21},"name":"BmpReader","qualname":"::bmp::decoder::BmpReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244356,"byte_end":244401,"line_start":1418,"line_end":1418,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247048,"byte_end":247058,"line_start":13,"line_end":13,"column_start":12,"column_end":22},"name":"BmpEncoder","qualname":"::bmp::encoder::BmpEncoder","value":"BmpEncoder {  }","parent":null,"children":[{"krate":0,"index":951}],"decl_id":null,"docs":" The representation of a BMP encoder.\n","sig":null,"attributes":[{"value":"/ The representation of a BMP encoder.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":246996,"byte_end":247036,"line_start":12,"line_end":12,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":952},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247296,"byte_end":247306,"line_start":26,"line_end":26,"column_start":10,"column_end":20},"name":"BMPEncoder","qualname":"::bmp::encoder::BMPEncoder","value":"BmpEncoder","parent":null,"children":[],"decl_id":null,"docs":" BMP Encoder","sig":null,"attributes":[{"value":"/ BMP Encoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247098,"byte_end":247113,"line_start":17,"line_end":17,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247114,"byte_end":247117,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ An alias of [`BmpEncoder`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247118,"byte_end":247149,"line_start":19,"line_end":19,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247150,"byte_end":247153,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247154,"byte_end":247170,"line_start":21,"line_end":21,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247171,"byte_end":247174,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [`BmpEncoder`]: struct.BmpEncoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247175,"byte_end":247217,"line_start":23,"line_end":23,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247218,"byte_end":247237,"line_start":24,"line_end":24,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `BmpEncoder` instead\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247238,"byte_end":247286,"line_start":25,"line_end":25,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247455,"byte_end":247458,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<BmpEncoder>::new","value":"pub fn new(&'a mut W) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247384,"byte_end":247443,"line_start":29,"line_end":29,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":959},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247666,"byte_end":247672,"line_start":37,"line_end":37,"column_start":12,"column_end":18},"name":"encode","qualname":"<BmpEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```.\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247527,"byte_end":247560,"line_start":34,"line_end":34,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247565,"byte_end":247617,"line_start":35,"line_end":35,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247622,"byte_end":247654,"line_start":36,"line_end":36,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":973},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":974},{"krate":0,"index":975},{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":979},{"krate":0,"index":980},{"krate":0,"index":1029},{"krate":0,"index":1175},{"krate":0,"index":1178}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8993,"byte_end":9017,"line_start":224,"line_end":224,"column_start":1,"column_end":25}},{"value":"! Decoding and Encoding of JPEG Images","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258624,"byte_end":258664,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258665,"byte_end":258668,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258669,"byte_end":258764,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"! This module implements the Baseline JPEG standard.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258765,"byte_end":258819,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258820,"byte_end":258823,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258824,"byte_end":258843,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/Graphics/JPEG/itu-t81.pdf> - The JPEG specification","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258844,"byte_end":258920,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/mod.rs","byte_start":258921,"byte_end":258924,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":998},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259497,"byte_end":259508,"line_start":13,"line_end":13,"column_start":12,"column_end":23},"name":"JpegDecoder","qualname":"::jpeg::decoder::JpegDecoder","value":"JpegDecoder {  }","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1001}],"decl_id":null,"docs":" JPEG decoder\n","sig":null,"attributes":[{"value":"/ JPEG decoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259469,"byte_end":259485,"line_start":12,"line_end":12,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259687,"byte_end":259690,"line_start":20,"line_end":20,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<JpegDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259614,"byte_end":259675,"line_start":19,"line_end":19,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1005},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260248,"byte_end":260258,"line_start":39,"line_end":39,"column_start":12,"column_end":22},"name":"JpegReader","qualname":"::jpeg::decoder::JpegReader","value":"","parent":null,"children":[],"decl_id":null,"docs":" Wrapper struct around a `Cursor<Vec<u8>>`\n","sig":null,"attributes":[{"value":"/ Wrapper struct around a `Cursor<Vec<u8>>`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260191,"byte_end":260236,"line_start":38,"line_end":38,"column_start":1,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2854},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291926,"byte_end":291942,"line_start":280,"line_end":280,"column_start":5,"column_end":21},"name":"PixelAspectRatio","qualname":"::jpeg::encoder::PixelDensityUnit::PixelAspectRatio","value":"PixelDensityUnit::PixelAspectRatio","parent":{"krate":0,"index":2853},"children":[],"decl_id":null,"docs":" Represents the absence of a unit, the values indicate only a\n [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n","sig":null,"attributes":[{"value":"/ Represents the absence of a unit, the values indicate only a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291778,"byte_end":291842,"line_start":278,"line_end":278,"column_start":5,"column_end":69}},{"value":"/ [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291847,"byte_end":291921,"line_start":279,"line_end":279,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2856},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291983,"byte_end":291989,"line_start":283,"line_end":283,"column_start":5,"column_end":11},"name":"Inches","qualname":"::jpeg::encoder::PixelDensityUnit::Inches","value":"PixelDensityUnit::Inches","parent":{"krate":0,"index":2853},"children":[],"decl_id":null,"docs":" Pixels per inch (2.54 cm)\n","sig":null,"attributes":[{"value":"/ Pixels per inch (2.54 cm)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291949,"byte_end":291978,"line_start":282,"line_end":282,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2858},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292026,"byte_end":292037,"line_start":286,"line_end":286,"column_start":5,"column_end":16},"name":"Centimeters","qualname":"::jpeg::encoder::PixelDensityUnit::Centimeters","value":"PixelDensityUnit::Centimeters","parent":{"krate":0,"index":2853},"children":[],"decl_id":null,"docs":" Pixels per centimeter\n","sig":null,"attributes":[{"value":"/ Pixels per centimeter","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291996,"byte_end":292021,"line_start":285,"line_end":285,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2853},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291755,"byte_end":291771,"line_start":277,"line_end":277,"column_start":10,"column_end":26},"name":"PixelDensityUnit","qualname":"::jpeg::encoder::PixelDensityUnit","value":"pub enum PixelDensityUnit {\n\n    /// Represents the absence of a unit, the values indicate only a\n    /// [pixel aspect ratio](https://en.wikipedia.org/wiki/Pixel_aspect_ratio)\n    PixelAspectRatio,\n\n    /// Pixels per inch (2.54 cm)\n    Inches,\n\n    /// Pixels per centimeter\n    Centimeters,\n}","parent":null,"children":[{"krate":0,"index":2854},{"krate":0,"index":2856},{"krate":0,"index":2858}],"decl_id":null,"docs":" Represents a unit in which the density of an image is measured\n","sig":null,"attributes":[{"value":"/ Represents a unit in which the density of an image is measured","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":291634,"byte_end":291700,"line_start":275,"line_end":275,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2871},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292374,"byte_end":292386,"line_start":299,"line_end":299,"column_start":12,"column_end":24},"name":"PixelDensity","qualname":"::jpeg::encoder::PixelDensity","value":"PixelDensity { density, unit }","parent":null,"children":[{"krate":0,"index":2872},{"krate":0,"index":2873}],"decl_id":null,"docs":" Represents the pixel density of an image","sig":null,"attributes":[{"value":"/ Represents the pixel density of an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292042,"byte_end":292086,"line_start":289,"line_end":289,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292087,"byte_end":292090,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ For example, a 300 DPI image is represented by:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292091,"byte_end":292142,"line_start":291,"line_end":291,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292143,"byte_end":292146,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292147,"byte_end":292158,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"/ use image::jpeg::*;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292159,"byte_end":292182,"line_start":294,"line_end":294,"column_start":1,"column_end":24}},{"value":"/ let hdpi = PixelDensity::dpi(300);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292183,"byte_end":292221,"line_start":295,"line_end":295,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(hdpi, PixelDensity {density: (300,300), unit: PixelDensityUnit::Inches})","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292222,"byte_end":292309,"line_start":296,"line_end":296,"column_start":1,"column_end":88}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292310,"byte_end":292317,"line_start":297,"line_end":297,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":2872},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292449,"byte_end":292456,"line_start":301,"line_end":301,"column_start":9,"column_end":16},"name":"density","qualname":"::jpeg::encoder::PixelDensity::density","value":"(u16, u16)","parent":{"krate":0,"index":2871},"children":[],"decl_id":null,"docs":" A couple of values for (Xdensity, Ydensity)\n","sig":null,"attributes":[{"value":"/ A couple of values for (Xdensity, Ydensity)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292393,"byte_end":292440,"line_start":300,"line_end":300,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":2873},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292528,"byte_end":292532,"line_start":303,"line_end":303,"column_start":9,"column_end":13},"name":"unit","qualname":"::jpeg::encoder::PixelDensity::unit","value":"jpeg::encoder::PixelDensityUnit","parent":{"krate":0,"index":2871},"children":[],"decl_id":null,"docs":" The unit in which the density is measured\n","sig":null,"attributes":[{"value":"/ The unit in which the density is measured","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292474,"byte_end":292519,"line_start":302,"line_end":302,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1108},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292738,"byte_end":292741,"line_start":310,"line_end":310,"column_start":12,"column_end":15},"name":"dpi","qualname":"<PixelDensity>::dpi","value":"pub fn dpi(u16) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates the most common pixel density type:\n the horizontal and the vertical density are equal,\n and measured in pixels per inch.\n","sig":null,"attributes":[{"value":"/ Creates the most common pixel density type:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292579,"byte_end":292626,"line_start":307,"line_end":307,"column_start":5,"column_end":52}},{"value":"/ the horizontal and the vertical density are equal,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292631,"byte_end":292685,"line_start":308,"line_end":308,"column_start":5,"column_end":59}},{"value":"/ and measured in pixels per inch.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292690,"byte_end":292726,"line_start":309,"line_end":309,"column_start":5,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1111},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293192,"byte_end":293203,"line_start":329,"line_end":329,"column_start":12,"column_end":23},"name":"JpegEncoder","qualname":"::jpeg::encoder::JpegEncoder","value":"JpegEncoder {  }","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115},{"krate":0,"index":1116},{"krate":0,"index":1117},{"krate":0,"index":1118},{"krate":0,"index":1119},{"krate":0,"index":1120},{"krate":0,"index":1121}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293140,"byte_end":293180,"line_start":328,"line_end":328,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":1122},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293682,"byte_end":293693,"line_start":352,"line_end":352,"column_start":10,"column_end":21},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JpegEncoder","parent":null,"children":[],"decl_id":null,"docs":" JPEG Encoder","sig":null,"attributes":[{"value":"/ JPEG Encoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293479,"byte_end":293495,"line_start":343,"line_end":343,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293496,"byte_end":293499,"line_start":344,"line_end":344,"column_start":1,"column_end":4}},{"value":"/ An alias of [`JpegEncoder`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293500,"byte_end":293532,"line_start":345,"line_end":345,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293533,"byte_end":293536,"line_start":346,"line_end":346,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293537,"byte_end":293553,"line_start":347,"line_end":347,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293554,"byte_end":293557,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ [`JpegEncoder`]: struct.JpegEncoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293558,"byte_end":293602,"line_start":349,"line_end":349,"column_start":1,"column_end":45}},{"value":"allow(dead_code)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293603,"byte_end":293622,"line_start":350,"line_end":350,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `JpegEncoder` instead\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293623,"byte_end":293672,"line_start":351,"line_end":351,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293838,"byte_end":293841,"line_start":356,"line_end":356,"column_start":12,"column_end":15},"name":"new","qualname":"<JpegEncoder>::new","value":"pub fn new(&mut W) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293768,"byte_end":293826,"line_start":355,"line_end":355,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1129},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":294134,"byte_end":294150,"line_start":363,"line_end":363,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<JpegEncoder>::new_with_quality","value":"pub fn new_with_quality(&mut W, u8) -> JpegEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```, and has\n the quality parameter ```quality``` with a value in the range 1-100\n where 1 is the worst and 100 is the best.\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```, and has","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293929,"byte_end":293996,"line_start":360,"line_end":360,"column_start":5,"column_end":72}},{"value":"/ the quality parameter ```quality``` with a value in the range 1-100","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":294001,"byte_end":294072,"line_start":361,"line_end":361,"column_start":5,"column_end":76}},{"value":"/ where 1 is the worst and 100 is the best.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":294077,"byte_end":294122,"line_start":362,"line_end":362,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1131},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296518,"byte_end":296535,"line_start":435,"line_end":435,"column_start":12,"column_end":29},"name":"set_pixel_density","qualname":"<JpegEncoder>::set_pixel_density","value":"pub fn set_pixel_density(&mut Self, PixelDensity)","parent":null,"children":[],"decl_id":null,"docs":" Set the pixel density of the images the encoder will encode.\n If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,\n and no DPI information will be stored in the image.\n","sig":null,"attributes":[{"value":"/ Set the pixel density of the images the encoder will encode.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296286,"byte_end":296350,"line_start":432,"line_end":432,"column_start":5,"column_end":69}},{"value":"/ If this method is not called, then a default pixel aspect ratio of 1x1 will be applied,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296355,"byte_end":296446,"line_start":433,"line_end":433,"column_start":5,"column_end":96}},{"value":"/ and no DPI information will be stored in the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296451,"byte_end":296506,"line_start":434,"line_end":434,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296867,"byte_end":296873,"line_start":444,"line_end":444,"column_start":12,"column_end":18},"name":"encode","qualname":"<JpegEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image stored in the raw byte buffer ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image stored in the raw byte buffer ```image```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296633,"byte_end":296696,"line_start":439,"line_end":439,"column_start":5,"column_end":68}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296701,"byte_end":296753,"line_start":440,"line_end":440,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296758,"byte_end":296789,"line_start":441,"line_end":441,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296794,"byte_end":296797,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":296802,"byte_end":296855,"line_start":443,"line_end":443,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1133},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":299074,"byte_end":299086,"line_start":496,"line_end":496,"column_start":12,"column_end":24},"name":"encode_image","qualname":"<JpegEncoder>::encode_image","value":"pub fn encode_image<I: GenericImageView>(&mut Self, &I) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the given image.","sig":null,"attributes":[{"value":"/ Encodes the given image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298546,"byte_end":298574,"line_start":487,"line_end":487,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298579,"byte_end":298582,"line_start":488,"line_end":488,"column_start":5,"column_end":8}},{"value":"/ As a special feature this does not require the whole image to be present in memory at the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298587,"byte_end":298680,"line_start":489,"line_end":489,"column_start":5,"column_end":98}},{"value":"/ same time such that it may be computed on the fly, which is why this method exists on this","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298685,"byte_end":298779,"line_start":490,"line_end":490,"column_start":5,"column_end":99}},{"value":"/ encoder but not on others. Instead the encoder will iterate over 8-by-8 blocks of pixels at","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298784,"byte_end":298879,"line_start":491,"line_end":491,"column_start":5,"column_end":100}},{"value":"/ a time, inspecting each pixel exactly once. You can rely on this behaviour when calling","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298884,"byte_end":298975,"line_start":492,"line_end":492,"column_start":5,"column_end":96}},{"value":"/ this method.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":298980,"byte_end":298996,"line_start":493,"line_end":493,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":299001,"byte_end":299004,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":299009,"byte_end":299062,"line_start":495,"line_end":495,"column_start":5,"column_end":58}}]},{"kind":"Mod","id":{"krate":0,"index":1194},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","parent":null,"children":[{"krate":0,"index":1195},{"krate":0,"index":1196},{"krate":0,"index":1197},{"krate":0,"index":1198},{"krate":0,"index":1199},{"krate":0,"index":1200},{"krate":0,"index":1201},{"krate":0,"index":1202},{"krate":0,"index":1203},{"krate":0,"index":1204},{"krate":0,"index":1205},{"krate":0,"index":1206},{"krate":0,"index":1207},{"krate":0,"index":1208},{"krate":0,"index":4387},{"krate":0,"index":1209},{"krate":0,"index":4389},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":4393},{"krate":0,"index":1212},{"krate":0,"index":4395},{"krate":0,"index":1213},{"krate":0,"index":1214},{"krate":0,"index":1215},{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218},{"krate":0,"index":1219},{"krate":0,"index":1220},{"krate":0,"index":1221},{"krate":0,"index":1222},{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1235},{"krate":0,"index":1236},{"krate":0,"index":1241},{"krate":0,"index":1243},{"krate":0,"index":1246},{"krate":0,"index":1250},{"krate":0,"index":1254},{"krate":0,"index":1259},{"krate":0,"index":1260},{"krate":0,"index":1274},{"krate":0,"index":1282},{"krate":0,"index":1288},{"krate":0,"index":1300},{"krate":0,"index":1305},{"krate":0,"index":2886},{"krate":0,"index":2910},{"krate":0,"index":2909},{"krate":0,"index":2907},{"krate":0,"index":2904},{"krate":0,"index":2905},{"krate":0,"index":2900},{"krate":0,"index":2901},{"krate":0,"index":2912},{"krate":0,"index":2936},{"krate":0,"index":2935},{"krate":0,"index":2933},{"krate":0,"index":2930},{"krate":0,"index":2931},{"krate":0,"index":2926},{"krate":0,"index":2927},{"krate":0,"index":1307},{"krate":0,"index":1314},{"krate":0,"index":1322},{"krate":0,"index":1325},{"krate":0,"index":1327}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9032,"byte_end":9055,"line_start":226,"line_end":226,"column_start":1,"column_end":24}},{"value":"! Decoding and Encoding of PNG Images","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324407,"byte_end":324446,"line_start":1,"line_end":1,"column_start":1,"column_end":40}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324447,"byte_end":324450,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"! PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324451,"byte_end":324541,"line_start":3,"line_end":3,"column_start":1,"column_end":91}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324542,"byte_end":324545,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"! # Related Links","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324546,"byte_end":324565,"line_start":5,"line_end":5,"column_start":1,"column_end":20}},{"value":"! * <http://www.w3.org/TR/PNG/> - The PNG Specification","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324566,"byte_end":324623,"line_start":6,"line_end":6,"column_start":1,"column_end":58}},{"value":"!","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":324624,"byte_end":324627,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1236},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325380,"byte_end":325389,"line_start":28,"line_end":28,"column_start":12,"column_end":21},"name":"PngReader","qualname":"::png::PngReader","value":"PngReader {  }","parent":null,"children":[{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240}],"decl_id":null,"docs":" Png Reader","sig":null,"attributes":[{"value":"/ Png Reader","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325190,"byte_end":325204,"line_start":23,"line_end":23,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325205,"byte_end":325208,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ This reader will try to read the png one row at a time,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325209,"byte_end":325268,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/ however for interlaced png files this is not possible and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325269,"byte_end":325330,"line_start":26,"line_end":26,"column_start":1,"column_end":62}},{"value":"/ these are therefore read at once.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325331,"byte_end":325368,"line_start":27,"line_end":27,"column_start":1,"column_end":38}}]},{"kind":"Type","id":{"krate":0,"index":1241},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325664,"byte_end":325673,"line_start":43,"line_end":43,"column_start":10,"column_end":19},"name":"PNGReader","qualname":"::png::PNGReader","value":"PngReader<R>","parent":null,"children":[],"decl_id":null,"docs":" PNG Reader","sig":null,"attributes":[{"value":"/ PNG Reader","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325471,"byte_end":325485,"line_start":34,"line_end":34,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325486,"byte_end":325489,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngReader`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325490,"byte_end":325520,"line_start":36,"line_end":36,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325521,"byte_end":325524,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325525,"byte_end":325541,"line_start":38,"line_end":38,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325542,"byte_end":325545,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ [`PngReader`]: struct.PngReader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325546,"byte_end":325586,"line_start":40,"line_end":40,"column_start":1,"column_end":41}},{"value":"allow(dead_code)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325587,"byte_end":325606,"line_start":41,"line_end":41,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngReader` instead\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325607,"byte_end":325654,"line_start":42,"line_end":42,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327645,"byte_end":327655,"line_start":110,"line_end":110,"column_start":12,"column_end":22},"name":"PngDecoder","qualname":"::png::PngDecoder","value":"PngDecoder {  }","parent":null,"children":[{"krate":0,"index":1252},{"krate":0,"index":1253}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327618,"byte_end":327633,"line_start":109,"line_end":109,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":1256},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327833,"byte_end":327836,"line_start":117,"line_end":117,"column_start":12,"column_end":15},"name":"new","qualname":"<PngDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<PngDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327759,"byte_end":327821,"line_start":116,"line_end":116,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1257},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331589,"byte_end":331593,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"apng","qualname":"<PngDecoder<R>>::apng","value":"pub fn apng(Self) -> ApngDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Turn this into an iterator over the animation frames.","sig":null,"attributes":[{"value":"/ Turn this into an iterator over the animation frames.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":330942,"byte_end":330999,"line_start":172,"line_end":172,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331004,"byte_end":331007,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Reading the complete animation requires more memory than reading the data from the IDAT","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331012,"byte_end":331103,"line_start":174,"line_end":174,"column_start":5,"column_end":96}},{"value":"/ frame–multiple frame buffers need to be reserved at the same time. We further do not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331108,"byte_end":331198,"line_start":175,"line_end":175,"column_start":5,"column_end":93}},{"value":"/ support compositing 16-bit colors. In any case this would be lossy as the interface of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331203,"byte_end":331293,"line_start":176,"line_end":176,"column_start":5,"column_end":95}},{"value":"/ animation decoders does not support 16-bit colors.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331298,"byte_end":331352,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331357,"byte_end":331360,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ If something is not supported or a limit is violated then the decoding step that requires","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331365,"byte_end":331458,"line_start":179,"line_end":179,"column_start":5,"column_end":98}},{"value":"/ them will fail and an error will be returned instead of the frame. No further frames will","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331463,"byte_end":331556,"line_start":180,"line_end":180,"column_start":5,"column_end":98}},{"value":"/ be returned.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331561,"byte_end":331577,"line_start":181,"line_end":181,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1258},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":332016,"byte_end":332023,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"is_apng","qualname":"<PngDecoder<R>>::is_apng","value":"pub fn is_apng(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if the image contains an animation.","sig":null,"attributes":[{"value":"/ Returns if the image contains an animation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331662,"byte_end":331709,"line_start":186,"line_end":186,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331714,"byte_end":331717,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Note that the file itself decides if the default image is considered to be part of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331722,"byte_end":331812,"line_start":188,"line_end":188,"column_start":5,"column_end":95}},{"value":"/ animation. When it is not the common interpretation is to use it as a thumbnail.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331817,"byte_end":331901,"line_start":189,"line_end":189,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331906,"byte_end":331909,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ If a non-animated image is converted into an `ApngDecoder` then its iterator is empty.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":331914,"byte_end":332004,"line_start":191,"line_end":191,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333992,"byte_end":334003,"line_start":253,"line_end":253,"column_start":12,"column_end":23},"name":"ApngDecoder","qualname":"::png::ApngDecoder","value":"ApngDecoder {  }","parent":null,"children":[{"krate":0,"index":1276},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1279},{"krate":0,"index":1280},{"krate":0,"index":1281}],"decl_id":null,"docs":" An [`AnimationDecoder`] adapter of [`PngDecoder`].","sig":null,"attributes":[{"value":"/ An [`AnimationDecoder`] adapter of [`PngDecoder`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333706,"byte_end":333760,"line_start":246,"line_end":246,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333761,"byte_end":333764,"line_start":247,"line_end":247,"column_start":1,"column_end":4}},{"value":"/ See [`PngDecoder::apng`] for more information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333765,"byte_end":333815,"line_start":248,"line_end":248,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333816,"byte_end":333819,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [`AnimationDecoder`]: ../trait.AnimationDecoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333820,"byte_end":333876,"line_start":250,"line_end":250,"column_start":1,"column_end":57}},{"value":"/ [`PngDecoder`]: struct.PngDecoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333877,"byte_end":333919,"line_start":251,"line_end":251,"column_start":1,"column_end":43}},{"value":"/ [`PngDecoder::apng`]: struct.PngDecoder.html#method.apng","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":333920,"byte_end":333980,"line_start":252,"line_end":252,"column_start":1,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":1300},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341196,"byte_end":341206,"line_start":440,"line_end":440,"column_start":12,"column_end":22},"name":"PngEncoder","qualname":"::png::PngEncoder","value":"PngEncoder {  }","parent":null,"children":[{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341169,"byte_end":341184,"line_start":439,"line_end":439,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":1305},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341488,"byte_end":341498,"line_start":455,"line_end":455,"column_start":10,"column_end":20},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" PNG Encoder","sig":null,"attributes":[{"value":"/ PNG Encoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341290,"byte_end":341305,"line_start":446,"line_end":446,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341306,"byte_end":341309,"line_start":447,"line_end":447,"column_start":1,"column_end":4}},{"value":"/ An alias of [`PngEncoder`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341310,"byte_end":341341,"line_start":448,"line_end":448,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341342,"byte_end":341345,"line_start":449,"line_end":449,"column_start":1,"column_end":4}},{"value":"/ TODO: remove","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341346,"byte_end":341362,"line_start":450,"line_end":450,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341363,"byte_end":341366,"line_start":451,"line_end":451,"column_start":1,"column_end":4}},{"value":"/ [`PngEncoder`]: struct.PngEncoder.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341367,"byte_end":341409,"line_start":452,"line_end":452,"column_start":1,"column_end":43}},{"value":"allow(dead_code)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341410,"byte_end":341429,"line_start":453,"line_end":453,"column_start":1,"column_end":20}},{"value":"deprecated(note = \"Use `PngEncoder` instead\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341430,"byte_end":341478,"line_start":454,"line_end":454,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2887},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341701,"byte_end":341708,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"Default","qualname":"::png::CompressionType::Default","value":"CompressionType::Default","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":" Default compression level\n","sig":null,"attributes":[{"value":"/ Default compression level","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341667,"byte_end":341696,"line_start":460,"line_end":460,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2889},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341748,"byte_end":341752,"line_start":463,"line_end":463,"column_start":5,"column_end":9},"name":"Fast","qualname":"::png::CompressionType::Fast","value":"CompressionType::Fast","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":" Fast, minimal compression\n","sig":null,"attributes":[{"value":"/ Fast, minimal compression","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341714,"byte_end":341743,"line_start":462,"line_end":462,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2891},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341789,"byte_end":341793,"line_start":465,"line_end":465,"column_start":5,"column_end":9},"name":"Best","qualname":"::png::CompressionType::Best","value":"CompressionType::Best","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":" High compression level\n","sig":null,"attributes":[{"value":"/ High compression level","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341758,"byte_end":341784,"line_start":464,"line_end":464,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2893},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341834,"byte_end":341841,"line_start":467,"line_end":467,"column_start":5,"column_end":12},"name":"Huffman","qualname":"::png::CompressionType::Huffman","value":"CompressionType::Huffman","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":" Huffman coding compression\n","sig":null,"attributes":[{"value":"/ Huffman coding compression","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341799,"byte_end":341829,"line_start":466,"line_end":466,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2895},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341887,"byte_end":341890,"line_start":469,"line_end":469,"column_start":5,"column_end":8},"name":"Rle","qualname":"::png::CompressionType::Rle","value":"CompressionType::Rle","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":" Run-length encoding compression\n","sig":null,"attributes":[{"value":"/ Run-length encoding compression","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341847,"byte_end":341882,"line_start":468,"line_end":468,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2897},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341916,"byte_end":341931,"line_start":472,"line_end":472,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::CompressionType::__NonExhaustive","value":"CompressionType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2886},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2886},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341645,"byte_end":341660,"line_start":459,"line_end":459,"column_start":10,"column_end":25},"name":"CompressionType","qualname":"::png::CompressionType","value":"pub enum CompressionType {\n\n    /// Default compression level\n    Default,\n\n    /// Fast, minimal compression\n    Fast,\n\n    /// High compression level\n    Best,\n\n    /// Huffman coding compression\n    Huffman,\n\n    /// Run-length encoding compression\n    Rle,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2887},{"krate":0,"index":2889},{"krate":0,"index":2891},{"krate":0,"index":2893},{"krate":0,"index":2895},{"krate":0,"index":2897}],"decl_id":null,"docs":" Compression level of a PNG encoder. The default setting is `Fast`.\n","sig":null,"attributes":[{"value":"/ Compression level of a PNG encoder. The default setting is `Fast`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341520,"byte_end":341590,"line_start":457,"line_end":457,"column_start":1,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2913},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342366,"byte_end":342374,"line_start":483,"line_end":483,"column_start":5,"column_end":13},"name":"NoFilter","qualname":"::png::FilterType::NoFilter","value":"FilterType::NoFilter","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" No processing done, best used for low bit depth greyscale or data with a\n low color count\n","sig":null,"attributes":[{"value":"/ No processing done, best used for low bit depth greyscale or data with a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342261,"byte_end":342337,"line_start":481,"line_end":481,"column_start":5,"column_end":81}},{"value":"/ low color count","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342342,"byte_end":342361,"line_start":482,"line_end":482,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2915},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342441,"byte_end":342444,"line_start":485,"line_end":485,"column_start":5,"column_end":8},"name":"Sub","qualname":"::png::FilterType::Sub","value":"FilterType::Sub","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" Filters based on previous pixel in the same scanline\n","sig":null,"attributes":[{"value":"/ Filters based on previous pixel in the same scanline","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342380,"byte_end":342436,"line_start":484,"line_end":484,"column_start":5,"column_end":61}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2917},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342494,"byte_end":342496,"line_start":487,"line_end":487,"column_start":5,"column_end":7},"name":"Up","qualname":"::png::FilterType::Up","value":"FilterType::Up","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" Filters based on the scanline above\n","sig":null,"attributes":[{"value":"/ Filters based on the scanline above","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342450,"byte_end":342489,"line_start":486,"line_end":486,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2919},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342573,"byte_end":342576,"line_start":489,"line_end":489,"column_start":5,"column_end":8},"name":"Avg","qualname":"::png::FilterType::Avg","value":"FilterType::Avg","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" Filters based on the average of left and right neighbor pixels\n","sig":null,"attributes":[{"value":"/ Filters based on the average of left and right neighbor pixels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342502,"byte_end":342568,"line_start":488,"line_end":488,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2921},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342663,"byte_end":342668,"line_start":491,"line_end":491,"column_start":5,"column_end":10},"name":"Paeth","qualname":"::png::FilterType::Paeth","value":"FilterType::Paeth","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":" Algorithm that takes into account the left, upper left, and above pixels\n","sig":null,"attributes":[{"value":"/ Algorithm that takes into account the left, upper left, and above pixels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342582,"byte_end":342658,"line_start":490,"line_end":490,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2923},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342694,"byte_end":342709,"line_start":494,"line_end":494,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::png::FilterType::__NonExhaustive","value":"FilterType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2912},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2912},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342244,"byte_end":342254,"line_start":480,"line_end":480,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::png::FilterType","value":"pub enum FilterType {\n\n    /// No processing done, best used for low bit depth greyscale or data with a\n    /// low color count\n    NoFilter,\n\n    /// Filters based on previous pixel in the same scanline\n    Sub,\n\n    /// Filters based on the scanline above\n    Up,\n\n    /// Filters based on the average of left and right neighbor pixels\n    Avg,\n\n    /// Algorithm that takes into account the left, upper left, and above pixels\n    Paeth,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2913},{"krate":0,"index":2915},{"krate":0,"index":2917},{"krate":0,"index":2919},{"krate":0,"index":2921},{"krate":0,"index":2923}],"decl_id":null,"docs":" Filter algorithms used to process image data to improve compression.","sig":null,"attributes":[{"value":"/ Filter algorithms used to process image data to improve compression.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":341971,"byte_end":342043,"line_start":475,"line_end":475,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342044,"byte_end":342047,"line_start":476,"line_end":476,"column_start":1,"column_end":4}},{"value":"/ The default filter is `Sub` though this default may change in the future, most notable if an","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342048,"byte_end":342144,"line_start":477,"line_end":477,"column_start":1,"column_end":97}},{"value":"/ adaptive encoding option is implemented.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342145,"byte_end":342189,"line_start":478,"line_end":478,"column_start":1,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1309},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342854,"byte_end":342857,"line_start":499,"line_end":499,"column_start":12,"column_end":15},"name":"new","qualname":"<PngEncoder<W>>::new","value":"pub fn new(W) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342784,"byte_end":342842,"line_start":498,"line_end":498,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1310},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":344039,"byte_end":344055,"line_start":521,"line_end":521,"column_start":12,"column_end":28},"name":"new_with_quality","qualname":"<PngEncoder<W>>::new_with_quality","value":"pub fn new_with_quality(W, CompressionType, FilterType) -> PngEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to `w` with `CompressionType` `compression` and\n `FilterType` `filter`.","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to `w` with `CompressionType` `compression` and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343025,"byte_end":343120,"line_start":507,"line_end":507,"column_start":5,"column_end":100}},{"value":"/ `FilterType` `filter`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343125,"byte_end":343151,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343156,"byte_end":343159,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ It is best to view the options as a _hint_ to the implementation on the smallest or fastest","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343164,"byte_end":343259,"line_start":510,"line_end":510,"column_start":5,"column_end":100}},{"value":"/ option for encoding a particular image. That is, using options that map directly to a PNG","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343264,"byte_end":343357,"line_start":511,"line_end":511,"column_start":5,"column_end":98}},{"value":"/ image parameter will use this parameter where possible. But variants that have no direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343362,"byte_end":343454,"line_start":512,"line_end":512,"column_start":5,"column_end":97}},{"value":"/ mapping may be interpreted differently in minor versions. The exact output is expressly","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343459,"byte_end":343550,"line_start":513,"line_end":513,"column_start":5,"column_end":96}},{"value":"/ __not__ part the SemVer stability guarantee.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343555,"byte_end":343603,"line_start":514,"line_end":514,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343608,"byte_end":343611,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Note that it is not optimal to use a single filter type. It is likely that the library used","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343616,"byte_end":343711,"line_start":516,"line_end":516,"column_start":5,"column_end":100}},{"value":"/ will at some point gain the ability to use adaptive filtering methods per pixel row (or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343716,"byte_end":343807,"line_start":517,"line_end":517,"column_start":5,"column_end":96}},{"value":"/ even interlaced row). We might make it the new default variant in which case choosing a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343812,"byte_end":343903,"line_start":518,"line_end":518,"column_start":5,"column_end":96}},{"value":"/ particular filter method likely produces larger images. Be sure to check the release notes","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":343908,"byte_end":344002,"line_start":519,"line_end":519,"column_start":5,"column_end":99}},{"value":"/ once in a while.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":344007,"byte_end":344027,"line_start":520,"line_end":520,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":344335,"byte_end":344341,"line_start":530,"line_end":530,"column_start":12,"column_end":18},"name":"encode","qualname":"<PngEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.\n","sig":null,"attributes":[{"value":"/ Encodes the image `data` that has dimensions `width` and `height` and `ColorType` `c`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":344233,"byte_end":344323,"line_start":529,"line_end":529,"column_start":5,"column_end":95}}]},{"kind":"Struct","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350536,"byte_end":350542,"line_start":10,"line_end":10,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1337}],"decl_id":null,"docs":" An implementation dependent iterator, reading the frames as requested\n","sig":null,"attributes":[{"value":"/ An implementation dependent iterator, reading the frames as requested","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350451,"byte_end":350524,"line_start":9,"line_end":9,"column_start":1,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350722,"byte_end":350725,"line_start":16,"line_end":16,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Box<Iterator<Item = ImageResult<Frame>> + 'a>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `Frames` from an implementation specific iterator.\n","sig":null,"attributes":[{"value":"/ Creates a new `Frames` from an implementation specific iterator.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350642,"byte_end":350710,"line_start":15,"line_end":15,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351117,"byte_end":351131,"line_start":25,"line_end":25,"column_start":12,"column_end":26},"name":"collect_frames","qualname":"<Frames>::collect_frames","value":"pub fn collect_frames(Self) -> ImageResult<Vec<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Steps through the iterator from the current frame until the end and pushes each frame into\n a `Vec`.\n If en error is encountered that error is returned instead.","sig":null,"attributes":[{"value":"/ Steps through the iterator from the current frame until the end and pushes each frame into","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350836,"byte_end":350930,"line_start":20,"line_end":20,"column_start":5,"column_end":99}},{"value":"/ a `Vec`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350935,"byte_end":350947,"line_start":21,"line_end":21,"column_start":5,"column_end":17}},{"value":"/ If en error is encountered that error is returned instead.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350952,"byte_end":351014,"line_start":22,"line_end":22,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351019,"byte_end":351022,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ Note: This is equivalent to `Frames::collect::<ImageResult<Vec<Frame>>>()`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351027,"byte_end":351105,"line_start":24,"line_end":24,"column_start":5,"column_end":83}}]},{"kind":"Struct","id":{"krate":0,"index":2938},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351420,"byte_end":351425,"line_start":39,"line_end":39,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2939},{"krate":0,"index":2940},{"krate":0,"index":2941},{"krate":0,"index":2942}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351363,"byte_end":351391,"line_start":37,"line_end":37,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":2945},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351707,"byte_end":351712,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"Delay","qualname":"::animation::Delay","value":"Delay {  }","parent":null,"children":[{"krate":0,"index":2946}],"decl_id":null,"docs":" The delay of a frame relative to the previous one.\n","sig":null,"attributes":[{"value":"/ The delay of a frame relative to the previous one.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351584,"byte_end":351638,"line_start":49,"line_end":49,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351814,"byte_end":351817,"line_start":57,"line_end":57,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame without any delay.\n","sig":null,"attributes":[{"value":"/ Contructs a new frame without any delay.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351758,"byte_end":351802,"line_start":56,"line_end":56,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352045,"byte_end":352055,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Delay) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352008,"byte_end":352033,"line_start":66,"line_end":66,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352267,"byte_end":352272,"line_start":77,"line_end":77,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Delay","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352232,"byte_end":352255,"line_start":76,"line_end":76,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352361,"byte_end":352367,"line_start":82,"line_end":82,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352321,"byte_end":352349,"line_start":81,"line_end":81,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352463,"byte_end":352474,"line_start":87,"line_end":87,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352423,"byte_end":352451,"line_start":86,"line_end":86,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352563,"byte_end":352567,"line_start":92,"line_end":92,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352527,"byte_end":352551,"line_start":91,"line_end":91,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352649,"byte_end":352652,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352613,"byte_end":352637,"line_start":96,"line_end":96,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352917,"byte_end":352936,"line_start":111,"line_end":111,"column_start":12,"column_end":31},"name":"from_numer_denom_ms","qualname":"<Delay>::from_numer_denom_ms","value":"pub fn from_numer_denom_ms(u32, u32) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a delay from a ratio of milliseconds.","sig":null,"attributes":[{"value":"/ Create a delay from a ratio of milliseconds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352712,"byte_end":352760,"line_start":103,"line_end":103,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352765,"byte_end":352768,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352773,"byte_end":352787,"line_start":105,"line_end":105,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352792,"byte_end":352795,"line_start":106,"line_end":106,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352800,"byte_end":352807,"line_start":107,"line_end":107,"column_start":5,"column_end":12}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352812,"byte_end":352833,"line_start":108,"line_end":108,"column_start":5,"column_end":26}},{"value":"/ let delay_10ms = Delay::from_numer_denom_ms(10, 1);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352838,"byte_end":352893,"line_start":109,"line_end":109,"column_start":5,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352898,"byte_end":352905,"line_start":110,"line_end":110,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353579,"byte_end":353603,"line_start":129,"line_end":129,"column_start":12,"column_end":36},"name":"from_saturating_duration","qualname":"<Delay>::from_saturating_duration","value":"pub fn from_saturating_duration(Duration) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Convert from a duration, clamped between 0 and an implemented defined maximum.","sig":null,"attributes":[{"value":"/ Convert from a duration, clamped between 0 and an implemented defined maximum.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353056,"byte_end":353138,"line_start":115,"line_end":115,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353143,"byte_end":353146,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ The maximum is *at least* `i32::MAX` milliseconds. It should be noted that the accuracy of","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353151,"byte_end":353245,"line_start":117,"line_end":117,"column_start":5,"column_end":99}},{"value":"/ the result may be relative and very large delays have a coarse resolution.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353250,"byte_end":353328,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353333,"byte_end":353336,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353341,"byte_end":353355,"line_start":120,"line_end":120,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353360,"byte_end":353363,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353368,"byte_end":353375,"line_start":122,"line_end":122,"column_start":5,"column_end":12}},{"value":"/ use std::time::Duration;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353380,"byte_end":353408,"line_start":123,"line_end":123,"column_start":5,"column_end":33}},{"value":"/ use image::Delay;","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353413,"byte_end":353434,"line_start":124,"line_end":124,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353439,"byte_end":353442,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ let duration = Duration::from_millis(20);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353447,"byte_end":353492,"line_start":126,"line_end":126,"column_start":5,"column_end":50}},{"value":"/ let delay = Delay::from_saturating_duration(duration);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353497,"byte_end":353555,"line_start":127,"line_end":127,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":353560,"byte_end":353567,"line_start":128,"line_end":128,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":354779,"byte_end":354793,"line_start":158,"line_end":158,"column_start":12,"column_end":26},"name":"numer_denom_ms","qualname":"<Delay>::numer_denom_ms","value":"pub fn numer_denom_ms(Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The numerator and denominator of the delay in milliseconds.","sig":null,"attributes":[{"value":"/ The numerator and denominator of the delay in milliseconds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":354553,"byte_end":354616,"line_start":154,"line_end":154,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":354621,"byte_end":354624,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ This is guaranteed to be an exact conversion if the `Delay` was previously created with the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":354629,"byte_end":354724,"line_start":156,"line_end":156,"column_start":5,"column_end":100}},{"value":"/ `from_numer_denom_ms` constructor.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":354729,"byte_end":354767,"line_start":157,"line_end":157,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1407},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362073,"byte_end":362079,"line_start":19,"line_end":19,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer_::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1410}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362033,"byte_end":362061,"line_start":18,"line_end":18,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1432},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363240,"byte_end":363249,"line_start":76,"line_end":76,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer_::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1435}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363192,"byte_end":363228,"line_start":75,"line_end":75,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1454},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364505,"byte_end":364509,"line_start":133,"line_end":133,"column_start":12,"column_end":16},"name":"Rows","qualname":"::buffer_::Rows","value":"Rows {  }","parent":null,"children":[{"krate":0,"index":1457}],"decl_id":null,"docs":" Iterate over rows of an image","sig":null,"attributes":[{"value":"/ Iterate over rows of an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364299,"byte_end":364332,"line_start":128,"line_end":128,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364333,"byte_end":364336,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows`]. See its document for details.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364337,"byte_end":364423,"line_start":130,"line_end":130,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364424,"byte_end":364427,"line_start":131,"line_end":131,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows`]: ../struct.ImageBuffer.html#method.rows","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364428,"byte_end":364493,"line_start":132,"line_end":132,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1481},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":367059,"byte_end":367066,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"RowsMut","qualname":"::buffer_::RowsMut","value":"RowsMut {  }","parent":null,"children":[{"krate":0,"index":1484}],"decl_id":null,"docs":" Iterate over mutable rows of an image","sig":null,"attributes":[{"value":"/ Iterate over mutable rows of an image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366833,"byte_end":366874,"line_start":218,"line_end":218,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366875,"byte_end":366878,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ This iterator is created with [`ImageBuffer::rows_mut`]. See its document for details.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366879,"byte_end":366969,"line_start":220,"line_end":220,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366970,"byte_end":366973,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ [`ImageBuffer::rows_mut`]: ../struct.ImageBuffer.html#method.rows_mut","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366974,"byte_end":367047,"line_start":222,"line_end":222,"column_start":1,"column_end":74}}]},{"kind":"Struct","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369382,"byte_end":369397,"line_start":303,"line_end":303,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer_::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369333,"byte_end":369370,"line_start":302,"line_end":302,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1528},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370704,"byte_end":370717,"line_start":365,"line_end":365,"column_start":12,"column_end":25},"name":"EnumerateRows","qualname":"::buffer_::EnumerateRows","value":"EnumerateRows {  }","parent":null,"children":[{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370657,"byte_end":370692,"line_start":364,"line_end":364,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1550},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372092,"byte_end":372110,"line_start":431,"line_end":431,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer_::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1553},{"krate":0,"index":1554},{"krate":0,"index":1555},{"krate":0,"index":1556}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372043,"byte_end":372080,"line_start":430,"line_end":430,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373254,"byte_end":373270,"line_start":484,"line_end":484,"column_start":12,"column_end":28},"name":"EnumerateRowsMut","qualname":"::buffer_::EnumerateRowsMut","value":"EnumerateRowsMut {  }","parent":null,"children":[{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575}],"decl_id":null,"docs":" Enumerate the rows of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the rows of an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373207,"byte_end":373242,"line_start":483,"line_end":483,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":2965},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376820,"byte_end":376831,"line_start":609,"line_end":609,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer_::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":2968},{"krate":0,"index":2969},{"krate":0,"index":2970},{"krate":0,"index":2971}],"decl_id":null,"docs":" Generic image buffer","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374442,"byte_end":374466,"line_start":540,"line_end":540,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374467,"byte_end":374470,"line_start":541,"line_end":541,"column_start":1,"column_end":4}},{"value":"/ This is an image parameterised by its Pixel types, represented by a width and height and a","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374471,"byte_end":374565,"line_start":542,"line_end":542,"column_start":1,"column_end":95}},{"value":"/ container of channel data. It provides direct access to its pixels and implements the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374566,"byte_end":374655,"line_start":543,"line_end":543,"column_start":1,"column_end":90}},{"value":"/ [`GenericImageView`] and [`GenericImage`] traits. In many ways, this is the standard buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374656,"byte_end":374751,"line_start":544,"line_end":544,"column_start":1,"column_end":96}},{"value":"/ implementing those traits. Using this concrete type instead of a generic type parameter has","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374752,"byte_end":374847,"line_start":545,"line_end":545,"column_start":1,"column_end":96}},{"value":"/ been shown to improve performance.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374848,"byte_end":374886,"line_start":546,"line_end":546,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374887,"byte_end":374890,"line_start":547,"line_end":547,"column_start":1,"column_end":4}},{"value":"/ The crate defines a few type aliases with regularly used pixel types for your convenience, such","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374891,"byte_end":374990,"line_start":548,"line_end":548,"column_start":1,"column_end":100}},{"value":"/ as `RgbImage`, `GrayImage` etc.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374991,"byte_end":375026,"line_start":549,"line_end":549,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375027,"byte_end":375030,"line_start":550,"line_end":550,"column_start":1,"column_end":4}},{"value":"/ [`GenericImage`]: trait.GenericImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375031,"byte_end":375076,"line_start":551,"line_end":551,"column_start":1,"column_end":46}},{"value":"/ [`GenericImageView`]: trait.GenericImageView.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375077,"byte_end":375130,"line_start":552,"line_end":552,"column_start":1,"column_end":54}},{"value":"/ [`RgbImage`]: type.RgbImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375131,"byte_end":375167,"line_start":553,"line_end":553,"column_start":1,"column_end":37}},{"value":"/ [`GrayImage`]: type.GrayImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375168,"byte_end":375206,"line_start":554,"line_end":554,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375207,"byte_end":375210,"line_start":555,"line_end":555,"column_start":1,"column_end":4}},{"value":"/ To convert between images of different Pixel types use [`DynamicImage`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375211,"byte_end":375287,"line_start":556,"line_end":556,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375288,"byte_end":375291,"line_start":557,"line_end":557,"column_start":1,"column_end":4}},{"value":"/ You can retrieve a complete description of the buffer's layout and contents through","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375292,"byte_end":375379,"line_start":558,"line_end":558,"column_start":1,"column_end":88}},{"value":"/ [`as_flat_samples`] and [`as_flat_samples_mut`]. This can be handy to also use the contents in","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375380,"byte_end":375478,"line_start":559,"line_end":559,"column_start":1,"column_end":99}},{"value":"/ a foreign language, map it as a GPU host buffer or other similar tasks.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375479,"byte_end":375554,"line_start":560,"line_end":560,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375555,"byte_end":375558,"line_start":561,"line_end":561,"column_start":1,"column_end":4}},{"value":"/ [`DynamicImage`]: enum.DynamicImage.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375559,"byte_end":375603,"line_start":562,"line_end":562,"column_start":1,"column_end":45}},{"value":"/ [`as_flat_samples`]: #method.as_flat_samples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375604,"byte_end":375652,"line_start":563,"line_end":563,"column_start":1,"column_end":49}},{"value":"/ [`as_flat_samples_mut`]: #method.as_flat_samples_mut","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375653,"byte_end":375709,"line_start":564,"line_end":564,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375710,"byte_end":375713,"line_start":565,"line_end":565,"column_start":1,"column_end":4}},{"value":"/ ## Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375714,"byte_end":375729,"line_start":566,"line_end":566,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375730,"byte_end":375733,"line_start":567,"line_end":567,"column_start":1,"column_end":4}},{"value":"/ Create a simple canvas and paint a small cross.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375734,"byte_end":375785,"line_start":568,"line_end":568,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375786,"byte_end":375789,"line_start":569,"line_end":569,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375790,"byte_end":375797,"line_start":570,"line_end":570,"column_start":1,"column_end":8}},{"value":"/ use image::{RgbImage, Rgb};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375798,"byte_end":375829,"line_start":571,"line_end":571,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375830,"byte_end":375833,"line_start":572,"line_end":572,"column_start":1,"column_end":4}},{"value":"/ let mut img = RgbImage::new(32, 32);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375834,"byte_end":375874,"line_start":573,"line_end":573,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375875,"byte_end":375878,"line_start":574,"line_end":574,"column_start":1,"column_end":4}},{"value":"/ for x in 15..=17 {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375879,"byte_end":375901,"line_start":575,"line_end":575,"column_start":1,"column_end":23}},{"value":"/     for y in 8..24 {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375902,"byte_end":375926,"line_start":576,"line_end":576,"column_start":1,"column_end":25}},{"value":"/         img.put_pixel(x, y, Rgb([255, 0, 0]));","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375927,"byte_end":375977,"line_start":577,"line_end":577,"column_start":1,"column_end":51}},{"value":"/         img.put_pixel(y, x, Rgb([255, 0, 0]));","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":375978,"byte_end":376028,"line_start":578,"line_end":578,"column_start":1,"column_end":51}},{"value":"/     }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376029,"byte_end":376038,"line_start":579,"line_end":579,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376039,"byte_end":376044,"line_start":580,"line_end":580,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376045,"byte_end":376052,"line_start":581,"line_end":581,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376053,"byte_end":376056,"line_start":582,"line_end":582,"column_start":1,"column_end":4}},{"value":"/ Overlays an image on top of a larger background raster.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376057,"byte_end":376116,"line_start":583,"line_end":583,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376117,"byte_end":376120,"line_start":584,"line_end":584,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376121,"byte_end":376134,"line_start":585,"line_end":585,"column_start":1,"column_end":14}},{"value":"/ use image::{GenericImage, GenericImageView, ImageBuffer, open};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376135,"byte_end":376202,"line_start":586,"line_end":586,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376203,"byte_end":376206,"line_start":587,"line_end":587,"column_start":1,"column_end":4}},{"value":"/ let on_top = open(\"path/to/some.png\").unwrap().into_rgb();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376207,"byte_end":376269,"line_start":588,"line_end":588,"column_start":1,"column_end":63}},{"value":"/ let mut img = ImageBuffer::from_fn(512, 512, |x, y| {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376270,"byte_end":376327,"line_start":589,"line_end":589,"column_start":1,"column_end":58}},{"value":"/     if (x + y) % 2 == 0 {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376328,"byte_end":376357,"line_start":590,"line_end":590,"column_start":1,"column_end":30}},{"value":"/         image::Rgb([0, 0, 0])","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376358,"byte_end":376391,"line_start":591,"line_end":591,"column_start":1,"column_end":34}},{"value":"/     } else {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376392,"byte_end":376408,"line_start":592,"line_end":592,"column_start":1,"column_end":17}},{"value":"/         image::Rgb([255, 255, 255])","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376409,"byte_end":376448,"line_start":593,"line_end":593,"column_start":1,"column_end":40}},{"value":"/     }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376449,"byte_end":376458,"line_start":594,"line_end":594,"column_start":1,"column_end":10}},{"value":"/ });","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376459,"byte_end":376466,"line_start":595,"line_end":595,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376467,"byte_end":376470,"line_start":596,"line_end":596,"column_start":1,"column_end":4}},{"value":"/ image::imageops::overlay(&mut img, &on_top, 128, 128);","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376471,"byte_end":376529,"line_start":597,"line_end":597,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376530,"byte_end":376537,"line_start":598,"line_end":598,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376538,"byte_end":376541,"line_start":599,"line_end":599,"column_start":1,"column_end":4}},{"value":"/ Convert an RgbaImage to a GrayImage.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376542,"byte_end":376582,"line_start":600,"line_end":600,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376583,"byte_end":376586,"line_start":601,"line_end":601,"column_start":1,"column_end":4}},{"value":"/ ```no_run","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376587,"byte_end":376600,"line_start":602,"line_end":602,"column_start":1,"column_end":14}},{"value":"/ use image::{open, DynamicImage};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376601,"byte_end":376637,"line_start":603,"line_end":603,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376638,"byte_end":376641,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ let rgba = open(\"path/to/some.png\").unwrap().into_rgba();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376642,"byte_end":376703,"line_start":605,"line_end":605,"column_start":1,"column_end":62}},{"value":"/ let gray = DynamicImage::ImageRgba8(rgba).into_luma();","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376704,"byte_end":376762,"line_start":606,"line_end":606,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":376763,"byte_end":376770,"line_start":607,"line_end":607,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1592},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377589,"byte_end":377597,"line_start":631,"line_end":631,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377304,"byte_end":377351,"line_start":626,"line_end":626,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377356,"byte_end":377392,"line_start":627,"line_end":627,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377397,"byte_end":377400,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the container is not big enough (including when the image dimensions","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377405,"byte_end":377495,"line_start":629,"line_end":629,"column_start":5,"column_end":95}},{"value":"/ necessitate an allocation of more bytes than supported by the container).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377500,"byte_end":377577,"line_start":630,"line_end":630,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1593},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378003,"byte_end":378011,"line_start":645,"line_end":645,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377954,"byte_end":377991,"line_start":644,"line_end":644,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1594},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378111,"byte_end":378117,"line_start":650,"line_end":650,"column_start":12,"column_end":18},"name":"as_raw","qualname":"<ImageBuffer<P, Container>>::as_raw","value":"pub fn as_raw(&Self) -> &Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378062,"byte_end":378099,"line_start":649,"line_end":649,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1595},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378222,"byte_end":378232,"line_start":655,"line_end":655,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378171,"byte_end":378210,"line_start":654,"line_end":654,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1596},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378341,"byte_end":378346,"line_start":660,"line_end":660,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378301,"byte_end":378329,"line_start":659,"line_end":659,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1597},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378434,"byte_end":378440,"line_start":665,"line_end":665,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378393,"byte_end":378422,"line_start":664,"line_end":664,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1599},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378825,"byte_end":378831,"line_start":677,"line_end":677,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels(&Self) -> Pixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378692,"byte_end":378746,"line_start":675,"line_end":675,"column_start":5,"column_end":59}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378751,"byte_end":378813,"line_start":676,"line_end":676,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1600},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379331,"byte_end":379335,"line_start":688,"line_end":688,"column_start":12,"column_end":16},"name":"rows","qualname":"<ImageBuffer<P, Container>>::rows","value":"pub fn rows(&Self) -> Rows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the rows of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":378984,"byte_end":379036,"line_start":683,"line_end":683,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379041,"byte_end":379044,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379049,"byte_end":379140,"line_start":685,"line_end":685,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379145,"byte_end":379238,"line_start":686,"line_end":686,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379243,"byte_end":379319,"line_start":687,"line_end":687,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379650,"byte_end":379666,"line_start":696,"line_end":696,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels(&Self) -> EnumeratePixels<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n The iteration order is x = 0 to width then y = 0 to height\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379429,"byte_end":379473,"line_start":692,"line_end":692,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379478,"byte_end":379531,"line_start":693,"line_end":693,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379536,"byte_end":379571,"line_start":694,"line_end":694,"column_start":5,"column_end":40}},{"value":"/ The iteration order is x = 0 to width then y = 0 to height","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379576,"byte_end":379638,"line_start":695,"line_end":695,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1602},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379998,"byte_end":380012,"line_start":708,"line_end":708,"column_start":12,"column_end":26},"name":"enumerate_rows","qualname":"<ImageBuffer<P, Container>>::enumerate_rows","value":"pub fn enumerate_rows(&Self) -> EnumerateRows<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379847,"byte_end":379889,"line_start":705,"line_end":705,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379894,"byte_end":379946,"line_start":706,"line_end":706,"column_start":5,"column_end":57}},{"value":"/ along with a reference to them.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":379951,"byte_end":379986,"line_start":707,"line_end":707,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1603},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380333,"byte_end":380342,"line_start":721,"line_end":721,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380167,"byte_end":380221,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380226,"byte_end":380229,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380234,"byte_end":380246,"line_start":718,"line_end":718,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380251,"byte_end":380254,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":380259,"byte_end":380321,"line_start":720,"line_end":720,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1611},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382068,"byte_end":382081,"line_start":762,"line_end":762,"column_start":12,"column_end":25},"name":"sample_layout","qualname":"<ImageBuffer<P, Container>>::sample_layout","value":"pub fn sample_layout(&Self) -> SampleLayout","parent":null,"children":[],"decl_id":null,"docs":" Get the format of the buffer when viewed as a matrix of samples.\n","sig":null,"attributes":[{"value":"/ Get the format of the buffer when viewed as a matrix of samples.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":381988,"byte_end":382056,"line_start":761,"line_end":761,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1612},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382695,"byte_end":382712,"line_start":773,"line_end":773,"column_start":12,"column_end":29},"name":"into_flat_samples","qualname":"<ImageBuffer<P, Container>>::into_flat_samples","value":"pub fn into_flat_samples(Self) -> FlatSamples<Container> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return the raw sample buffer with its stride an dimension information.","sig":null,"attributes":[{"value":"/ Return the raw sample buffer with its stride an dimension information.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382284,"byte_end":382358,"line_start":767,"line_end":767,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382363,"byte_end":382366,"line_start":768,"line_end":768,"column_start":5,"column_end":8}},{"value":"/ The returned buffer is guaranteed to be well formed in all cases. It is layed out by","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382371,"byte_end":382459,"line_start":769,"line_end":769,"column_start":5,"column_end":93}},{"value":"/ colors, width then height, meaning `channel_stride <= width_stride <= height_stride`. All","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382464,"byte_end":382557,"line_start":770,"line_end":770,"column_start":5,"column_end":98}},{"value":"/ strides are in numbers of elements but those are mostly `u8` in which case the strides are","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382562,"byte_end":382656,"line_start":771,"line_end":771,"column_start":5,"column_end":99}},{"value":"/ also byte strides.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":382661,"byte_end":382683,"line_start":772,"line_end":772,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1613},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383195,"byte_end":383210,"line_start":788,"line_end":788,"column_start":12,"column_end":27},"name":"as_flat_samples","qualname":"<ImageBuffer<P, Container>>::as_flat_samples","value":"pub fn as_flat_samples(&Self) -> FlatSamples<&[P::Subpixel]> where\nContainer: AsRef<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383053,"byte_end":383096,"line_start":785,"line_end":785,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383101,"byte_end":383104,"line_start":786,"line_end":786,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383109,"byte_end":383183,"line_start":787,"line_end":787,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1614},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383643,"byte_end":383662,"line_start":802,"line_end":802,"column_start":12,"column_end":31},"name":"as_flat_samples_mut","qualname":"<ImageBuffer<P, Container>>::as_flat_samples_mut","value":"pub fn as_flat_samples_mut(&mut Self) -> FlatSamples<&mut [P::Subpixel]> where\nContainer: AsMut<[P::Subpixel]>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view on the raw sample buffer.","sig":null,"attributes":[{"value":"/ Return a mutable view on the raw sample buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383493,"byte_end":383544,"line_start":799,"line_end":799,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383549,"byte_end":383552,"line_start":800,"line_end":800,"column_start":5,"column_end":8}},{"value":"/ See [`into_flat_samples`](#method.into_flat_samples) for more details.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383557,"byte_end":383631,"line_start":801,"line_end":801,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1619},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384409,"byte_end":384419,"line_start":827,"line_end":827,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384335,"byte_end":384397,"line_start":826,"line_end":826,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1620},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384945,"byte_end":384953,"line_start":838,"line_end":838,"column_start":12,"column_end":20},"name":"rows_mut","qualname":"<ImageBuffer<P, Container>>::rows_mut","value":"pub fn rows_mut(&mut Self) -> RowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable rows of this image.","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable rows of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384590,"byte_end":384650,"line_start":833,"line_end":833,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384655,"byte_end":384658,"line_start":834,"line_end":834,"column_start":5,"column_end":8}},{"value":"/ Only non-empty rows can be iterated in this manner. In particular the iterator will not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384663,"byte_end":384754,"line_start":835,"line_end":835,"column_start":5,"column_end":96}},{"value":"/ yield any item when the width of the image is `0` or a pixel type without any channels is","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384759,"byte_end":384852,"line_start":836,"line_end":836,"column_start":5,"column_end":98}},{"value":"/ used. This ensures that its length can always be represented by `usize`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":384857,"byte_end":384933,"line_start":837,"line_end":837,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1621},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385223,"byte_end":385243,"line_start":845,"line_end":845,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut(&mut Self) -> EnumeratePixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385061,"byte_end":385105,"line_start":842,"line_end":842,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385110,"byte_end":385163,"line_start":843,"line_end":843,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385168,"byte_end":385211,"line_start":844,"line_end":844,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385617,"byte_end":385635,"line_start":858,"line_end":858,"column_start":12,"column_end":30},"name":"enumerate_rows_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_rows_mut","value":"pub fn enumerate_rows_mut(&mut Self) -> EnumerateRowsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the rows of the image.\n The iterator yields the y-coordinate of each row\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the rows of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385458,"byte_end":385500,"line_start":855,"line_end":855,"column_start":5,"column_end":47}},{"value":"/ The iterator yields the y-coordinate of each row","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385505,"byte_end":385557,"line_start":856,"line_end":856,"column_start":5,"column_end":57}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385562,"byte_end":385605,"line_start":857,"line_end":857,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1623},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385998,"byte_end":386011,"line_start":872,"line_end":872,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385824,"byte_end":385886,"line_start":867,"line_end":867,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385891,"byte_end":385894,"line_start":868,"line_end":868,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385899,"byte_end":385911,"line_start":869,"line_end":869,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385916,"byte_end":385919,"line_start":870,"line_end":870,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":385924,"byte_end":385986,"line_start":871,"line_end":871,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1624},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386460,"byte_end":386469,"line_start":884,"line_end":884,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386311,"byte_end":386348,"line_start":879,"line_end":879,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386353,"byte_end":386356,"line_start":880,"line_end":880,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386361,"byte_end":386373,"line_start":881,"line_end":881,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386378,"byte_end":386381,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386386,"byte_end":386448,"line_start":883,"line_end":883,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1628},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386914,"byte_end":386918,"line_start":899,"line_end":899,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386723,"byte_end":386776,"line_start":895,"line_end":895,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386781,"byte_end":386784,"line_start":896,"line_end":896,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386789,"byte_end":386845,"line_start":897,"line_end":897,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386850,"byte_end":386902,"line_start":898,"line_end":898,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1633},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387593,"byte_end":387609,"line_start":925,"line_end":925,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<ImageBuffer<P, Container>>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387386,"byte_end":387441,"line_start":920,"line_end":920,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387446,"byte_end":387471,"line_start":921,"line_end":921,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387476,"byte_end":387479,"line_start":922,"line_end":922,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387484,"byte_end":387556,"line_start":923,"line_end":923,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387561,"byte_end":387581,"line_start":924,"line_end":924,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394164,"byte_end":394167,"line_start":1138,"line_end":1138,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":393974,"byte_end":394035,"line_start":1133,"line_end":1133,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394040,"byte_end":394043,"line_start":1134,"line_end":1134,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394048,"byte_end":394060,"line_start":1135,"line_end":1135,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394065,"byte_end":394068,"line_start":1136,"line_end":1136,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394073,"byte_end":394152,"line_start":1137,"line_end":1137,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394705,"byte_end":394715,"line_start":1154,"line_end":1154,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394525,"byte_end":394576,"line_start":1149,"line_end":1149,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394581,"byte_end":394584,"line_start":1150,"line_end":1150,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394589,"byte_end":394601,"line_start":1151,"line_end":1151,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394606,"byte_end":394609,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394614,"byte_end":394693,"line_start":1153,"line_end":1153,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395230,"byte_end":395237,"line_start":1169,"line_end":1169,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: FnMut(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":394936,"byte_end":395018,"line_start":1162,"line_end":1162,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395023,"byte_end":395026,"line_start":1163,"line_end":1163,"column_start":5,"column_end":8}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395031,"byte_end":395101,"line_start":1164,"line_end":1164,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395106,"byte_end":395109,"line_start":1165,"line_end":1165,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395114,"byte_end":395126,"line_start":1166,"line_end":1166,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395131,"byte_end":395134,"line_start":1167,"line_end":1167,"column_start":5,"column_end":8}},{"value":"/ Panics when the resulting image is larger the the maximum size of a vector.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395139,"byte_end":395218,"line_start":1168,"line_end":1168,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1685},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395648,"byte_end":395656,"line_start":1182,"line_end":1182,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395528,"byte_end":395582,"line_start":1180,"line_end":1180,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395587,"byte_end":395636,"line_start":1181,"line_end":1181,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395943,"byte_end":395951,"line_start":1192,"line_end":1192,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395843,"byte_end":395904,"line_start":1190,"line_end":1190,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":395909,"byte_end":395931,"line_start":1191,"line_end":1191,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1687},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396079,"byte_end":396092,"line_start":1198,"line_end":1198,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer_::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1689}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396013,"byte_end":396068,"line_start":1197,"line_end":1197,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396279,"byte_end":396286,"line_start":1203,"line_end":1203,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer_::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1687},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396102,"byte_end":396143,"line_start":1199,"line_end":1199,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396148,"byte_end":396151,"line_start":1200,"line_end":1200,"column_start":5,"column_end":8}},{"value":"/ A generic implementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396156,"byte_end":396242,"line_start":1201,"line_end":1201,"column_start":5,"column_end":91}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396247,"byte_end":396271,"line_start":1202,"line_end":1202,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396554,"byte_end":396568,"line_start":1211,"line_end":1211,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396364,"byte_end":396424,"line_start":1208,"line_end":1208,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396429,"byte_end":396497,"line_start":1209,"line_end":1209,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396502,"byte_end":396542,"line_start":1210,"line_end":1210,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1700},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398312,"byte_end":398320,"line_start":1263,"line_end":1263,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer_::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398273,"byte_end":398302,"line_start":1262,"line_end":1262,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398409,"byte_end":398418,"line_start":1265,"line_end":1265,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer_::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398354,"byte_end":398399,"line_start":1264,"line_end":1264,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1702},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398498,"byte_end":398507,"line_start":1267,"line_end":1267,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer_::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398453,"byte_end":398488,"line_start":1266,"line_end":1266,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398603,"byte_end":398617,"line_start":1269,"line_end":1269,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer_::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":398542,"byte_end":398593,"line_start":1268,"line_end":1268,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2997},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407230,"byte_end":407232,"line_start":11,"line_end":11,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ColorType::L8","value":"ColorType::L8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407197,"byte_end":407225,"line_start":10,"line_end":10,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2999},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407293,"byte_end":407296,"line_start":13,"line_end":13,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ColorType::La8","value":"ColorType::La8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407238,"byte_end":407288,"line_start":12,"line_end":12,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3001},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407351,"byte_end":407355,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ColorType::Rgb8","value":"ColorType::Rgb8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407302,"byte_end":407346,"line_start":14,"line_end":14,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3003},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407410,"byte_end":407415,"line_start":17,"line_end":17,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ColorType::Rgba8","value":"ColorType::Rgba8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407361,"byte_end":407405,"line_start":16,"line_end":16,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3005},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407456,"byte_end":407459,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ColorType::L16","value":"ColorType::L16","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407422,"byte_end":407451,"line_start":19,"line_end":19,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3007},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407521,"byte_end":407525,"line_start":22,"line_end":22,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ColorType::La16","value":"ColorType::La16","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407465,"byte_end":407516,"line_start":21,"line_end":21,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3009},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407559,"byte_end":407564,"line_start":24,"line_end":24,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ColorType::Rgb16","value":"ColorType::Rgb16","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407531,"byte_end":407554,"line_start":23,"line_end":23,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3011},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407599,"byte_end":407605,"line_start":26,"line_end":26,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ColorType::Rgba16","value":"ColorType::Rgba16","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGBA\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGBA","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407570,"byte_end":407594,"line_start":25,"line_end":25,"column_start":5,"column_end":29}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3013},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407661,"byte_end":407665,"line_start":29,"line_end":29,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ColorType::Bgr8","value":"ColorType::Bgr8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407612,"byte_end":407656,"line_start":28,"line_end":28,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3015},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407720,"byte_end":407725,"line_start":31,"line_end":31,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ColorType::Bgra8","value":"ColorType::Bgra8","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407671,"byte_end":407715,"line_start":30,"line_end":30,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3017},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407751,"byte_end":407766,"line_start":34,"line_end":34,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ColorType::__NonExhaustive","value":"ColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":2996},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":2996},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407181,"byte_end":407190,"line_start":9,"line_end":9,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel is 16-bit RGB\n    Rgb16,\n\n    /// Pixel is 16-bit RGBA\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":2997},{"krate":0,"index":2999},{"krate":0,"index":3001},{"krate":0,"index":3003},{"krate":0,"index":3005},{"krate":0,"index":3007},{"krate":0,"index":3009},{"krate":0,"index":3011},{"krate":0,"index":3013},{"krate":0,"index":3015},{"krate":0,"index":3017}],"decl_id":null,"docs":" An enumeration over supported color types and bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and bit depths","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407060,"byte_end":407120,"line_start":7,"line_end":7,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":1722},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407914,"byte_end":407929,"line_start":39,"line_end":39,"column_start":12,"column_end":27},"name":"bytes_per_pixel","qualname":"<ColorType>::bytes_per_pixel","value":"pub fn bytes_per_pixel(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes contained in a pixel of `ColorType` ```c```\n","sig":null,"attributes":[{"value":"/ Returns the number of bytes contained in a pixel of `ColorType` ```c```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407827,"byte_end":407902,"line_start":38,"line_end":38,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1723},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":408392,"byte_end":408401,"line_start":52,"line_end":52,"column_start":12,"column_end":21},"name":"has_alpha","qualname":"<ColorType>::has_alpha","value":"pub fn has_alpha(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is an alpha channel.\n","sig":null,"attributes":[{"value":"/ Returns if there is an alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":408339,"byte_end":408380,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":408740,"byte_end":408749,"line_start":62,"line_end":62,"column_start":12,"column_end":21},"name":"has_color","qualname":"<ColorType>::has_color","value":"pub fn has_color(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns false if the color scheme is grayscale, true otherwise.\n","sig":null,"attributes":[{"value":"/ Returns false if the color scheme is grayscale, true otherwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":408661,"byte_end":408728,"line_start":61,"line_end":61,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409143,"byte_end":409157,"line_start":73,"line_end":73,"column_start":12,"column_end":26},"name":"bits_per_pixel","qualname":"<ColorType>::bits_per_pixel","value":"pub fn bits_per_pixel(Self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be\n a multiple of 8).\n","sig":null,"attributes":[{"value":"/ Returns the number of bits contained in a pixel of `ColorType` ```c``` (which will always be","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409009,"byte_end":409105,"line_start":71,"line_end":71,"column_start":5,"column_end":101}},{"value":"/ a multiple of 8).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409110,"byte_end":409131,"line_start":72,"line_end":72,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409320,"byte_end":409333,"line_start":78,"line_end":78,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of color channels that make up this pixel\n","sig":null,"attributes":[{"value":"/ Returns the number of color channels that make up this pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409244,"byte_end":409308,"line_start":77,"line_end":77,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3036},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409995,"byte_end":409997,"line_start":95,"line_end":95,"column_start":5,"column_end":7},"name":"L1","qualname":"::color::ExtendedColorType::L1","value":"ExtendedColorType::L1","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409962,"byte_end":409990,"line_start":94,"line_end":94,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3038},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410058,"byte_end":410061,"line_start":97,"line_end":97,"column_start":5,"column_end":8},"name":"La1","qualname":"::color::ExtendedColorType::La1","value":"ExtendedColorType::La1","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 1-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410003,"byte_end":410053,"line_start":96,"line_end":96,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3040},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410116,"byte_end":410120,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Rgb1","qualname":"::color::ExtendedColorType::Rgb1","value":"ExtendedColorType::Rgb1","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 1-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 1-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410067,"byte_end":410111,"line_start":98,"line_end":98,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3042},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410175,"byte_end":410180,"line_start":101,"line_end":101,"column_start":5,"column_end":10},"name":"Rgba1","qualname":"::color::ExtendedColorType::Rgba1","value":"ExtendedColorType::Rgba1","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 1-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 1-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410126,"byte_end":410170,"line_start":100,"line_end":100,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3044},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410219,"byte_end":410221,"line_start":103,"line_end":103,"column_start":5,"column_end":7},"name":"L2","qualname":"::color::ExtendedColorType::L2","value":"ExtendedColorType::L2","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410186,"byte_end":410214,"line_start":102,"line_end":102,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3046},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410282,"byte_end":410285,"line_start":105,"line_end":105,"column_start":5,"column_end":8},"name":"La2","qualname":"::color::ExtendedColorType::La2","value":"ExtendedColorType::La2","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 2-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410227,"byte_end":410277,"line_start":104,"line_end":104,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3048},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410340,"byte_end":410344,"line_start":107,"line_end":107,"column_start":5,"column_end":9},"name":"Rgb2","qualname":"::color::ExtendedColorType::Rgb2","value":"ExtendedColorType::Rgb2","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 2-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 2-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410291,"byte_end":410335,"line_start":106,"line_end":106,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3050},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410399,"byte_end":410404,"line_start":109,"line_end":109,"column_start":5,"column_end":10},"name":"Rgba2","qualname":"::color::ExtendedColorType::Rgba2","value":"ExtendedColorType::Rgba2","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 2-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 2-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410350,"byte_end":410394,"line_start":108,"line_end":108,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3052},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410443,"byte_end":410445,"line_start":111,"line_end":111,"column_start":5,"column_end":7},"name":"L4","qualname":"::color::ExtendedColorType::L4","value":"ExtendedColorType::L4","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410410,"byte_end":410438,"line_start":110,"line_end":110,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3054},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410506,"byte_end":410509,"line_start":113,"line_end":113,"column_start":5,"column_end":8},"name":"La4","qualname":"::color::ExtendedColorType::La4","value":"ExtendedColorType::La4","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 4-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410451,"byte_end":410501,"line_start":112,"line_end":112,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3056},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410564,"byte_end":410568,"line_start":115,"line_end":115,"column_start":5,"column_end":9},"name":"Rgb4","qualname":"::color::ExtendedColorType::Rgb4","value":"ExtendedColorType::Rgb4","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 4-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 4-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410515,"byte_end":410559,"line_start":114,"line_end":114,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3058},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410623,"byte_end":410628,"line_start":117,"line_end":117,"column_start":5,"column_end":10},"name":"Rgba4","qualname":"::color::ExtendedColorType::Rgba4","value":"ExtendedColorType::Rgba4","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 4-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 4-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410574,"byte_end":410618,"line_start":116,"line_end":116,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3060},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410667,"byte_end":410669,"line_start":119,"line_end":119,"column_start":5,"column_end":7},"name":"L8","qualname":"::color::ExtendedColorType::L8","value":"ExtendedColorType::L8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410634,"byte_end":410662,"line_start":118,"line_end":118,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3062},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410730,"byte_end":410733,"line_start":121,"line_end":121,"column_start":5,"column_end":8},"name":"La8","qualname":"::color::ExtendedColorType::La8","value":"ExtendedColorType::La8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 8-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410675,"byte_end":410725,"line_start":120,"line_end":120,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3064},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410788,"byte_end":410792,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"Rgb8","qualname":"::color::ExtendedColorType::Rgb8","value":"ExtendedColorType::Rgb8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410739,"byte_end":410783,"line_start":122,"line_end":122,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3066},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410847,"byte_end":410852,"line_start":125,"line_end":125,"column_start":5,"column_end":10},"name":"Rgba8","qualname":"::color::ExtendedColorType::Rgba8","value":"ExtendedColorType::Rgba8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 8-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410798,"byte_end":410842,"line_start":124,"line_end":124,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3068},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410892,"byte_end":410895,"line_start":127,"line_end":127,"column_start":5,"column_end":8},"name":"L16","qualname":"::color::ExtendedColorType::L16","value":"ExtendedColorType::L16","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410858,"byte_end":410887,"line_start":126,"line_end":126,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3070},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410957,"byte_end":410961,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"La16","qualname":"::color::ExtendedColorType::La16","value":"ExtendedColorType::La16","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 16-bit luminance with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit luminance with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410901,"byte_end":410952,"line_start":128,"line_end":128,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3072},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411017,"byte_end":411022,"line_start":131,"line_end":131,"column_start":5,"column_end":10},"name":"Rgb16","qualname":"::color::ExtendedColorType::Rgb16","value":"ExtendedColorType::Rgb16","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 16-bit R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 16-bit R, G and B channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":410967,"byte_end":411012,"line_start":130,"line_end":130,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3074},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411078,"byte_end":411084,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Rgba16","qualname":"::color::ExtendedColorType::Rgba16","value":"ExtendedColorType::Rgba16","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 16-bit RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 16-bit RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411028,"byte_end":411073,"line_start":132,"line_end":132,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3076},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411139,"byte_end":411143,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"Bgr8","qualname":"::color::ExtendedColorType::Bgr8","value":"ExtendedColorType::Bgr8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel contains 8-bit B, G and R channels\n","sig":null,"attributes":[{"value":"/ Pixel contains 8-bit B, G and R channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411090,"byte_end":411134,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3078},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411198,"byte_end":411203,"line_start":137,"line_end":137,"column_start":5,"column_end":10},"name":"Bgra8","qualname":"::color::ExtendedColorType::Bgra8","value":"ExtendedColorType::Bgra8","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is 8-bit BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is 8-bit BGR with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411149,"byte_end":411193,"line_start":136,"line_end":136,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3080},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411432,"byte_end":411439,"line_start":142,"line_end":142,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::color::ExtendedColorType::Unknown","value":"ExtendedColorType::Unknown(u8)","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":" Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n which are associated with an external palette. In that case, the pixel value is an index\n into the palette.\n","sig":null,"attributes":[{"value":"/ Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411210,"byte_end":411304,"line_start":139,"line_end":139,"column_start":5,"column_end":99}},{"value":"/ which are associated with an external palette. In that case, the pixel value is an index","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411309,"byte_end":411401,"line_start":140,"line_end":140,"column_start":5,"column_end":97}},{"value":"/ into the palette.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411406,"byte_end":411427,"line_start":141,"line_end":141,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3083},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411469,"byte_end":411484,"line_start":145,"line_end":145,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::color::ExtendedColorType::__NonExhaustive","value":"ExtendedColorType::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3035},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3035},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409938,"byte_end":409955,"line_start":93,"line_end":93,"column_start":10,"column_end":27},"name":"ExtendedColorType","qualname":"::color::ExtendedColorType","value":"pub enum ExtendedColorType {\n\n    /// Pixel is 1-bit luminance\n    L1,\n\n    /// Pixel is 1-bit luminance with an alpha channel\n    La1,\n\n    /// Pixel contains 1-bit R, G and B channels\n    Rgb1,\n\n    /// Pixel is 1-bit RGB with an alpha channel\n    Rgba1,\n\n    /// Pixel is 2-bit luminance\n    L2,\n\n    /// Pixel is 2-bit luminance with an alpha channel\n    La2,\n\n    /// Pixel contains 2-bit R, G and B channels\n    Rgb2,\n\n    /// Pixel is 2-bit RGB with an alpha channel\n    Rgba2,\n\n    /// Pixel is 4-bit luminance\n    L4,\n\n    /// Pixel is 4-bit luminance with an alpha channel\n    La4,\n\n    /// Pixel contains 4-bit R, G and B channels\n    Rgb4,\n\n    /// Pixel is 4-bit RGB with an alpha channel\n    Rgba4,\n\n    /// Pixel is 8-bit luminance\n    L8,\n\n    /// Pixel is 8-bit luminance with an alpha channel\n    La8,\n\n    /// Pixel contains 8-bit R, G and B channels\n    Rgb8,\n\n    /// Pixel is 8-bit RGB with an alpha channel\n    Rgba8,\n\n    /// Pixel is 16-bit luminance\n    L16,\n\n    /// Pixel is 16-bit luminance with an alpha channel\n    La16,\n\n    /// Pixel contains 16-bit R, G and B channels\n    Rgb16,\n\n    /// Pixel is 16-bit RGB with an alpha channel\n    Rgba16,\n\n    /// Pixel contains 8-bit B, G and R channels\n    Bgr8,\n\n    /// Pixel is 8-bit BGR with an alpha channel\n    Bgra8,\n\n    /// Pixel is of unknown color type with the specified bits per pixel. This can apply to pixels\n    /// which are associated with an external palette. In that case, the pixel value is an index\n    /// into the palette.\n    Unknown(u8),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3036},{"krate":0,"index":3038},{"krate":0,"index":3040},{"krate":0,"index":3042},{"krate":0,"index":3044},{"krate":0,"index":3046},{"krate":0,"index":3048},{"krate":0,"index":3050},{"krate":0,"index":3052},{"krate":0,"index":3054},{"krate":0,"index":3056},{"krate":0,"index":3058},{"krate":0,"index":3060},{"krate":0,"index":3062},{"krate":0,"index":3064},{"krate":0,"index":3066},{"krate":0,"index":3068},{"krate":0,"index":3070},{"krate":0,"index":3072},{"krate":0,"index":3074},{"krate":0,"index":3076},{"krate":0,"index":3078},{"krate":0,"index":3080},{"krate":0,"index":3083}],"decl_id":null,"docs":" An enumeration of color types encountered in image formats.","sig":null,"attributes":[{"value":"/ An enumeration of color types encountered in image formats.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409431,"byte_end":409494,"line_start":84,"line_end":84,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409495,"byte_end":409498,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is not exhaustive over all existing image formats but should be granular enough to allow","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409499,"byte_end":409596,"line_start":86,"line_end":86,"column_start":1,"column_end":98}},{"value":"/ round tripping of decoding and encoding as much as possible. The variants will be extended as","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409597,"byte_end":409694,"line_start":87,"line_end":87,"column_start":1,"column_end":98}},{"value":"/ necessary to enable this.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409695,"byte_end":409724,"line_start":88,"line_end":88,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409725,"byte_end":409728,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ Another purpose is to advise users of a rough estimate of the accuracy and effort of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409729,"byte_end":409821,"line_start":90,"line_end":90,"column_start":1,"column_end":93}},{"value":"/ decoding from and encoding to such an image format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":409822,"byte_end":409877,"line_start":91,"line_end":91,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411767,"byte_end":411780,"line_start":153,"line_end":153,"column_start":12,"column_end":25},"name":"channel_count","qualname":"<ExtendedColorType>::channel_count","value":"pub fn channel_count(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Get the number of channels for colors of this type.","sig":null,"attributes":[{"value":"/ Get the number of channels for colors of this type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411553,"byte_end":411608,"line_start":149,"line_end":149,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411613,"byte_end":411616,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Note that the `Unknown` variant returns a value of `1` since pixels can only be treated as","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411621,"byte_end":411715,"line_start":151,"line_end":151,"column_start":5,"column_end":99}},{"value":"/ an opaque datum by the library.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411720,"byte_end":411755,"line_start":152,"line_end":152,"column_start":5,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":3401},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418144,"byte_end":418147,"line_start":373,"line_end":373,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3430},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418224,"byte_end":418227,"line_start":374,"line_end":374,"column_start":5,"column_end":8},"name":"Bgr","qualname":"::color::Bgr","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3459},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418303,"byte_end":418307,"line_start":375,"line_end":375,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3488},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418384,"byte_end":418388,"line_start":376,"line_end":376,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"","parent":null,"children":[],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3517},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418484,"byte_end":418488,"line_start":377,"line_end":377,"column_start":5,"column_end":9},"name":"Bgra","qualname":"::color::Bgra","value":"","parent":null,"children":[],"decl_id":null,"docs":"BGR colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3546},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418583,"byte_end":418588,"line_start":378,"line_end":378,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"","parent":null,"children":[],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413894,"byte_end":413904,"line_start":215,"line_end":215,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":413905,"byte_end":413927,"line_start":216,"line_end":216,"column_start":1,"column_end":23}}]},{"kind":"Trait","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418755,"byte_end":418764,"line_start":382,"line_end":382,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1736}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418683,"byte_end":418744,"line_start":381,"line_end":381,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418854,"byte_end":418864,"line_start":384,"line_end":384,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1734},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418778,"byte_end":418846,"line_start":383,"line_end":383,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3627},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446783,"byte_end":446793,"line_start":42,"line_end":42,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446736,"byte_end":446778,"line_start":41,"line_end":41,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3630},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446869,"byte_end":446880,"line_start":45,"line_end":45,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446811,"byte_end":446864,"line_start":44,"line_end":44,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3633},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446949,"byte_end":446958,"line_start":48,"line_end":48,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446903,"byte_end":446944,"line_start":47,"line_end":47,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3636},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447032,"byte_end":447042,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446975,"byte_end":447027,"line_start":50,"line_end":50,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3639},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447106,"byte_end":447115,"line_start":54,"line_end":54,"column_start":5,"column_end":14},"name":"ImageBgr8","qualname":"::dynimage::DynamicImage::ImageBgr8","value":"DynamicImage::ImageBgr8(BgrImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447060,"byte_end":447101,"line_start":53,"line_end":53,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3642},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447189,"byte_end":447199,"line_start":57,"line_end":57,"column_start":5,"column_end":15},"name":"ImageBgra8","qualname":"::dynimage::DynamicImage::ImageBgra8","value":"DynamicImage::ImageBgra8(BgraImage)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Bgr with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Bgr with alpha","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447132,"byte_end":447184,"line_start":56,"line_end":56,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3645},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447265,"byte_end":447276,"line_start":60,"line_end":60,"column_start":5,"column_end":16},"name":"ImageLuma16","qualname":"::dynimage::DynamicImage::ImageLuma16","value":"DynamicImage::ImageLuma16(Gray16Image)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447217,"byte_end":447260,"line_start":59,"line_end":59,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3648},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447355,"byte_end":447367,"line_start":63,"line_end":63,"column_start":5,"column_end":17},"name":"ImageLumaA16","qualname":"::dynimage::DynamicImage::ImageLumaA16","value":"DynamicImage::ImageLumaA16(GrayAlpha16Image)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Luma with alpha","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447296,"byte_end":447350,"line_start":62,"line_end":62,"column_start":5,"column_end":59}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3651},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447439,"byte_end":447449,"line_start":66,"line_end":66,"column_start":5,"column_end":15},"name":"ImageRgb16","qualname":"::dynimage::DynamicImage::ImageRgb16","value":"DynamicImage::ImageRgb16(Rgb16Image)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447392,"byte_end":447434,"line_start":65,"line_end":65,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3654},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447526,"byte_end":447537,"line_start":69,"line_end":69,"column_start":5,"column_end":16},"name":"ImageRgba16","qualname":"::dynimage::DynamicImage::ImageRgba16","value":"DynamicImage::ImageRgba16(Rgba16Image)","parent":{"krate":0,"index":3626},"children":[],"decl_id":null,"docs":" Each pixel in this image is 16-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 16-bit Rgb with alpha","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":447468,"byte_end":447521,"line_start":68,"line_end":68,"column_start":5,"column_end":58}}]},{"kind":"Enum","id":{"krate":0,"index":3626},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446717,"byte_end":446729,"line_start":40,"line_end":40,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n\n    /// Each pixel in this image is 8-bit Bgr\n    ImageBgr8(BgrImage),\n\n    /// Each pixel in this image is 8-bit Bgr with alpha\n    ImageBgra8(BgraImage),\n\n    /// Each pixel in this image is 16-bit Luma\n    ImageLuma16(Gray16Image),\n\n    /// Each pixel in this image is 16-bit Luma with alpha\n    ImageLumaA16(GrayAlpha16Image),\n\n    /// Each pixel in this image is 16-bit Rgb\n    ImageRgb16(Rgb16Image),\n\n    /// Each pixel in this image is 16-bit Rgb with alpha\n    ImageRgba16(Rgba16Image),\n}","parent":null,"children":[{"krate":0,"index":3627},{"krate":0,"index":3630},{"krate":0,"index":3633},{"krate":0,"index":3636},{"krate":0,"index":3639},{"krate":0,"index":3642},{"krate":0,"index":3645},{"krate":0,"index":3648},{"krate":0,"index":3651},{"krate":0,"index":3654}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":446671,"byte_end":446690,"line_start":38,"line_end":38,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1954},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451752,"byte_end":451761,"line_start":136,"line_end":136,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451678,"byte_end":451740,"line_start":135,"line_end":135,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1955},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451964,"byte_end":451975,"line_start":142,"line_end":142,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451864,"byte_end":451918,"line_start":140,"line_end":140,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451923,"byte_end":451952,"line_start":141,"line_end":141,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1956},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452152,"byte_end":452160,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452079,"byte_end":452140,"line_start":146,"line_end":146,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1957},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452336,"byte_end":452345,"line_start":152,"line_end":152,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452262,"byte_end":452324,"line_start":151,"line_end":151,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1958},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452522,"byte_end":452531,"line_start":157,"line_end":157,"column_start":12,"column_end":21},"name":"new_bgra8","qualname":"<DynamicImage>::new_bgra8","value":"pub fn new_bgra8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGRA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGRA pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452448,"byte_end":452510,"line_start":156,"line_end":156,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1959},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452707,"byte_end":452715,"line_start":162,"line_end":162,"column_start":12,"column_end":20},"name":"new_bgr8","qualname":"<DynamicImage>::new_bgr8","value":"pub fn new_bgr8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of BGR pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of BGR pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452634,"byte_end":452695,"line_start":161,"line_end":161,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1960},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452891,"byte_end":452901,"line_start":167,"line_end":167,"column_start":12,"column_end":22},"name":"new_luma16","qualname":"<DynamicImage>::new_luma16","value":"pub fn new_luma16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":452817,"byte_end":452879,"line_start":166,"line_end":166,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1961},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453105,"byte_end":453117,"line_start":173,"line_end":173,"column_start":12,"column_end":24},"name":"new_luma_a16","qualname":"<DynamicImage>::new_luma_a16","value":"pub fn new_luma_a16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453005,"byte_end":453059,"line_start":171,"line_end":171,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453064,"byte_end":453093,"line_start":172,"line_end":172,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1962},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453295,"byte_end":453304,"line_start":178,"line_end":178,"column_start":12,"column_end":21},"name":"new_rgb16","qualname":"<DynamicImage>::new_rgb16","value":"pub fn new_rgb16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453222,"byte_end":453283,"line_start":177,"line_end":177,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1963},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453481,"byte_end":453491,"line_start":183,"line_end":183,"column_start":12,"column_end":22},"name":"new_rgba16","qualname":"<DynamicImage>::new_rgba16","value":"pub fn new_rgba16(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453407,"byte_end":453469,"line_start":182,"line_end":182,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1964},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453657,"byte_end":453669,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_decoder","qualname":"<DynamicImage>::from_decoder","value":"pub fn from_decoder<'a,\n                    impl ImageDecoder<'a>: ImageDecoder>(impl ImageDecoder<'a>)\n-> ImageResult<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decodes an encoded image into a dynamic image.\n","sig":null,"attributes":[{"value":"/ Decodes an encoded image into a dynamic image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453595,"byte_end":453645,"line_start":187,"line_end":187,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1967},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453847,"byte_end":453853,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453786,"byte_end":453835,"line_start":194,"line_end":194,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1968},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454022,"byte_end":454029,"line_start":202,"line_end":202,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":453960,"byte_end":454010,"line_start":201,"line_end":201,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1969},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454198,"byte_end":454204,"line_start":209,"line_end":209,"column_start":12,"column_end":18},"name":"to_bgr","qualname":"<DynamicImage>::to_bgr","value":"pub fn to_bgr(&Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGR image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGR image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454137,"byte_end":454186,"line_start":208,"line_end":208,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1970},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454373,"byte_end":454380,"line_start":216,"line_end":216,"column_start":12,"column_end":19},"name":"to_bgra","qualname":"<DynamicImage>::to_bgra","value":"pub fn to_bgra(&Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an BGRA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an BGRA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454311,"byte_end":454361,"line_start":215,"line_end":215,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1971},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454549,"byte_end":454556,"line_start":223,"line_end":223,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454488,"byte_end":454537,"line_start":222,"line_end":222,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1972},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454726,"byte_end":454739,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454664,"byte_end":454714,"line_start":229,"line_end":229,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1973},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455031,"byte_end":455039,"line_start":240,"line_end":240,"column_start":12,"column_end":20},"name":"into_rgb","qualname":"<DynamicImage>::into_rgb","value":"pub fn into_rgb(Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGB image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGB image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454852,"byte_end":454898,"line_start":236,"line_end":236,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454903,"byte_end":454906,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454911,"byte_end":454981,"line_start":238,"line_end":238,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":454986,"byte_end":455019,"line_start":239,"line_end":239,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455356,"byte_end":455365,"line_start":251,"line_end":251,"column_start":12,"column_end":21},"name":"into_rgba","qualname":"<DynamicImage>::into_rgba","value":"pub fn into_rgba(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a RGBA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a RGBA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455176,"byte_end":455223,"line_start":247,"line_end":247,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455228,"byte_end":455231,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455236,"byte_end":455306,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455311,"byte_end":455344,"line_start":250,"line_end":250,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455684,"byte_end":455692,"line_start":262,"line_end":262,"column_start":12,"column_end":20},"name":"into_bgr","qualname":"<DynamicImage>::into_bgr","value":"pub fn into_bgr(Self) -> BgrImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGR image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGR image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455505,"byte_end":455551,"line_start":258,"line_end":258,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455556,"byte_end":455559,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455564,"byte_end":455634,"line_start":260,"line_end":260,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455639,"byte_end":455672,"line_start":261,"line_end":261,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1976},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456009,"byte_end":456018,"line_start":273,"line_end":273,"column_start":12,"column_end":21},"name":"into_bgra","qualname":"<DynamicImage>::into_bgra","value":"pub fn into_bgra(Self) -> BgraImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a BGRA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a BGRA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455829,"byte_end":455876,"line_start":269,"line_end":269,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455881,"byte_end":455884,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455889,"byte_end":455959,"line_start":271,"line_end":271,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":455964,"byte_end":455997,"line_start":272,"line_end":272,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1977},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456338,"byte_end":456347,"line_start":284,"line_end":284,"column_start":12,"column_end":21},"name":"into_luma","qualname":"<DynamicImage>::into_luma","value":"pub fn into_luma(Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a Luma image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a Luma image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456158,"byte_end":456205,"line_start":280,"line_end":280,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456210,"byte_end":456213,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456218,"byte_end":456288,"line_start":282,"line_end":282,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456293,"byte_end":456326,"line_start":283,"line_end":283,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1978},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456668,"byte_end":456683,"line_start":295,"line_end":295,"column_start":12,"column_end":27},"name":"into_luma_alpha","qualname":"<DynamicImage>::into_luma_alpha","value":"pub fn into_luma_alpha(Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Consume the image and returns a LumaA image.","sig":null,"attributes":[{"value":"/ Consume the image and returns a LumaA image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456487,"byte_end":456535,"line_start":291,"line_end":291,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456540,"byte_end":456543,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ If the image was already the correct format, it is returned as is.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456548,"byte_end":456618,"line_start":293,"line_end":293,"column_start":5,"column_end":75}},{"value":"/ Otherwise, a copy is created.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456623,"byte_end":456656,"line_start":294,"line_end":294,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1979},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457065,"byte_end":457069,"line_start":306,"line_end":306,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456835,"byte_end":456906,"line_start":302,"line_end":302,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456911,"byte_end":456914,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ Note: this method does *not* modify the object,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456919,"byte_end":456970,"line_start":304,"line_end":304,"column_start":5,"column_end":56}},{"value":"/ and its signature will be replaced with `crop_imm()`'s in the 0.24 release","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":456975,"byte_end":457053,"line_start":305,"line_end":305,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1980},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457326,"byte_end":457334,"line_start":311,"line_end":311,"column_start":12,"column_end":20},"name":"crop_imm","qualname":"<DynamicImage>::crop_imm","value":"pub fn crop_imm(&Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut-out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut-out of this image delimited by the bounding rectangle.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457243,"byte_end":457314,"line_start":310,"line_end":310,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1981},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457559,"byte_end":457566,"line_start":316,"line_end":316,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457504,"byte_end":457547,"line_start":315,"line_end":315,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1982},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457781,"byte_end":457792,"line_start":324,"line_end":324,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457718,"byte_end":457769,"line_start":323,"line_end":323,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1983},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458011,"byte_end":458018,"line_start":332,"line_end":332,"column_start":12,"column_end":19},"name":"as_bgr8","qualname":"<DynamicImage>::as_bgr8","value":"pub fn as_bgr8(&Self) -> Option<&BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGR image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":457956,"byte_end":457999,"line_start":331,"line_end":331,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1984},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458233,"byte_end":458244,"line_start":340,"line_end":340,"column_start":12,"column_end":23},"name":"as_mut_bgr8","qualname":"<DynamicImage>::as_mut_bgr8","value":"pub fn as_mut_bgr8(&mut Self) -> Option<&mut BgrImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit BGR image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit BGR image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458170,"byte_end":458221,"line_start":339,"line_end":339,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1985},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458464,"byte_end":458472,"line_start":348,"line_end":348,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458408,"byte_end":458452,"line_start":347,"line_end":347,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1986},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458690,"byte_end":458702,"line_start":356,"line_end":356,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458626,"byte_end":458678,"line_start":355,"line_end":355,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1987},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458924,"byte_end":458932,"line_start":364,"line_end":364,"column_start":12,"column_end":20},"name":"as_bgra8","qualname":"<DynamicImage>::as_bgra8","value":"pub fn as_bgra8(&Self) -> Option<&BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit BGRA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit BGRA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":458868,"byte_end":458912,"line_start":363,"line_end":363,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1988},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459150,"byte_end":459162,"line_start":372,"line_end":372,"column_start":12,"column_end":24},"name":"as_mut_bgra8","qualname":"<DynamicImage>::as_mut_bgra8","value":"pub fn as_mut_bgra8(&mut Self) -> Option<&mut BgraImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459086,"byte_end":459138,"line_start":371,"line_end":371,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1989},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459389,"byte_end":459397,"line_start":380,"line_end":380,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459328,"byte_end":459377,"line_start":379,"line_end":379,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1990},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459620,"byte_end":459632,"line_start":388,"line_end":388,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459551,"byte_end":459608,"line_start":387,"line_end":387,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1991},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459881,"byte_end":459895,"line_start":396,"line_end":396,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":459798,"byte_end":459869,"line_start":395,"line_end":395,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1992},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460146,"byte_end":460164,"line_start":404,"line_end":404,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460055,"byte_end":460134,"line_start":403,"line_end":403,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1993},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460392,"byte_end":460400,"line_start":412,"line_end":412,"column_start":12,"column_end":20},"name":"as_rgb16","qualname":"<DynamicImage>::as_rgb16","value":"pub fn as_rgb16(&Self) -> Option<&Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGB image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460336,"byte_end":460380,"line_start":411,"line_end":411,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1994},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460619,"byte_end":460631,"line_start":420,"line_end":420,"column_start":12,"column_end":24},"name":"as_mut_rgb16","qualname":"<DynamicImage>::as_mut_rgb16","value":"pub fn as_mut_rgb16(&mut Self) -> Option<&mut Rgb16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGB image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460555,"byte_end":460607,"line_start":419,"line_end":419,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1995},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460855,"byte_end":460864,"line_start":428,"line_end":428,"column_start":12,"column_end":21},"name":"as_rgba16","qualname":"<DynamicImage>::as_rgba16","value":"pub fn as_rgba16(&Self) -> Option<&Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit RGBA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":460798,"byte_end":460843,"line_start":427,"line_end":427,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1996},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461086,"byte_end":461099,"line_start":436,"line_end":436,"column_start":12,"column_end":25},"name":"as_mut_rgba16","qualname":"<DynamicImage>::as_mut_rgba16","value":"pub fn as_mut_rgba16(&mut Self) -> Option<&mut Rgba16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit RGBA image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461021,"byte_end":461074,"line_start":435,"line_end":435,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1997},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461330,"byte_end":461339,"line_start":444,"line_end":444,"column_start":12,"column_end":21},"name":"as_luma16","qualname":"<DynamicImage>::as_luma16","value":"pub fn as_luma16(&Self) -> Option<&Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461268,"byte_end":461318,"line_start":443,"line_end":443,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1998},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461566,"byte_end":461579,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"as_mut_luma16","qualname":"<DynamicImage>::as_mut_luma16","value":"pub fn as_mut_luma16(&mut Self) -> Option<&mut Gray16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461496,"byte_end":461554,"line_start":451,"line_end":451,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1999},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461832,"byte_end":461847,"line_start":460,"line_end":460,"column_start":12,"column_end":27},"name":"as_luma_alpha16","qualname":"<DynamicImage>::as_luma_alpha16","value":"pub fn as_luma_alpha16(&Self) -> Option<&GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":461748,"byte_end":461820,"line_start":459,"line_end":459,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2000},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":462102,"byte_end":462121,"line_start":468,"line_end":468,"column_start":12,"column_end":31},"name":"as_mut_luma_alpha16","qualname":"<DynamicImage>::as_mut_luma_alpha16","value":"pub fn as_mut_luma_alpha16(&mut Self) -> Option<&mut GrayAlpha16Image>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 16bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 16bit Grayscale image with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":462010,"byte_end":462090,"line_start":467,"line_end":467,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":2001},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":462380,"byte_end":462398,"line_start":476,"line_end":476,"column_start":12,"column_end":30},"name":"as_flat_samples_u8","qualname":"<DynamicImage>::as_flat_samples_u8","value":"pub fn as_flat_samples_u8(&Self) -> Option<FlatSamples<&[u8]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 8 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 8 bit per channel images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":462296,"byte_end":462368,"line_start":475,"line_end":475,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2002},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":463032,"byte_end":463051,"line_start":489,"line_end":489,"column_start":12,"column_end":31},"name":"as_flat_samples_u16","qualname":"<DynamicImage>::as_flat_samples_u16","value":"pub fn as_flat_samples_u16(&Self) -> Option<FlatSamples<&[u16]>>","parent":null,"children":[],"decl_id":null,"docs":" Return a view on the raw sample buffer for 16 bit per channel images.\n","sig":null,"attributes":[{"value":"/ Return a view on the raw sample buffer for 16 bit per channel images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":462947,"byte_end":463020,"line_start":488,"line_end":488,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2003},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":463518,"byte_end":463526,"line_start":500,"line_end":500,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<DynamicImage>::to_bytes","value":"pub fn to_bytes(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":463458,"byte_end":463506,"line_start":499,"line_end":499,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2004},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":463634,"byte_end":463639,"line_start":505,"line_end":505,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":463587,"byte_end":463622,"line_start":504,"line_end":504,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2005},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":464443,"byte_end":464452,"line_start":521,"line_end":521,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":464386,"byte_end":464431,"line_start":520,"line_end":520,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2006},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465558,"byte_end":465564,"line_start":538,"line_end":538,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465472,"byte_end":465508,"line_start":536,"line_end":536,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465513,"byte_end":465546,"line_start":537,"line_end":537,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2007},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465928,"byte_end":465934,"line_start":546,"line_end":546,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465651,"byte_end":465710,"line_start":542,"line_end":542,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465715,"byte_end":465778,"line_start":543,"line_end":543,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465783,"byte_end":465845,"line_start":544,"line_end":544,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":465850,"byte_end":465916,"line_start":545,"line_end":545,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2008},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466398,"byte_end":466410,"line_start":556,"line_end":556,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466196,"byte_end":466255,"line_start":553,"line_end":553,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466260,"byte_end":466316,"line_start":554,"line_end":554,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466321,"byte_end":466386,"line_start":555,"line_end":555,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2009},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467101,"byte_end":467110,"line_start":573,"line_end":573,"column_start":12,"column_end":21},"name":"thumbnail","qualname":"<DynamicImage>::thumbnail","value":"pub fn thumbnail(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to fit within a specific size.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the bounds specified by ```nwidth``` and ```nheight```.","sig":null,"attributes":[{"value":"/ Scale this image down to fit within a specific size.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466626,"byte_end":466682,"line_start":565,"line_end":565,"column_start":5,"column_end":61}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466687,"byte_end":466750,"line_start":566,"line_end":566,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466755,"byte_end":466817,"line_start":567,"line_end":567,"column_start":5,"column_end":67}},{"value":"/ within the bounds specified by ```nwidth``` and ```nheight```.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466822,"byte_end":466888,"line_start":568,"line_end":568,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466893,"byte_end":466896,"line_start":569,"line_end":569,"column_start":5,"column_end":8}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466901,"byte_end":466964,"line_start":570,"line_end":570,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":466969,"byte_end":467019,"line_start":571,"line_end":571,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467024,"byte_end":467089,"line_start":572,"line_end":572,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2010},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467718,"byte_end":467733,"line_start":585,"line_end":585,"column_start":12,"column_end":27},"name":"thumbnail_exact","qualname":"<DynamicImage>::thumbnail_exact","value":"pub fn thumbnail_exact(&Self, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Scale this image down to a specific size.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions.\n This method uses a fast integer algorithm where each source\n pixel contributes to exactly one target pixel.\n May give aliasing artifacts if new size is close to old size.\n","sig":null,"attributes":[{"value":"/ Scale this image down to a specific size.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467336,"byte_end":467381,"line_start":579,"line_end":579,"column_start":5,"column_end":50}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467386,"byte_end":467442,"line_start":580,"line_end":580,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467447,"byte_end":467513,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ This method uses a fast integer algorithm where each source","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467518,"byte_end":467581,"line_start":582,"line_end":582,"column_start":5,"column_end":68}},{"value":"/ pixel contributes to exactly one target pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467586,"byte_end":467636,"line_start":583,"line_end":583,"column_start":5,"column_end":55}},{"value":"/ May give aliasing artifacts if new size is close to old size.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467641,"byte_end":467706,"line_start":584,"line_end":584,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2011},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468253,"byte_end":468267,"line_start":595,"line_end":595,"column_start":12,"column_end":26},"name":"resize_to_fill","qualname":"<DynamicImage>::resize_to_fill","value":"pub fn resize_to_fill(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n The image is scaled to the maximum possible size that fits\n within the larger (relative to aspect ratio) of the bounds\n specified by ```nwidth``` and ```nheight```, then cropped to\n fit within the other bound.\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467875,"byte_end":467934,"line_start":589,"line_end":589,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":467939,"byte_end":468002,"line_start":590,"line_end":590,"column_start":5,"column_end":68}},{"value":"/ The image is scaled to the maximum possible size that fits","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468007,"byte_end":468069,"line_start":591,"line_end":591,"column_start":5,"column_end":67}},{"value":"/ within the larger (relative to aspect ratio) of the bounds","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468074,"byte_end":468136,"line_start":592,"line_end":592,"column_start":5,"column_end":67}},{"value":"/ specified by ```nwidth``` and ```nheight```, then cropped to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468141,"byte_end":468205,"line_start":593,"line_end":593,"column_start":5,"column_end":69}},{"value":"/ fit within the other bound.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468210,"byte_end":468241,"line_start":594,"line_end":594,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2012},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469087,"byte_end":469091,"line_start":618,"line_end":618,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":468975,"byte_end":469018,"line_start":616,"line_end":616,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469023,"byte_end":469075,"line_start":617,"line_end":617,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2013},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469469,"byte_end":469478,"line_start":627,"line_end":627,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469203,"byte_end":469248,"line_start":622,"line_end":622,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469253,"byte_end":469304,"line_start":623,"line_end":623,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469309,"byte_end":469365,"line_start":624,"line_end":624,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469370,"byte_end":469373,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ See <https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking>","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469378,"byte_end":469457,"line_start":626,"line_end":626,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":2014},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469687,"byte_end":469696,"line_start":632,"line_end":632,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469622,"byte_end":469675,"line_start":631,"line_end":631,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":2015},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470106,"byte_end":470121,"line_start":643,"line_end":643,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469903,"byte_end":469941,"line_start":640,"line_end":640,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":469946,"byte_end":470005,"line_start":641,"line_end":641,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470010,"byte_end":470094,"line_start":642,"line_end":642,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":2016},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470421,"byte_end":470429,"line_start":650,"line_end":650,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470229,"byte_end":470267,"line_start":647,"line_end":647,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470272,"byte_end":470328,"line_start":648,"line_end":648,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470333,"byte_end":470409,"line_start":649,"line_end":649,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":2017},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470777,"byte_end":470786,"line_start":658,"line_end":658,"column_start":12,"column_end":21},"name":"huerotate","qualname":"<DynamicImage>::huerotate","value":"pub fn huerotate(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Hue rotate the supplied image.\n `value` is the degrees to rotate each pixel by.\n 0 and 360 do nothing, the rest rotates by the given degree value.\n just like the css webkit filter hue-rotate(180)\n","sig":null,"attributes":[{"value":"/ Hue rotate the supplied image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470545,"byte_end":470579,"line_start":654,"line_end":654,"column_start":5,"column_end":39}},{"value":"/ `value` is the degrees to rotate each pixel by.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470584,"byte_end":470635,"line_start":655,"line_end":655,"column_start":5,"column_end":56}},{"value":"/ 0 and 360 do nothing, the rest rotates by the given degree value.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470640,"byte_end":470709,"line_start":656,"line_end":656,"column_start":5,"column_end":74}},{"value":"/ just like the css webkit filter hue-rotate(180)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470714,"byte_end":470765,"line_start":657,"line_end":657,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2018},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470945,"byte_end":470950,"line_start":663,"line_end":663,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":470903,"byte_end":470933,"line_start":662,"line_end":662,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2019},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471096,"byte_end":471101,"line_start":668,"line_end":668,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471052,"byte_end":471084,"line_start":667,"line_end":667,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2020},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471260,"byte_end":471268,"line_start":673,"line_end":673,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471205,"byte_end":471248,"line_start":672,"line_end":672,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2021},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471421,"byte_end":471430,"line_start":678,"line_end":678,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471365,"byte_end":471409,"line_start":677,"line_end":677,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2022},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471584,"byte_end":471593,"line_start":683,"line_end":683,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471528,"byte_end":471572,"line_start":682,"line_end":682,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2023},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471748,"byte_end":471756,"line_start":688,"line_end":688,"column_start":12,"column_end":20},"name":"write_to","qualname":"<DynamicImage>::write_to","value":"pub fn write_to<W: Write, F: Into<ImageOutputFormat>>(&Self, &mut W, F)\n-> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":471691,"byte_end":471736,"line_start":687,"line_end":687,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2026},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475668,"byte_end":475672,"line_start":792,"line_end":792,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<Q>(&Self, Q) -> ImageResult<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475534,"byte_end":475587,"line_start":789,"line_end":789,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475592,"byte_end":475595,"line_start":790,"line_end":790,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475600,"byte_end":475656,"line_start":791,"line_end":791,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2028},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476044,"byte_end":476060,"line_start":806,"line_end":806,"column_start":12,"column_end":28},"name":"save_with_format","qualname":"<DynamicImage>::save_with_format","value":"pub fn save_with_format<Q>(&Self, Q, ImageFormat) -> ImageResult<()> where\nQ: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the specified path in\n the specified format.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the specified path in","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475837,"byte_end":475892,"line_start":801,"line_end":801,"column_start":5,"column_end":60}},{"value":"/ the specified format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475897,"byte_end":475922,"line_start":802,"line_end":802,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475927,"byte_end":475930,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ See [`save_buffer_with_format`](fn.save_buffer_with_format.html) for","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":475935,"byte_end":476007,"line_start":804,"line_end":804,"column_start":5,"column_end":77}},{"value":"/ supported types.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476012,"byte_end":476032,"line_start":805,"line_end":805,"column_start":5,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":2048},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482922,"byte_end":482926,"line_start":984,"line_end":984,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482620,"byte_end":482669,"line_start":977,"line_end":977,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482670,"byte_end":482738,"line_start":978,"line_end":978,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482739,"byte_end":482742,"line_start":979,"line_end":979,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482743,"byte_end":482839,"line_start":980,"line_end":980,"column_start":1,"column_end":97}},{"value":"/ content before its path.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482840,"byte_end":482868,"line_start":981,"line_end":981,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482869,"byte_end":482872,"line_start":982,"line_end":982,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":482873,"byte_end":482914,"line_start":983,"line_end":983,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2050},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483481,"byte_end":483497,"line_start":999,"line_end":999,"column_start":8,"column_end":24},"name":"image_dimensions","qualname":"::dynimage::image_dimensions","value":"pub fn image_dimensions<P>(P) -> ImageResult<(u32, u32)> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Read the dimensions of the image located at the specified path.\n This is faster than fully loading the image and then getting its dimensions.","sig":null,"attributes":[{"value":"/ Read the dimensions of the image located at the specified path.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483116,"byte_end":483183,"line_start":992,"line_end":992,"column_start":1,"column_end":68}},{"value":"/ This is faster than fully loading the image and then getting its dimensions.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483184,"byte_end":483264,"line_start":993,"line_end":993,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483265,"byte_end":483268,"line_start":994,"line_end":994,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses, including guessing the format based on the file's","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483269,"byte_end":483365,"line_start":995,"line_end":995,"column_start":1,"column_end":97}},{"value":"/ content before its path or manually supplying the format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483366,"byte_end":483427,"line_start":996,"line_end":996,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483428,"byte_end":483431,"line_start":997,"line_end":997,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483432,"byte_end":483473,"line_start":998,"line_end":998,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2052},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484072,"byte_end":484083,"line_start":1014,"line_end":1014,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> ImageResult<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483697,"byte_end":483759,"line_start":1007,"line_end":1007,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483760,"byte_end":483763,"line_start":1008,"line_end":1008,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483764,"byte_end":483850,"line_start":1009,"line_end":1009,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483851,"byte_end":483912,"line_start":1010,"line_end":1010,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":483914,"byte_end":484005,"line_start":1012,"line_end":1012,"column_start":1,"column_end":92}},{"value":"/ jpeg, png, ico, pnm, bmp and tiff files are supported.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484006,"byte_end":484064,"line_start":1013,"line_end":1013,"column_start":1,"column_end":59}}]},{"kind":"Function","id":{"krate":0,"index":2054},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484737,"byte_end":484760,"line_start":1036,"line_end":1036,"column_start":8,"column_end":31},"name":"save_buffer_with_format","qualname":"::dynimage::save_buffer_with_format","value":"pub fn save_buffer_with_format<P>(P, &[u8], u32, u32, color::ColorType,\n                                  ImageFormat) -> ImageResult<()> where\nP: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified\n in the specified format.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484389,"byte_end":484450,"line_start":1028,"line_end":1028,"column_start":1,"column_end":62}},{"value":"/ in the specified format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484451,"byte_end":484479,"line_start":1029,"line_end":1029,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484480,"byte_end":484483,"line_start":1030,"line_end":1030,"column_start":1,"column_end":4}},{"value":"/ The buffer is assumed to have the correct format according","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484484,"byte_end":484546,"line_start":1031,"line_end":1031,"column_start":1,"column_end":63}},{"value":"/ to the specified color type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484547,"byte_end":484579,"line_start":1032,"line_end":1032,"column_start":1,"column_end":33}},{"value":"/ This will lead to corrupted files if the buffer contains","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484580,"byte_end":484640,"line_start":1033,"line_end":1033,"column_start":1,"column_end":61}},{"value":"/ malformed data. Currently only jpeg, png, ico, bmp and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484641,"byte_end":484699,"line_start":1034,"line_end":1034,"column_start":1,"column_end":59}},{"value":"/ tiff files are supported.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":484700,"byte_end":484729,"line_start":1035,"line_end":1035,"column_start":1,"column_end":30}}]},{"kind":"Function","id":{"krate":0,"index":2056},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485323,"byte_end":485339,"line_start":1059,"line_end":1059,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485079,"byte_end":485119,"line_start":1051,"line_end":1051,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485120,"byte_end":485123,"line_start":1052,"line_end":1052,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485124,"byte_end":485175,"line_start":1053,"line_end":1053,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485176,"byte_end":485218,"line_start":1054,"line_end":1054,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485219,"byte_end":485222,"line_start":1055,"line_end":1055,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485223,"byte_end":485269,"line_start":1056,"line_end":1056,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485270,"byte_end":485273,"line_start":1057,"line_end":1057,"column_start":1,"column_end":4}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485274,"byte_end":485315,"line_start":1058,"line_end":1058,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":2057},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485821,"byte_end":485849,"line_start":1074,"line_end":1074,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485494,"byte_end":485534,"line_start":1064,"line_end":1064,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485535,"byte_end":485538,"line_start":1065,"line_end":1065,"column_start":1,"column_end":4}},{"value":"/ This is just a simple wrapper that constructs an `std::io::Cursor` around the buffer and then","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485539,"byte_end":485636,"line_start":1066,"line_end":1066,"column_start":1,"column_end":98}},{"value":"/ calls `load` with that reader.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485637,"byte_end":485671,"line_start":1067,"line_end":1067,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485672,"byte_end":485675,"line_start":1068,"line_end":1068,"column_start":1,"column_end":4}},{"value":"/ Try [`io::Reader`] for more advanced uses.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485676,"byte_end":485722,"line_start":1069,"line_end":1069,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485723,"byte_end":485726,"line_start":1070,"line_end":1070,"column_start":1,"column_end":4}},{"value":"/ [`load`]: fn.load.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485727,"byte_end":485753,"line_start":1071,"line_end":1071,"column_start":1,"column_end":27}},{"value":"/ [`io::Reader`]: io/struct.Reader.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485754,"byte_end":485795,"line_start":1072,"line_end":1072,"column_start":1,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":485796,"byte_end":485813,"line_start":1073,"line_end":1073,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3660},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490572,"byte_end":490575,"line_start":25,"line_end":25,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageFormat::Png","value":"ImageFormat::Png","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490541,"byte_end":490567,"line_start":24,"line_end":24,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3662},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490614,"byte_end":490618,"line_start":28,"line_end":28,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageFormat::Jpeg","value":"ImageFormat::Jpeg","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490582,"byte_end":490609,"line_start":27,"line_end":27,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3664},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490656,"byte_end":490659,"line_start":31,"line_end":31,"column_start":5,"column_end":8},"name":"Gif","qualname":"::image::ImageFormat::Gif","value":"ImageFormat::Gif","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490625,"byte_end":490651,"line_start":30,"line_end":30,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3666},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490698,"byte_end":490702,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"name":"WebP","qualname":"::image::ImageFormat::WebP","value":"ImageFormat::WebP","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490666,"byte_end":490693,"line_start":33,"line_end":33,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3668},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490748,"byte_end":490751,"line_start":37,"line_end":37,"column_start":5,"column_end":8},"name":"Pnm","qualname":"::image::ImageFormat::Pnm","value":"ImageFormat::Pnm","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in general PNM Format\n","sig":null,"attributes":[{"value":"/ An Image in general PNM Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490709,"byte_end":490743,"line_start":36,"line_end":36,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3670},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490790,"byte_end":490794,"line_start":40,"line_end":40,"column_start":5,"column_end":9},"name":"Tiff","qualname":"::image::ImageFormat::Tiff","value":"ImageFormat::Tiff","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490758,"byte_end":490785,"line_start":39,"line_end":39,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3672},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490832,"byte_end":490835,"line_start":43,"line_end":43,"column_start":5,"column_end":8},"name":"Tga","qualname":"::image::ImageFormat::Tga","value":"ImageFormat::Tga","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490801,"byte_end":490827,"line_start":42,"line_end":42,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3674},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490873,"byte_end":490876,"line_start":46,"line_end":46,"column_start":5,"column_end":8},"name":"Dds","qualname":"::image::ImageFormat::Dds","value":"ImageFormat::Dds","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in DDS Format\n","sig":null,"attributes":[{"value":"/ An Image in DDS Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490842,"byte_end":490868,"line_start":45,"line_end":45,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3676},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490914,"byte_end":490917,"line_start":49,"line_end":49,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageFormat::Bmp","value":"ImageFormat::Bmp","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490883,"byte_end":490909,"line_start":48,"line_end":48,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3678},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490955,"byte_end":490958,"line_start":52,"line_end":52,"column_start":5,"column_end":8},"name":"Ico","qualname":"::image::ImageFormat::Ico","value":"ImageFormat::Ico","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490924,"byte_end":490950,"line_start":51,"line_end":51,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3680},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491005,"byte_end":491008,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"name":"Hdr","qualname":"::image::ImageFormat::Hdr","value":"ImageFormat::Hdr","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in Radiance HDR Format\n","sig":null,"attributes":[{"value":"/ An Image in Radiance HDR Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490965,"byte_end":491000,"line_start":54,"line_end":54,"column_start":5,"column_end":40}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3682},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491051,"byte_end":491059,"line_start":58,"line_end":58,"column_start":5,"column_end":13},"name":"Farbfeld","qualname":"::image::ImageFormat::Farbfeld","value":"ImageFormat::Farbfeld","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in farbfeld Format\n","sig":null,"attributes":[{"value":"/ An Image in farbfeld Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491015,"byte_end":491046,"line_start":57,"line_end":57,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3684},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491099,"byte_end":491103,"line_start":61,"line_end":61,"column_start":5,"column_end":9},"name":"Avif","qualname":"::image::ImageFormat::Avif","value":"ImageFormat::Avif","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":" An Image in AVIF format.\n","sig":null,"attributes":[{"value":"/ An Image in AVIF format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491066,"byte_end":491094,"line_start":60,"line_end":60,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3686},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491129,"byte_end":491144,"line_start":64,"line_end":64,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageFormat::__NonExhaustive","value":"ImageFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3659},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3659},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490523,"byte_end":490534,"line_start":23,"line_end":23,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    Png,\n\n    /// An Image in JPEG Format\n    Jpeg,\n\n    /// An Image in GIF Format\n    Gif,\n\n    /// An Image in WEBP Format\n    WebP,\n\n    /// An Image in general PNM Format\n    Pnm,\n\n    /// An Image in TIFF Format\n    Tiff,\n\n    /// An Image in TGA Format\n    Tga,\n\n    /// An Image in DDS Format\n    Dds,\n\n    /// An Image in BMP Format\n    Bmp,\n\n    /// An Image in ICO Format\n    Ico,\n\n    /// An Image in Radiance HDR Format\n    Hdr,\n\n    /// An Image in farbfeld Format\n    Farbfeld,\n\n    /// An Image in AVIF format.\n    Avif,\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3660},{"krate":0,"index":3662},{"krate":0,"index":3664},{"krate":0,"index":3666},{"krate":0,"index":3668},{"krate":0,"index":3670},{"krate":0,"index":3672},{"krate":0,"index":3674},{"krate":0,"index":3676},{"krate":0,"index":3678},{"krate":0,"index":3680},{"krate":0,"index":3682},{"krate":0,"index":3684},{"krate":0,"index":3686}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490360,"byte_end":490406,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":490407,"byte_end":490462,"line_start":21,"line_end":21,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491286,"byte_end":491295,"line_start":69,"line_end":69,"column_start":12,"column_end":21},"name":"from_path","qualname":"<ImageFormat>::from_path","value":"pub fn from_path<P>(P) -> ImageResult<Self> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Return the image format specified by the path's file extension.\n","sig":null,"attributes":[{"value":"/ Return the image format specified by the path's file extension.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491207,"byte_end":491274,"line_start":68,"line_end":68,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2085},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":492146,"byte_end":492160,"line_start":84,"line_end":84,"column_start":12,"column_end":26},"name":"extensions_str","qualname":"<ImageFormat>::extensions_str","value":"pub fn extensions_str(Self) -> &'static [&'static str]","parent":null,"children":[],"decl_id":null,"docs":" Return a list of applicable extensions for this format.","sig":null,"attributes":[{"value":"/ Return a list of applicable extensions for this format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491556,"byte_end":491615,"line_start":75,"line_end":75,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491620,"byte_end":491623,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ All currently recognized image formats specify at least on extension but for future","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491628,"byte_end":491715,"line_start":77,"line_end":77,"column_start":5,"column_end":92}},{"value":"/ compatibility you should not rely on this fact. The list may be empty if the format has no","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491720,"byte_end":491814,"line_start":78,"line_end":78,"column_start":5,"column_end":99}},{"value":"/ recognized file representation, for example in case it is used as a purely transient memory","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491819,"byte_end":491914,"line_start":79,"line_end":79,"column_start":5,"column_end":100}},{"value":"/ format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491919,"byte_end":491930,"line_start":80,"line_end":80,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491935,"byte_end":491938,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ The method name `extensions` remains reserved for introducing another method in the future","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491943,"byte_end":492037,"line_start":82,"line_end":82,"column_start":5,"column_end":99}},{"value":"/ that yields a slice of `OsStr` which is blocked by several features of const evaluation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":492042,"byte_end":492134,"line_start":83,"line_end":83,"column_start":5,"column_end":97}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3705},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493210,"byte_end":493213,"line_start":110,"line_end":110,"column_start":5,"column_end":8},"name":"Png","qualname":"::image::ImageOutputFormat::Png","value":"ImageOutputFormat::Png","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"png\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493151,"byte_end":493174,"line_start":108,"line_end":108,"column_start":5,"column_end":28}},{"value":"/ An Image in PNG Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493179,"byte_end":493205,"line_start":109,"line_end":109,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3707},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493304,"byte_end":493308,"line_start":114,"line_end":114,"column_start":5,"column_end":9},"name":"Jpeg","qualname":"::image::ImageOutputFormat::Jpeg","value":"ImageOutputFormat::Jpeg(u8)","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":" An Image in JPEG Format with specified quality\n","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493220,"byte_end":493244,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"/ An Image in JPEG Format with specified quality","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493249,"byte_end":493299,"line_start":113,"line_end":113,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3710},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493609,"byte_end":493612,"line_start":130,"line_end":130,"column_start":5,"column_end":8},"name":"Bmp","qualname":"::image::ImageOutputFormat::Bmp","value":"ImageOutputFormat::Bmp","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493550,"byte_end":493573,"line_start":128,"line_end":128,"column_start":5,"column_end":28}},{"value":"/ An Image in BMP Format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493578,"byte_end":493604,"line_start":129,"line_end":129,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3712},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":494017,"byte_end":494028,"line_start":143,"line_end":143,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::image::ImageOutputFormat::Unsupported","value":"ImageOutputFormat::Unsupported(String)","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":" A value for signalling an error: An unsupported format was requested\n","sig":null,"attributes":[{"value":"/ A value for signalling an error: An unsupported format was requested","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493772,"byte_end":493844,"line_start":140,"line_end":140,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3715},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":494062,"byte_end":494077,"line_start":146,"line_end":146,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::image::ImageOutputFormat::__NonExhaustive","value":"ImageOutputFormat::__NonExhaustive(crate::utils::NonExhaustiveMarker)","parent":{"krate":0,"index":3704},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3704},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493127,"byte_end":493144,"line_start":107,"line_end":107,"column_start":10,"column_end":27},"name":"ImageOutputFormat","qualname":"::image::ImageOutputFormat","value":"pub enum ImageOutputFormat {\n\n    #[cfg(feature = \"png\")]\n    /// An Image in PNG Format\n    Png,\n\n    #[cfg(feature = \"jpeg\")]\n    /// An Image in JPEG Format with specified quality\n    Jpeg(u8),\n\n    #[cfg(feature = \"bmp\")]\n    /// An Image in BMP Format\n    Bmp,\n\n    /// A value for signalling an error: An unsupported format was requested\n    Unsupported(String),\n\n    #[doc(hidden)]\n    __NonExhaustive(crate::utils::NonExhaustiveMarker),\n}","parent":null,"children":[{"krate":0,"index":3705},{"krate":0,"index":3707},{"krate":0,"index":3710},{"krate":0,"index":3712},{"krate":0,"index":3715}],"decl_id":null,"docs":" An enumeration of supported image formats for encoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats for encoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":493019,"byte_end":493078,"line_start":105,"line_end":105,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":3729},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503293,"byte_end":503301,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"Progress","qualname":"::image::Progress","value":"Progress {  }","parent":null,"children":[{"krate":0,"index":3730},{"krate":0,"index":3731}],"decl_id":null,"docs":" Represents the progress of an image operation.","sig":null,"attributes":[{"value":"/ Represents the progress of an image operation.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":502889,"byte_end":502939,"line_start":359,"line_end":359,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":502940,"byte_end":502943,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ Note that this is not necessarily accurate and no change to the values passed to the progress","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":502944,"byte_end":503041,"line_start":361,"line_end":361,"column_start":1,"column_end":98}},{"value":"/ function during decoding will be considered breaking. A decoder could in theory report the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503042,"byte_end":503136,"line_start":362,"line_end":362,"column_start":1,"column_end":95}},{"value":"/ progress `(0, 0)` if progress is unknown, without violating the interface contract of the type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503137,"byte_end":503236,"line_start":363,"line_end":363,"column_start":1,"column_end":100}}]},{"kind":"Method","id":{"krate":0,"index":2111},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503409,"byte_end":503416,"line_start":372,"line_end":372,"column_start":12,"column_end":19},"name":"current","qualname":"<Progress>::current","value":"pub fn current(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of completed decoding.\n","sig":null,"attributes":[{"value":"/ A measure of completed decoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503361,"byte_end":503397,"line_start":371,"line_end":371,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2112},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503589,"byte_end":503594,"line_start":379,"line_end":379,"column_start":12,"column_end":17},"name":"total","qualname":"<Progress>::total","value":"pub fn total(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" A measure of all necessary decoding work.","sig":null,"attributes":[{"value":"/ A measure of all necessary decoding work.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503464,"byte_end":503509,"line_start":376,"line_end":376,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503514,"byte_end":503517,"line_start":377,"line_end":377,"column_start":5,"column_end":8}},{"value":"/ This is in general greater or equal than `current`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503522,"byte_end":503577,"line_start":378,"line_end":378,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503704,"byte_end":503713,"line_start":384,"line_end":384,"column_start":12,"column_end":21},"name":"remaining","qualname":"<Progress>::remaining","value":"pub fn remaining(Self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Calculate a measure for remaining decoding work.\n","sig":null,"attributes":[{"value":"/ Calculate a measure for remaining decoding work.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503640,"byte_end":503692,"line_start":383,"line_end":383,"column_start":5,"column_end":57}}]},{"kind":"Trait","id":{"krate":0,"index":2114},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503842,"byte_end":503854,"line_start":390,"line_end":390,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder<'a>: Sized","parent":null,"children":[{"krate":0,"index":2116},{"krate":0,"index":2117},{"krate":0,"index":2118},{"krate":0,"index":2119},{"krate":0,"index":2120},{"krate":0,"index":2121},{"krate":0,"index":2122},{"krate":0,"index":2123},{"krate":0,"index":2125}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503790,"byte_end":503831,"line_start":389,"line_end":389,"column_start":1,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503931,"byte_end":503937,"line_start":392,"line_end":392,"column_start":10,"column_end":16},"name":"Reader","qualname":"::image::ImageDecoder::Reader","value":"type Reader: Read + 'a;","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" The type of reader produced by `into_reader`.\n","sig":null,"attributes":[{"value":"/ The type of reader produced by `into_reader`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503872,"byte_end":503921,"line_start":391,"line_end":391,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2117},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504027,"byte_end":504037,"line_start":395,"line_end":395,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503955,"byte_end":504019,"line_start":394,"line_end":394,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2118},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504142,"byte_end":504152,"line_start":398,"line_end":398,"column_start":8,"column_end":18},"name":"color_type","qualname":"::image::ImageDecoder::color_type","value":"pub fn color_type(&Self) -> ColorType","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns the color type of the image data produced by this decoder\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image data produced by this decoder","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504065,"byte_end":504134,"line_start":397,"line_end":397,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":2119},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504246,"byte_end":504265,"line_start":401,"line_end":401,"column_start":8,"column_end":27},"name":"original_color_type","qualname":"::image::ImageDecoder::original_color_type","value":"pub fn original_color_type(&Self) -> ExtendedColorType","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Retuns the color type of the image file before decoding\n","sig":null,"attributes":[{"value":"/ Retuns the color type of the image file before decoding","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504179,"byte_end":504238,"line_start":400,"line_end":400,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2120},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504606,"byte_end":504617,"line_start":408,"line_end":408,"column_start":8,"column_end":19},"name":"into_reader","qualname":"::image::ImageDecoder::into_reader","value":"pub fn into_reader(Self) -> ImageResult<Self::Reader>","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns a reader that can be used to obtain the bytes of the image. For the best\n performance, always try to read at least `scanline_bytes` from the reader at a time. Reading\n fewer bytes will cause the reader to perform internal buffering.\n","sig":null,"attributes":[{"value":"/ Returns a reader that can be used to obtain the bytes of the image. For the best","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504340,"byte_end":504424,"line_start":405,"line_end":405,"column_start":5,"column_end":89}},{"value":"/ performance, always try to read at least `scanline_bytes` from the reader at a time. Reading","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504429,"byte_end":504525,"line_start":406,"line_end":406,"column_start":5,"column_end":101}},{"value":"/ fewer bytes will cause the reader to perform internal buffering.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504530,"byte_end":504598,"line_start":407,"line_end":407,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2121},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505004,"byte_end":505015,"line_start":416,"line_end":416,"column_start":8,"column_end":19},"name":"total_bytes","qualname":"::image::ImageDecoder::total_bytes","value":"pub fn total_bytes(&Self) -> u64","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns the total number of bytes in the decoded image.","sig":null,"attributes":[{"value":"/ Returns the total number of bytes in the decoded image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504659,"byte_end":504718,"line_start":410,"line_end":410,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504723,"byte_end":504726,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ This is the size of the buffer that must be passed to `read_image` or","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504731,"byte_end":504804,"line_start":412,"line_end":412,"column_start":5,"column_end":78}},{"value":"/ `read_image_with_progress`. The returned value may exceed usize::MAX, in","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504809,"byte_end":504885,"line_start":413,"line_end":413,"column_start":5,"column_end":81}},{"value":"/ which case it isn't actually possible to construct a buffer to decode all the image data","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504890,"byte_end":504982,"line_start":414,"line_end":414,"column_start":5,"column_end":97}},{"value":"/ into.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":504987,"byte_end":504996,"line_start":415,"line_end":415,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2122},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505352,"byte_end":505366,"line_start":423,"line_end":423,"column_start":8,"column_end":22},"name":"scanline_bytes","qualname":"::image::ImageDecoder::scanline_bytes","value":"pub fn scanline_bytes(&Self) -> u64","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns the minimum number of bytes that can be efficiently read from this decoder. This may\n be as few as 1 or as many as `total_bytes()`.\n","sig":null,"attributes":[{"value":"/ Returns the minimum number of bytes that can be efficiently read from this decoder. This may","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505194,"byte_end":505290,"line_start":421,"line_end":421,"column_start":5,"column_end":101}},{"value":"/ be as few as 1 or as many as `total_bytes()`.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505295,"byte_end":505344,"line_start":422,"line_end":422,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2123},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506255,"byte_end":506265,"line_start":447,"line_end":447,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(Self, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Returns all the bytes in the image.","sig":null,"attributes":[{"value":"/ Returns all the bytes in the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505421,"byte_end":505460,"line_start":427,"line_end":427,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505465,"byte_end":505468,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes and writes the pixel data of the image into it.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505473,"byte_end":505561,"line_start":429,"line_end":429,"column_start":5,"column_end":93}},{"value":"/ Although not required, for certain color types callers may want to pass buffers which are","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505566,"byte_end":505659,"line_start":430,"line_end":430,"column_start":5,"column_end":98}},{"value":"/ aligned to 2 or 4 byte boundaries to the slice can be cast to a [u16] or [u32]. To accommodate","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505664,"byte_end":505762,"line_start":431,"line_end":431,"column_start":5,"column_end":103}},{"value":"/ such casts, the returned contents will always be in native endian.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505767,"byte_end":505837,"line_start":432,"line_end":432,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505842,"byte_end":505845,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505850,"byte_end":505862,"line_start":434,"line_end":434,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505867,"byte_end":505870,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ This function panics if buf.len() != self.total_bytes().","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505875,"byte_end":505935,"line_start":436,"line_end":436,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505940,"byte_end":505943,"line_start":437,"line_end":437,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505948,"byte_end":505962,"line_start":438,"line_end":438,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505967,"byte_end":505970,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ ```no_build","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505975,"byte_end":505990,"line_start":440,"line_end":440,"column_start":5,"column_end":20}},{"value":"/ use zerocopy::{AsBytes, FromBytes};","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":505995,"byte_end":506034,"line_start":441,"line_end":441,"column_start":5,"column_end":44}},{"value":"/ fn read_16bit_image(decoder: impl ImageDecoder) -> Vec<16> {","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506039,"byte_end":506103,"line_start":442,"line_end":442,"column_start":5,"column_end":69}},{"value":"/     let mut buf: Vec<u16> = vec![0; decoder.total_bytes()/2];","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506108,"byte_end":506173,"line_start":443,"line_end":443,"column_start":5,"column_end":70}},{"value":"/     decoder.read_image(buf.as_bytes());","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506178,"byte_end":506221,"line_start":444,"line_end":444,"column_start":5,"column_end":48}},{"value":"/     buf","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506226,"byte_end":506237,"line_start":445,"line_end":445,"column_start":5,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506242,"byte_end":506247,"line_start":446,"line_end":446,"column_start":5,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":2125},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506493,"byte_end":506517,"line_start":453,"line_end":453,"column_start":8,"column_end":32},"name":"read_image_with_progress","qualname":"::image::ImageDecoder::read_image_with_progress","value":"pub fn read_image_with_progress<F: Fn(Progress) -> ()>(Self, &mut [u8], F)\n-> ImageResult<()>","parent":{"krate":0,"index":2114},"children":[],"decl_id":null,"docs":" Same as `read_image` but periodically calls the provided callback to give updates on loading\n progress.\n","sig":null,"attributes":[{"value":"/ Same as `read_image` but periodically calls the provided callback to give updates on loading","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506371,"byte_end":506467,"line_start":451,"line_end":451,"column_start":5,"column_end":101}},{"value":"/ progress.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":506472,"byte_end":506485,"line_start":452,"line_end":452,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":2127},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507540,"byte_end":507555,"line_start":487,"line_end":487,"column_start":11,"column_end":26},"name":"ImageDecoderExt","qualname":"::image::ImageDecoderExt","value":"ImageDecoderExt<'a>: ImageDecoder + Sized","parent":null,"children":[{"krate":0,"index":2129},{"krate":0,"index":2131}],"decl_id":null,"docs":" Specialized image decoding not be supported by all formats\n","sig":null,"attributes":[{"value":"/ Specialized image decoding not be supported by all formats","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507467,"byte_end":507529,"line_start":486,"line_end":486,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507710,"byte_end":507719,"line_start":489,"line_end":489,"column_start":8,"column_end":17},"name":"read_rect","qualname":"::image::ImageDecoderExt::read_rect","value":"pub fn read_rect(&mut Self, u32, u32, u32, u32, &mut [u8]) -> ImageResult<()>","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).\n","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image; see [`read_rect_with_progress()`](#fn.read_rect_with_progress).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507592,"byte_end":507702,"line_start":488,"line_end":488,"column_start":5,"column_end":115}}]},{"kind":"Method","id":{"krate":0,"index":2131},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508661,"byte_end":508684,"line_start":512,"line_end":512,"column_start":8,"column_end":31},"name":"read_rect_with_progress","qualname":"::image::ImageDecoderExt::read_rect_with_progress","value":"pub fn read_rect_with_progress<F: Fn(Progress) ->\n                               ()>(&mut Self, u32, u32, u32, u32, &mut [u8],\n                                   F) -> ImageResult<()>","parent":{"krate":0,"index":2127},"children":[],"decl_id":null,"docs":" Decode a rectangular section of the image, periodically reporting progress.","sig":null,"attributes":[{"value":"/ Decode a rectangular section of the image, periodically reporting progress.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507945,"byte_end":508024,"line_start":500,"line_end":500,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508029,"byte_end":508032,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ The output buffer will be filled with fields specified by","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508037,"byte_end":508098,"line_start":502,"line_end":502,"column_start":5,"column_end":66}},{"value":"/ [`ImageDecoder::color_type()`](trait.ImageDecoder.html#fn.color_type),","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508103,"byte_end":508177,"line_start":503,"line_end":503,"column_start":5,"column_end":79}},{"value":"/ in that order, each field represented in native-endian.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508182,"byte_end":508241,"line_start":504,"line_end":504,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508246,"byte_end":508249,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ The progress callback will be called at least once at the start and the end of decoding,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508254,"byte_end":508346,"line_start":506,"line_end":506,"column_start":5,"column_end":97}},{"value":"/ implementations are encouraged to call this more often,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508351,"byte_end":508410,"line_start":507,"line_end":507,"column_start":5,"column_end":64}},{"value":"/ with a frequency meaningful for display to the end-user.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508415,"byte_end":508475,"line_start":508,"line_end":508,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508480,"byte_end":508483,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ This function will panic if the output buffer isn't at least","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508488,"byte_end":508552,"line_start":510,"line_end":510,"column_start":5,"column_end":69}},{"value":"/ `color_type().bytes_per_pixel() * color_type().channel_count() * width * height` bytes long.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508557,"byte_end":508653,"line_start":511,"line_end":511,"column_start":5,"column_end":101}}]},{"kind":"Trait","id":{"krate":0,"index":2133},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508915,"byte_end":508931,"line_start":524,"line_end":524,"column_start":11,"column_end":27},"name":"AnimationDecoder","qualname":"::image::AnimationDecoder","value":"AnimationDecoder<'a>","parent":null,"children":[{"krate":0,"index":2135}],"decl_id":null,"docs":" AnimationDecoder trait\n","sig":null,"attributes":[{"value":"/ AnimationDecoder trait","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508878,"byte_end":508904,"line_start":523,"line_end":523,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2135},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509003,"byte_end":509014,"line_start":526,"line_end":526,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::AnimationDecoder::into_frames","value":"pub fn into_frames(Self) -> Frames","parent":{"krate":0,"index":2133},"children":[],"decl_id":null,"docs":" Consume the decoder producing a series of frames.\n","sig":null,"attributes":[{"value":"/ Consume the decoder producing a series of frames.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":508942,"byte_end":508995,"line_start":525,"line_end":525,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":2136},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509086,"byte_end":509098,"line_start":530,"line_end":530,"column_start":11,"column_end":23},"name":"ImageEncoder","qualname":"::image::ImageEncoder","value":"ImageEncoder","parent":null,"children":[{"krate":0,"index":2137}],"decl_id":null,"docs":" The trait all encoders implement\n","sig":null,"attributes":[{"value":"/ The trait all encoders implement","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509039,"byte_end":509075,"line_start":529,"line_end":529,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2137},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509647,"byte_end":509658,"line_start":541,"line_end":541,"column_start":8,"column_end":19},"name":"write_image","qualname":"::image::ImageEncoder::write_image","value":"pub fn write_image(Self, &[u8], u32, u32, ColorType) -> ImageResult<()>","parent":{"krate":0,"index":2136},"children":[],"decl_id":null,"docs":" Writes all the bytes in an image to the encoder.","sig":null,"attributes":[{"value":"/ Writes all the bytes in an image to the encoder.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509105,"byte_end":509157,"line_start":531,"line_end":531,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509162,"byte_end":509165,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ This function takes a slice of bytes of the pixel data of the image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509170,"byte_end":509241,"line_start":533,"line_end":533,"column_start":5,"column_end":76}},{"value":"/ and encodes them. Unlike particular format encoders inherent impl encode","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509246,"byte_end":509322,"line_start":534,"line_end":534,"column_start":5,"column_end":81}},{"value":"/ methods where endianness is not specified, here image data bytes should","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509327,"byte_end":509402,"line_start":535,"line_end":535,"column_start":5,"column_end":80}},{"value":"/ always be in native endian. The implementor will reorder the endianess","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509407,"byte_end":509481,"line_start":536,"line_end":536,"column_start":5,"column_end":79}},{"value":"/ as necessary for the target encoding format.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509486,"byte_end":509534,"line_start":537,"line_end":537,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509539,"byte_end":509542,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ See also `ImageDecoder::read_image` which reads byte buffers into","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509547,"byte_end":509616,"line_start":539,"line_end":539,"column_start":5,"column_end":74}},{"value":"/ native endian.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509621,"byte_end":509639,"line_start":540,"line_end":540,"column_start":5,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3744},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509852,"byte_end":509858,"line_start":552,"line_end":552,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":3747},{"krate":0,"index":3748},{"krate":0,"index":3749},{"krate":0,"index":3750},{"krate":0,"index":3751}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":509795,"byte_end":509823,"line_start":550,"line_end":550,"column_start":1,"column_end":29}}]},{"kind":"Trait","id":{"krate":0,"index":2146},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510599,"byte_end":510615,"line_start":589,"line_end":589,"column_start":11,"column_end":27},"name":"GenericImageView","qualname":"::image::GenericImageView","value":"GenericImageView","parent":null,"children":[{"krate":0,"index":2147},{"krate":0,"index":2148},{"krate":0,"index":2149},{"krate":0,"index":2150},{"krate":0,"index":2151},{"krate":0,"index":2152},{"krate":0,"index":2153},{"krate":0,"index":2154},{"krate":0,"index":2155},{"krate":0,"index":2156},{"krate":0,"index":2157},{"krate":0,"index":2158}],"decl_id":null,"docs":" Trait to inspect an image.\n","sig":null,"attributes":[{"value":"/ Trait to inspect an image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510558,"byte_end":510588,"line_start":588,"line_end":588,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":2147},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510654,"byte_end":510659,"line_start":591,"line_end":591,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImageView::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510622,"byte_end":510644,"line_start":590,"line_end":590,"column_start":5,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":2148},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510893,"byte_end":510907,"line_start":596,"line_end":596,"column_start":10,"column_end":24},"name":"InnerImageView","qualname":"::image::GenericImageView::InnerImageView","value":"type InnerImageView: GenericImageView<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510673,"byte_end":510744,"line_start":593,"line_end":593,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510749,"byte_end":510820,"line_start":594,"line_end":594,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510825,"byte_end":510883,"line_start":595,"line_end":595,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2149},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511000,"byte_end":511010,"line_start":599,"line_end":599,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImageView::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510953,"byte_end":510992,"line_start":598,"line_end":598,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2150},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511074,"byte_end":511079,"line_start":602,"line_end":602,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImageView::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511038,"byte_end":511066,"line_start":601,"line_end":601,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2151},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511194,"byte_end":511200,"line_start":608,"line_end":608,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImageView::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511157,"byte_end":511186,"line_start":607,"line_end":607,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2152},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511327,"byte_end":511333,"line_start":614,"line_end":614,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImageView::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511278,"byte_end":511319,"line_start":613,"line_end":613,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2153},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511450,"byte_end":511459,"line_start":617,"line_end":617,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImageView::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511371,"byte_end":511442,"line_start":616,"line_end":616,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":2154},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511782,"byte_end":511791,"line_start":629,"line_end":629,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImageView::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511607,"byte_end":511646,"line_start":622,"line_end":622,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511651,"byte_end":511654,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511659,"byte_end":511671,"line_start":624,"line_end":624,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511676,"byte_end":511679,"line_start":625,"line_end":625,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511684,"byte_end":511724,"line_start":626,"line_end":626,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511729,"byte_end":511732,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511737,"byte_end":511774,"line_start":628,"line_end":628,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2155},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512112,"byte_end":512128,"line_start":639,"line_end":639,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImageView::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511836,"byte_end":511875,"line_start":631,"line_end":631,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511880,"byte_end":511883,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511888,"byte_end":511963,"line_start":633,"line_end":633,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511968,"byte_end":511980,"line_start":634,"line_end":634,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511985,"byte_end":511988,"line_start":635,"line_end":635,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":511993,"byte_end":512048,"line_start":636,"line_end":636,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512053,"byte_end":512056,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: #method.in_bounds","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512061,"byte_end":512097,"line_start":638,"line_end":638,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2156},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512360,"byte_end":512366,"line_start":646,"line_end":646,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImageView::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512209,"byte_end":512263,"line_start":643,"line_end":643,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512268,"byte_end":512321,"line_start":644,"line_end":644,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512326,"byte_end":512352,"line_start":645,"line_end":645,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2157},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512636,"byte_end":512641,"line_start":659,"line_end":659,"column_start":8,"column_end":13},"name":"inner","qualname":"::image::GenericImageView::inner","value":"pub fn inner(&Self) -> &Self::InnerImageView","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns a reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a reference to the underlying image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512580,"byte_end":512628,"line_start":658,"line_end":658,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":2158},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512838,"byte_end":512842,"line_start":663,"line_end":663,"column_start":8,"column_end":12},"name":"view","qualname":"::image::GenericImageView::view","value":"pub fn view(&Self, u32, u32, u32, u32) -> SubImage<&Self::InnerImageView>","parent":{"krate":0,"index":2146},"children":[],"decl_id":null,"docs":" Returns an subimage that is an immutable view into this image.\n You can use [`GenericImage::sub_image`] if you need a mutable view instead.\n","sig":null,"attributes":[{"value":"/ Returns an subimage that is an immutable view into this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512680,"byte_end":512746,"line_start":661,"line_end":661,"column_start":5,"column_end":71}},{"value":"/ You can use [`GenericImage::sub_image`] if you need a mutable view instead.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512751,"byte_end":512830,"line_start":662,"line_end":662,"column_start":5,"column_end":84}}]},{"kind":"Trait","id":{"krate":0,"index":2159},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513041,"byte_end":513053,"line_start":669,"line_end":669,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: GenericImageView","parent":null,"children":[{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2162},{"krate":0,"index":2163},{"krate":0,"index":2164},{"krate":0,"index":2165},{"krate":0,"index":2167},{"krate":0,"index":2169},{"krate":0,"index":2170}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":512994,"byte_end":513030,"line_start":668,"line_end":668,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":2160},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513298,"byte_end":513308,"line_start":673,"line_end":673,"column_start":10,"column_end":20},"name":"InnerImage","qualname":"::image::GenericImage::InnerImage","value":"type InnerImage: GenericImage<Pixel = Self::Pixel>;","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Underlying image type. This is mainly used by SubImages in order to\n always have a reference to the original image. This allows for less\n indirections and it eases the use of nested SubImages.\n","sig":null,"attributes":[{"value":"/ Underlying image type. This is mainly used by SubImages in order to","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513078,"byte_end":513149,"line_start":670,"line_end":670,"column_start":5,"column_end":76}},{"value":"/ always have a reference to the original image. This allows for less","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513154,"byte_end":513225,"line_start":671,"line_end":671,"column_start":5,"column_end":76}},{"value":"/ indirections and it eases the use of nested SubImages.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513230,"byte_end":513288,"line_start":672,"line_end":672,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2161},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513498,"byte_end":513511,"line_start":680,"line_end":680,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513350,"byte_end":513412,"line_start":675,"line_end":675,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513417,"byte_end":513420,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513425,"byte_end":513437,"line_start":677,"line_end":677,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513442,"byte_end":513445,"line_start":678,"line_end":678,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513450,"byte_end":513490,"line_start":679,"line_end":679,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2162},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513685,"byte_end":513694,"line_start":687,"line_end":687,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513565,"byte_end":513599,"line_start":682,"line_end":682,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513604,"byte_end":513607,"line_start":683,"line_end":683,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513612,"byte_end":513624,"line_start":684,"line_end":684,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513629,"byte_end":513632,"line_start":685,"line_end":685,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513637,"byte_end":513677,"line_start":686,"line_end":686,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2163},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514048,"byte_end":514064,"line_start":697,"line_end":697,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513748,"byte_end":513783,"line_start":689,"line_end":689,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513788,"byte_end":513791,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513796,"byte_end":513871,"line_start":691,"line_end":691,"column_start":5,"column_end":80}},{"value":"/ # Safety","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513876,"byte_end":513888,"line_start":692,"line_end":692,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513893,"byte_end":513896,"line_start":693,"line_end":693,"column_start":5,"column_end":8}},{"value":"/ The coordinates must be [`in_bounds`] of the image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513901,"byte_end":513956,"line_start":694,"line_end":694,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513961,"byte_end":513964,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ [`in_bounds`]: traits.GenericImageView.html#method.in_bounds","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513969,"byte_end":514033,"line_start":696,"line_end":696,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":2164},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514331,"byte_end":514342,"line_start":704,"line_end":704,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514162,"byte_end":514232,"line_start":701,"line_end":701,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514237,"byte_end":514240,"line_start":702,"line_end":702,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514245,"byte_end":514323,"line_start":703,"line_end":703,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":2165},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":515104,"byte_end":515113,"line_start":721,"line_end":721,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> ImageResult<()> where\nO: GenericImageView<Pixel = Self::Pixel>","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514396,"byte_end":514460,"line_start":706,"line_end":706,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514465,"byte_end":514468,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514473,"byte_end":514534,"line_start":708,"line_end":708,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514539,"byte_end":514572,"line_start":709,"line_end":709,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514577,"byte_end":514580,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a piece of the other image, use [`GenericImageView::view`].","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514585,"byte_end":514670,"line_start":711,"line_end":711,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514675,"byte_end":514678,"line_start":712,"line_end":712,"column_start":5,"column_end":8}},{"value":"/ You can use [`FlatSamples`] to source pixels from an arbitrary regular raster of channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514683,"byte_end":514775,"line_start":713,"line_end":713,"column_start":5,"column_end":97}},{"value":"/ values, for example from a foreign interface or a fixed image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514780,"byte_end":514846,"line_start":714,"line_end":714,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514851,"byte_end":514854,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514859,"byte_end":514872,"line_start":716,"line_end":716,"column_start":5,"column_end":18}},{"value":"/ Returns an error if the image is too large to be copied at the given position","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514877,"byte_end":514958,"line_start":717,"line_end":717,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514963,"byte_end":514966,"line_start":718,"line_end":718,"column_start":5,"column_end":8}},{"value":"/ [`GenericImageView::view`]: trait.GenericImageView.html#method.view","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":514971,"byte_end":515042,"line_start":719,"line_end":719,"column_start":5,"column_end":76}},{"value":"/ [`FlatSamples`]: flat/struct.FlatSamples.html","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":515047,"byte_end":515096,"line_start":720,"line_end":720,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":2167},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":516160,"byte_end":516171,"line_start":749,"line_end":749,"column_start":8,"column_end":19},"name":"copy_within","qualname":"::image::GenericImage::copy_within","value":"pub fn copy_within(&mut Self, Rect, u32, u32) -> bool","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Copies all of the pixels from one part of this image to another part of this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from one part of this image to another part of this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":515812,"byte_end":515899,"line_start":742,"line_end":742,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":515904,"byte_end":515907,"line_start":743,"line_end":743,"column_start":5,"column_end":8}},{"value":"/ The destination rectangle of the copy is specified with the top-left corner placed at (x, y).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":515912,"byte_end":516009,"line_start":744,"line_end":744,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":516014,"byte_end":516017,"line_start":745,"line_end":745,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":516022,"byte_end":516035,"line_start":746,"line_end":746,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":516040,"byte_end":516109,"line_start":747,"line_end":747,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":516114,"byte_end":516152,"line_start":748,"line_end":748,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2169},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":517829,"byte_end":517838,"line_start":785,"line_end":785,"column_start":8,"column_end":17},"name":"inner_mut","qualname":"::image::GenericImage::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut Self::InnerImage","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the underlying image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the underlying image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":517765,"byte_end":517821,"line_start":784,"line_end":784,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2170},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518033,"byte_end":518042,"line_start":789,"line_end":789,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image(&mut Self, u32, u32, u32, u32)\n-> SubImage<&mut Self::InnerImage>","parent":{"krate":0,"index":2159},"children":[],"decl_id":null,"docs":" Returns a mutable subimage that is a view into this image.\n If you want an immutable subimage instead, use [`GenericImageView::view`]\n","sig":null,"attributes":[{"value":"/ Returns a mutable subimage that is a view into this image.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":517881,"byte_end":517943,"line_start":787,"line_end":787,"column_start":5,"column_end":67}},{"value":"/ If you want an immutable subimage instead, use [`GenericImageView::view`]","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":517948,"byte_end":518025,"line_start":788,"line_end":788,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":2171},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518533,"byte_end":518541,"line_start":806,"line_end":806,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177}],"decl_id":null,"docs":" A View into another image","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518249,"byte_end":518278,"line_start":800,"line_end":800,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518279,"byte_end":518282,"line_start":801,"line_end":801,"column_start":1,"column_end":4}},{"value":"/ Instances of this struct can be created using:","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518283,"byte_end":518333,"line_start":802,"line_end":802,"column_start":1,"column_end":51}},{"value":"/   - [`GenericImage::sub_image`] to create a mutable view,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518334,"byte_end":518395,"line_start":803,"line_end":803,"column_start":1,"column_end":62}},{"value":"/   - [`GenericImageView::view`] to create an immutable view,","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518396,"byte_end":518459,"line_start":804,"line_end":804,"column_start":1,"column_end":64}},{"value":"/   - [`SubImage::new`] to instantiate the struct directly.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518460,"byte_end":518521,"line_start":805,"line_end":805,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518929,"byte_end":518932,"line_start":822,"line_end":822,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage<I>>::new","value":"pub fn new(I, u32, u32, u32, u32) -> SubImage<I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518889,"byte_end":518917,"line_start":821,"line_end":821,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":519221,"byte_end":519234,"line_start":833,"line_end":833,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage<I>>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":519165,"byte_end":519209,"line_start":832,"line_end":832,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":519468,"byte_end":519476,"line_start":841,"line_end":841,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage<I>>::to_image","value":"pub fn to_image(&Self) -> ImageBuffer<DerefPixel<I>, Vec<DerefSubpixel<I>>>\nwhere I: Deref, I::Target: GenericImage + 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":519413,"byte_end":519456,"line_start":840,"line_end":840,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532856,"byte_end":532871,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"EncodableLayout","qualname":"::traits::EncodableLayout","value":"EncodableLayout: seals::EncodableLayout","parent":null,"children":[{"krate":0,"index":2220}],"decl_id":null,"docs":" Types which are safe to treat as an immutable byte slice in a pixel layout\n for image encoding.\n","sig":null,"attributes":[{"value":"/ Types which are safe to treat as an immutable byte slice in a pixel layout","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532743,"byte_end":532821,"line_start":10,"line_end":10,"column_start":1,"column_end":79}},{"value":"/ for image encoding.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532822,"byte_end":532845,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2220},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532942,"byte_end":532950,"line_start":14,"line_end":14,"column_start":8,"column_end":16},"name":"as_bytes","qualname":"::traits::EncodableLayout::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":{"krate":0,"index":2219},"children":[],"decl_id":null,"docs":" Get the bytes of this value.\n","sig":null,"attributes":[{"value":"/ Get the bytes of this value.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532902,"byte_end":532934,"line_start":13,"line_end":13,"column_start":5,"column_end":37}}]},{"kind":"Trait","id":{"krate":0,"index":2225},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533238,"byte_end":533247,"line_start":30,"line_end":30,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533192,"byte_end":533227,"line_start":29,"line_end":29,"column_start":1,"column_end":36}}]},{"kind":"Trait","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533769,"byte_end":533780,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"Enlargeable","qualname":"::traits::Enlargeable","value":"Enlargeable: Sized + Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2239},{"krate":0,"index":2240}],"decl_id":null,"docs":" An Enlargable::Larger value should be enough to calculate\n the sum (average) of a few hundred or thousand Enlargeable values.\n","sig":null,"attributes":[{"value":"/ An Enlargable::Larger value should be enough to calculate","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533626,"byte_end":533687,"line_start":45,"line_end":45,"column_start":1,"column_end":62}},{"value":"/ the sum (average) of a few hundred or thousand Enlargeable values.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533688,"byte_end":533758,"line_start":46,"line_end":46,"column_start":1,"column_end":71}}]},{"kind":"Type","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533819,"byte_end":533825,"line_start":48,"line_end":48,"column_start":10,"column_end":16},"name":"Larger","qualname":"::traits::Enlargeable::Larger","value":"type Larger: Primitive + AddAssign + 'static;","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533868,"byte_end":533878,"line_start":50,"line_end":50,"column_start":8,"column_end":18},"name":"clamp_from","qualname":"::traits::Enlargeable::clamp_from","value":"pub fn clamp_from(Self::Larger) -> Self","parent":{"krate":0,"index":2238},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2247},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534350,"byte_end":534354,"line_start":71,"line_end":71,"column_start":11,"column_end":15},"name":"Lerp","qualname":"::traits::Lerp","value":"Lerp: Bounded + NumCast","parent":null,"children":[{"krate":0,"index":2248},{"krate":0,"index":2249}],"decl_id":null,"docs":" Linear interpolation without involving floating numbers.\n","sig":null,"attributes":[{"value":"/ Linear interpolation without involving floating numbers.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534279,"byte_end":534339,"line_start":70,"line_end":70,"column_start":1,"column_end":61}}]},{"kind":"Type","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534385,"byte_end":534390,"line_start":72,"line_end":72,"column_start":10,"column_end":15},"name":"Ratio","qualname":"::traits::Lerp::Ratio","value":"type Ratio: Primitive;","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534411,"byte_end":534415,"line_start":74,"line_end":74,"column_start":8,"column_end":12},"name":"lerp","qualname":"::traits::Lerp::lerp","value":"pub fn lerp(Self, Self, Self::Ratio) -> Self","parent":{"krate":0,"index":2247},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":2256},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535141,"byte_end":535146,"line_start":105,"line_end":105,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::traits::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":2257},{"krate":0,"index":2258},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272},{"krate":0,"index":2273},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2278},{"krate":0,"index":2280},{"krate":0,"index":2283},{"krate":0,"index":2286},{"krate":0,"index":2289},{"krate":0,"index":2292},{"krate":0,"index":2294},{"krate":0,"index":2296},{"krate":0,"index":2297}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535016,"byte_end":535040,"line_start":102,"line_end":102,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535041,"byte_end":535044,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535045,"byte_end":535130,"line_start":104,"line_end":104,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":2257},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535210,"byte_end":535218,"line_start":107,"line_end":107,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::traits::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535167,"byte_end":535200,"line_start":106,"line_end":106,"column_start":5,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":2258},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535293,"byte_end":535306,"line_start":110,"line_end":110,"column_start":11,"column_end":24},"name":"CHANNEL_COUNT","qualname":"::traits::Pixel::CHANNEL_COUNT","value":"u8","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" The number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ The number of channels of this pixel type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535236,"byte_end":535282,"line_start":109,"line_end":109,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535449,"byte_end":535462,"line_start":113,"line_end":113,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::traits::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535316,"byte_end":535370,"line_start":111,"line_end":111,"column_start":5,"column_end":59}},{"value":"deprecated(note = \"please use CHANNEL_COUNT associated constant\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535375,"byte_end":535441,"line_start":112,"line_end":112,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535558,"byte_end":535566,"line_start":118,"line_end":118,"column_start":8,"column_end":16},"name":"channels","qualname":"::traits::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535512,"byte_end":535550,"line_start":117,"line_end":117,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535654,"byte_end":535666,"line_start":121,"line_end":121,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::traits::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535601,"byte_end":535646,"line_start":120,"line_end":120,"column_start":5,"column_end":50}}]},{"kind":"Const","id":{"krate":0,"index":2262},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535832,"byte_end":535843,"line_start":125,"line_end":125,"column_start":11,"column_end":22},"name":"COLOR_MODEL","qualname":"::traits::Pixel::COLOR_MODEL","value":"&'static str","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" A string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ A string that can help to interpret the meaning each channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535709,"byte_end":535773,"line_start":123,"line_end":123,"column_start":5,"column_end":69}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535778,"byte_end":535821,"line_start":124,"line_end":124,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536060,"byte_end":536071,"line_start":129,"line_end":129,"column_start":8,"column_end":19},"name":"color_model","qualname":"::traits::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns a string that can help to interpret the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interpret the meaning each channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535863,"byte_end":535935,"line_start":126,"line_end":126,"column_start":5,"column_end":77}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535940,"byte_end":535983,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"deprecated(note = \"please use COLOR_MODEL associated constant\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535988,"byte_end":536052,"line_start":128,"line_end":128,"column_start":5,"column_end":69}}]},{"kind":"Const","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536175,"byte_end":536185,"line_start":134,"line_end":134,"column_start":11,"column_end":21},"name":"COLOR_TYPE","qualname":"::traits::Pixel::COLOR_TYPE","value":"ColorType","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ ColorType for this pixel format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536129,"byte_end":536164,"line_start":133,"line_end":133,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536325,"byte_end":536335,"line_start":137,"line_end":137,"column_start":8,"column_end":18},"name":"color_type","qualname":"::traits::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536202,"byte_end":536249,"line_start":135,"line_end":135,"column_start":5,"column_end":52}},{"value":"deprecated(note = \"please use COLOR_TYPE associated constant\")","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536254,"byte_end":536317,"line_start":136,"line_end":136,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536573,"byte_end":536582,"line_start":145,"line_end":145,"column_start":8,"column_end":17},"name":"channels4","qualname":"::traits::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536389,"byte_end":536454,"line_start":141,"line_end":141,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536459,"byte_end":536534,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536539,"byte_end":536542,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536547,"byte_end":536565,"line_start":144,"line_end":144,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536885,"byte_end":536898,"line_start":158,"line_end":158,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::traits::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536718,"byte_end":536774,"line_start":154,"line_end":154,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536779,"byte_end":536846,"line_start":155,"line_end":155,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536851,"byte_end":536854,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":536859,"byte_end":536877,"line_start":157,"line_end":157,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":2268},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537252,"byte_end":537262,"line_start":169,"line_end":169,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::traits::Pixel::from_slice","value":"pub fn from_slice(&[Self::Subpixel]) -> &Self","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537028,"byte_end":537060,"line_start":165,"line_end":165,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537065,"byte_end":537068,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537073,"byte_end":537157,"line_start":167,"line_end":167,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537162,"byte_end":537244,"line_start":168,"line_end":168,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537542,"byte_end":537556,"line_start":175,"line_end":175,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::traits::Pixel::from_slice_mut","value":"pub fn from_slice_mut(&mut [Self::Subpixel]) -> &mut Self","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537304,"byte_end":537350,"line_start":171,"line_end":171,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537355,"byte_end":537358,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537363,"byte_end":537447,"line_start":173,"line_end":173,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to present panics if the pixel is used later on.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537452,"byte_end":537534,"line_start":174,"line_end":174,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":2270},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537643,"byte_end":537649,"line_start":178,"line_end":178,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::traits::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537606,"byte_end":537635,"line_start":177,"line_end":177,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537745,"byte_end":537752,"line_start":181,"line_end":181,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::traits::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537686,"byte_end":537737,"line_start":180,"line_end":180,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2272},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537828,"byte_end":537835,"line_start":184,"line_end":184,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::traits::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537790,"byte_end":537820,"line_start":183,"line_end":183,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2273},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537933,"byte_end":537946,"line_start":187,"line_end":187,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::traits::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537873,"byte_end":537925,"line_start":186,"line_end":186,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538022,"byte_end":538028,"line_start":190,"line_end":190,"column_start":8,"column_end":14},"name":"to_bgr","qualname":"::traits::Pixel::to_bgr","value":"pub fn to_bgr(&Self) -> Bgr<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":537985,"byte_end":538014,"line_start":189,"line_end":189,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538124,"byte_end":538131,"line_start":193,"line_end":193,"column_start":8,"column_end":15},"name":"to_bgra","qualname":"::traits::Pixel::to_bgra","value":"pub fn to_bgra(&Self) -> Bgra<Self::Subpixel>","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Convert this pixel to BGR with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to BGR with an alpha channel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538065,"byte_end":538116,"line_start":192,"line_end":192,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2276},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538238,"byte_end":538241,"line_start":196,"line_end":196,"column_start":8,"column_end":11},"name":"map","qualname":"::traits::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538169,"byte_end":538230,"line_start":195,"line_end":195,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538402,"byte_end":538407,"line_start":201,"line_end":201,"column_start":8,"column_end":13},"name":"apply","qualname":"::traits::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538333,"byte_end":538394,"line_start":200,"line_end":200,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538632,"byte_end":538646,"line_start":207,"line_end":207,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::traits::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where\nF: FnMut(Self::Subpixel) -> Self::Subpixel, G: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538495,"byte_end":538567,"line_start":205,"line_end":205,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538572,"byte_end":538624,"line_start":206,"line_end":206,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538952,"byte_end":538968,"line_start":214,"line_end":214,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::traits::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: FnMut(Self::Subpixel)\n-> Self::Subpixel, G: FnMut(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538799,"byte_end":538871,"line_start":212,"line_end":212,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":538876,"byte_end":538944,"line_start":213,"line_end":213,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":2286},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539197,"byte_end":539214,"line_start":220,"line_end":220,"column_start":8,"column_end":25},"name":"map_without_alpha","qualname":"::traits::Pixel::map_without_alpha","value":"pub fn map_without_alpha<F>(&Self, F) -> Self where F: FnMut(Self::Subpixel)\n-> Self::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539117,"byte_end":539189,"line_start":219,"line_end":219,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539506,"byte_end":539525,"line_start":231,"line_end":231,"column_start":8,"column_end":27},"name":"apply_without_alpha","qualname":"::traits::Pixel::apply_without_alpha","value":"pub fn apply_without_alpha<F>(&mut Self, F) where F: FnMut(Self::Subpixel) ->\nSelf::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Works in place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539402,"byte_end":539474,"line_start":229,"line_end":229,"column_start":5,"column_end":77}},{"value":"/ Works in place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539479,"byte_end":539498,"line_start":230,"line_end":230,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539768,"byte_end":539772,"line_start":240,"line_end":240,"column_start":8,"column_end":12},"name":"map2","qualname":"::traits::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539666,"byte_end":539730,"line_start":238,"line_end":238,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539735,"byte_end":539760,"line_start":239,"line_end":239,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":2294},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540012,"byte_end":540018,"line_start":246,"line_end":246,"column_start":8,"column_end":14},"name":"apply2","qualname":"::traits::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: FnMut(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539894,"byte_end":539958,"line_start":244,"line_end":244,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":539963,"byte_end":540004,"line_start":245,"line_end":245,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":2296},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540165,"byte_end":540171,"line_start":251,"line_end":251,"column_start":8,"column_end":14},"name":"invert","qualname":"::traits::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540136,"byte_end":540157,"line_start":250,"line_end":250,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":2297},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540282,"byte_end":540287,"line_start":254,"line_end":254,"column_start":8,"column_end":13},"name":"blend","qualname":"::traits::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":2256},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540189,"byte_end":540274,"line_start":253,"line_end":253,"column_start":5,"column_end":90}}]},{"kind":"Trait","id":{"krate":0,"index":2299},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":540396,"byte_end":540411,"line_start":259,"line_end":259,"column_start":15,"column_end":30},"name":"EncodableLayout","qualname":"::traits::seals::EncodableLayout","value":"EncodableLayout","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3756},"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544421,"byte_end":544440,"line_start":108,"line_end":108,"column_start":12,"column_end":31},"name":"NonExhaustiveMarker","qualname":"::utils::NonExhaustiveMarker","value":"NonExhaustiveMarker {  }","parent":null,"children":[{"krate":0,"index":3757}],"decl_id":null,"docs":" A marker struct for __NonExhaustive enums.","sig":null,"attributes":[{"value":"/ A marker struct for __NonExhaustive enums.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":543698,"byte_end":543744,"line_start":97,"line_end":97,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":543745,"byte_end":543748,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is an empty type that can not be constructed. When an enum contains a tuple variant that","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":543749,"byte_end":543846,"line_start":99,"line_end":99,"column_start":1,"column_end":98}},{"value":"/ includes this type the optimizer can statically determined tha the branch is never taken while","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":543847,"byte_end":543945,"line_start":100,"line_end":100,"column_start":1,"column_end":99}},{"value":"/ at the same time the matching of the branch is required.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":543946,"byte_end":544006,"line_start":101,"line_end":101,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544007,"byte_end":544010,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ The effect is thus very similar to the actual `#[non_exhaustive]` attribute with no runtime","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544011,"byte_end":544106,"line_start":103,"line_end":103,"column_start":1,"column_end":96}},{"value":"/ costs. Also note that we use a dirty trick to not only hide this type from the doc but make it","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544107,"byte_end":544205,"line_start":104,"line_end":104,"column_start":1,"column_end":99}},{"value":"/ inaccessible. The visibility in this module is pub but the module itself is not and the","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544206,"byte_end":544297,"line_start":105,"line_end":105,"column_start":1,"column_end":92}},{"value":"/ top-level crate never exports the type.","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/utils/mod.rs","byte_start":544298,"byte_end":544341,"line_start":106,"line_end":106,"column_start":1,"column_end":44}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17386,"byte_end":17402,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18100,"byte_end":18113,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18889,"byte_end":18902,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19679,"byte_end":19693,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20072,"byte_end":20082,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20439,"byte_end":20449,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20565,"byte_end":20580,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20709,"byte_end":20724,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20974,"byte_end":20990,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21293,"byte_end":21303,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21764,"byte_end":21774,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":22227,"byte_end":22243,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23865,"byte_end":23881,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23909,"byte_end":23923,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":24958,"byte_end":24972,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25177,"byte_end":25190,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25651,"byte_end":25664,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25869,"byte_end":25882,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26329,"byte_end":26342,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26547,"byte_end":26557,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":113}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26940,"byte_end":26950,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26978,"byte_end":26993,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32088,"byte_end":32096,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76162,"byte_end":76169,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76927,"byte_end":76935,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":321},{"krate":0,"index":322}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92155,"byte_end":92167,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111053,"byte_end":111059,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":474},{"krate":0,"index":475},{"krate":0,"index":476},{"krate":0,"index":477},{"krate":0,"index":478},{"krate":0,"index":479}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112441,"byte_end":112447,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":481},{"krate":0,"index":483}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113233,"byte_end":113239,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":486},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":128400,"byte_end":128410,"line_start":306,"line_end":306,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133413,"byte_end":133425,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":571},{"krate":0,"index":572},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":575},{"krate":0,"index":577},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":583},{"krate":0,"index":584},{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":590},{"krate":0,"index":591}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146020,"byte_end":146023,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":595}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":603},{"krate":0,"index":605},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163447,"byte_end":163458,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":641}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169310,"byte_end":169314,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648},{"krate":0,"index":649},{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":653},{"krate":0,"index":654},{"krate":0,"index":655}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174899,"byte_end":174906,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":659},{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179282,"byte_end":179293,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":672},{"krate":0,"index":673}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179902,"byte_end":179913,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":677}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":180517,"byte_end":180521,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":687},{"krate":0,"index":690}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":181768,"byte_end":181775,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699},{"krate":0,"index":702}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183042,"byte_end":183049,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183944,"byte_end":183954,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":712}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184106,"byte_end":184129,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":714}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184337,"byte_end":184360,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184934,"byte_end":184939,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185874,"byte_end":185879,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185904,"byte_end":185914,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":720}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":194808,"byte_end":194819,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":196742,"byte_end":196754,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":800}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198825,"byte_end":198835,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198991,"byte_end":199003,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":199350,"byte_end":199367,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":208024,"byte_end":208032,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":209418,"byte_end":209427,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":831}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210692,"byte_end":210707,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":873},{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212563,"byte_end":212573,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":877},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":881},{"krate":0,"index":882},{"krate":0,"index":883},{"krate":0,"index":884},{"krate":0,"index":885},{"krate":0,"index":886},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244477,"byte_end":244486,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":914},{"krate":0,"index":915}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244906,"byte_end":244916,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":245591,"byte_end":245601,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247360,"byte_end":247370,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":959},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":254485,"byte_end":254495,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259593,"byte_end":259604,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1004}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260313,"byte_end":260323,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1012},{"krate":0,"index":1013}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260736,"byte_end":260747,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":262493,"byte_end":262502,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1024}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":262760,"byte_end":262770,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1027}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":289042,"byte_end":289051,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1103},{"krate":0,"index":1104},{"krate":0,"index":1105},{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292560,"byte_end":292572,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1108}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292910,"byte_end":292922,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293743,"byte_end":293754,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1128},{"krate":0,"index":1129},{"krate":0,"index":1131},{"krate":0,"index":1132},{"krate":0,"index":1133},{"krate":0,"index":1137},{"krate":0,"index":1141}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":305153,"byte_end":305164,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325708,"byte_end":325717,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":326475,"byte_end":326484,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1248},{"krate":0,"index":1249}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327739,"byte_end":327749,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1258}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":332363,"byte_end":332373,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1265},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1273}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":334434,"byte_end":334445,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1285},{"krate":0,"index":1287}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":339993,"byte_end":340004,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1291}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":340142,"byte_end":340155,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1298},{"krate":0,"index":1299}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342764,"byte_end":342774,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":346609,"byte_end":346619,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1316}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":347854,"byte_end":347864,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1323}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":348881,"byte_end":348896,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":348982,"byte_end":348992,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350625,"byte_end":350631,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1341}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351221,"byte_end":351227,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1344},{"krate":0,"index":1345}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351746,"byte_end":351751,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352700,"byte_end":352705,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":358741,"byte_end":358749,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1368}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362210,"byte_end":362216,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1414},{"krate":0,"index":1415}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362460,"byte_end":362466,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1420}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362615,"byte_end":362621,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1424}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362830,"byte_end":362836,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1428}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362962,"byte_end":362968,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363383,"byte_end":363392,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1439},{"krate":0,"index":1440}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363648,"byte_end":363657,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1445}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363806,"byte_end":363815,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1449}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364063,"byte_end":364072,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1453}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364638,"byte_end":364642,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1461}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":365541,"byte_end":365545,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1465},{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":365955,"byte_end":365959,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1470}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366108,"byte_end":366112,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1474}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366479,"byte_end":366483,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1477}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366607,"byte_end":366611,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1480}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":367198,"byte_end":367205,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1488}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368126,"byte_end":368133,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1492},{"krate":0,"index":1493}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368556,"byte_end":368563,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1497}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368712,"byte_end":368719,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1501}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369101,"byte_end":369108,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1504}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369564,"byte_end":369579,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369982,"byte_end":369997,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1521}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370123,"byte_end":370138,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370314,"byte_end":370329,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370868,"byte_end":370881,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1537},{"krate":0,"index":1538}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371419,"byte_end":371432,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1543}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371556,"byte_end":371569,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1546}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371739,"byte_end":371752,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1549}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372280,"byte_end":372298,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1560},{"krate":0,"index":1561}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372709,"byte_end":372727,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1566}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372858,"byte_end":372876,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1569}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373424,"byte_end":373440,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1579},{"krate":0,"index":1580}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373987,"byte_end":374003,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":1585}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374132,"byte_end":374148,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1588}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377170,"byte_end":377181,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1593},{"krate":0,"index":1594},{"krate":0,"index":1595},{"krate":0,"index":1596},{"krate":0,"index":1597},{"krate":0,"index":1598},{"krate":0,"index":1599},{"krate":0,"index":1600},{"krate":0,"index":1601},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1604},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1611},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1614}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383970,"byte_end":383981,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1621},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386579,"byte_end":386590,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1628}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387242,"byte_end":387253,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387996,"byte_end":388007,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1638},{"krate":0,"index":1639}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388271,"byte_end":388282,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1643}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388548,"byte_end":388559,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388830,"byte_end":388841,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1652}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":389102,"byte_end":389113,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1656}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":389472,"byte_end":389483,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":1660},{"krate":0,"index":1661},{"krate":0,"index":1662},{"krate":0,"index":1663},{"krate":0,"index":1664},{"krate":0,"index":1665},{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":390307,"byte_end":390318,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1670},{"krate":0,"index":1671},{"krate":0,"index":1672},{"krate":0,"index":1673},{"krate":0,"index":1674},{"krate":0,"index":1675},{"krate":0,"index":1676}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":393903,"byte_end":393914,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1686}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396348,"byte_end":396357,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1691}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":397755,"byte_end":397766,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407811,"byte_end":407820,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1728}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411529,"byte_end":411546,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1730}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":412834,"byte_end":412851,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1732}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418947,"byte_end":418948,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1739}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":419386,"byte_end":419387,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":420643,"byte_end":420647,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1757}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":420876,"byte_end":420880,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1760}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421108,"byte_end":421112,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1763}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421337,"byte_end":421341,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1766}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421568,"byte_end":421572,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1769}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421720,"byte_end":421724,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1771}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421968,"byte_end":421972,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1773}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422216,"byte_end":422220,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422406,"byte_end":422410,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1777}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422596,"byte_end":422600,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1779}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422837,"byte_end":422842,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423104,"byte_end":423109,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1785}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423370,"byte_end":423375,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1788}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423640,"byte_end":423645,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423911,"byte_end":423916,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1794}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424129,"byte_end":424134,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1796}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424434,"byte_end":424439,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424782,"byte_end":424786,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1801}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425087,"byte_end":425091,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425393,"byte_end":425397,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1807}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425698,"byte_end":425702,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1810}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426003,"byte_end":426007,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426284,"byte_end":426288,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1815}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426650,"byte_end":426654,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1817}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427051,"byte_end":427055,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1820}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427356,"byte_end":427360,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427662,"byte_end":427666,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427967,"byte_end":427971,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1829}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428272,"byte_end":428276,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1832}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428600,"byte_end":428603,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1835}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428872,"byte_end":428875,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429143,"byte_end":429146,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1841}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429411,"byte_end":429414,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1844}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429678,"byte_end":429681,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429919,"byte_end":429922,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430147,"byte_end":430150,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430423,"byte_end":430426,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1854}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430694,"byte_end":430697,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1857}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430962,"byte_end":430965,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1860}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":431235,"byte_end":431238,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1863}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":431502,"byte_end":431505,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1866}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":433171,"byte_end":433176,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1872}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":434181,"byte_end":434185,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1875}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":434295,"byte_end":434299,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1878}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":436507,"byte_end":436511,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1881}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":438717,"byte_end":438720,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1884}],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":438829,"byte_end":438832,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1887}],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439051,"byte_end":439056,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1892}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439229,"byte_end":439233,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1895}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439421,"byte_end":439425,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1898}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439638,"byte_end":439642,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1901}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439855,"byte_end":439858,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1904}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":440120,"byte_end":440123,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1907}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451659,"byte_end":451671,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955},{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1969},{"krate":0,"index":1970},{"krate":0,"index":1971},{"krate":0,"index":1972},{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983},{"krate":0,"index":1984},{"krate":0,"index":1985},{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992},{"krate":0,"index":1993},{"krate":0,"index":1994},{"krate":0,"index":1995},{"krate":0,"index":1996},{"krate":0,"index":1997},{"krate":0,"index":1998},{"krate":0,"index":1999},{"krate":0,"index":2000},{"krate":0,"index":2001},{"krate":0,"index":2002},{"krate":0,"index":2003},{"krate":0,"index":2004},{"krate":0,"index":2005},{"krate":0,"index":2006},{"krate":0,"index":2007},{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2010},{"krate":0,"index":2011},{"krate":0,"index":2012},{"krate":0,"index":2013},{"krate":0,"index":2014},{"krate":0,"index":2015},{"krate":0,"index":2016},{"krate":0,"index":2017},{"krate":0,"index":2018},{"krate":0,"index":2019},{"krate":0,"index":2020},{"krate":0,"index":2021},{"krate":0,"index":2022},{"krate":0,"index":2023},{"krate":0,"index":2026},{"krate":0,"index":2028}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476311,"byte_end":476323,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2031},{"krate":0,"index":2032},{"krate":0,"index":2033},{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476856,"byte_end":476868,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2040},{"krate":0,"index":2041},{"krate":0,"index":2042}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491189,"byte_end":491200,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2083},{"krate":0,"index":2085}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":494144,"byte_end":494161,"line_start":149,"line_end":149,"column_start":28,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2087}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":495461,"byte_end":495476,"line_start":186,"line_end":186,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":2095},{"krate":0,"index":2096}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503346,"byte_end":503354,"line_start":370,"line_end":370,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":2111},{"krate":0,"index":2112},{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510002,"byte_end":510008,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":2141},{"krate":0,"index":2142}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510476,"byte_end":510482,"line_start":582,"line_end":582,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2145}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518871,"byte_end":518879,"line_start":820,"line_end":820,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":520016,"byte_end":520024,"line_start":861,"line_end":861,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":2189},{"krate":0,"index":2190},{"krate":0,"index":2191},{"krate":0,"index":2192},{"krate":0,"index":2193},{"krate":0,"index":2194},{"krate":0,"index":2195}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":520845,"byte_end":520853,"line_start":893,"line_end":893,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2198},{"krate":0,"index":2199},{"krate":0,"index":2200},{"krate":0,"index":2201},{"krate":0,"index":2202},{"krate":0,"index":2203}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8223,"byte_end":8228,"line_start":181,"line_end":181,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":55}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8621,"byte_end":8625,"line_start":200,"line_end":200,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":128}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27927,"byte_end":27929,"line_start":2,"line_end":2,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":129}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/mod.rs","byte_start":27939,"byte_end":27944,"line_start":3,"line_end":3,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8666,"byte_end":8674,"line_start":203,"line_end":203,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":175}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/mod.rs","byte_start":45864,"byte_end":45872,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":265}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8700,"byte_end":8702,"line_start":206,"line_end":206,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":446}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8748,"byte_end":8752,"line_start":209,"line_end":209,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":542}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":8803,"byte_end":8806,"line_start":213,"line_end":213,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":721}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9026,"byte_end":9030,"line_start":225,"line_end":225,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":973}},{"kind":"Mod","span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/lib.rs","byte_start":9064,"byte_end":9067,"line_start":227,"line_end":227,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1194}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":17386,"byte_end":17402,"line_start":194,"line_end":194,"column_start":6,"column_end":22},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":2337},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18100,"byte_end":18113,"line_start":217,"line_end":217,"column_start":6,"column_end":19},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":2400},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":18889,"byte_end":18902,"line_start":245,"line_end":245,"column_start":6,"column_end":19},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":2366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":19679,"byte_end":19693,"line_start":273,"line_end":273,"column_start":6,"column_end":20},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":2371},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20072,"byte_end":20082,"line_start":288,"line_end":288,"column_start":6,"column_end":16},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2405},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20439,"byte_end":20449,"line_start":302,"line_end":302,"column_start":26,"column_end":36},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20565,"byte_end":20580,"line_start":308,"line_end":308,"column_start":28,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2431},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20709,"byte_end":20724,"line_start":314,"line_end":314,"column_start":36,"column_end":51},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2431},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":20974,"byte_end":20990,"line_start":323,"line_end":323,"column_start":32,"column_end":48},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2337},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21293,"byte_end":21303,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":21764,"byte_end":21774,"line_start":348,"line_end":348,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":2316},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":22227,"byte_end":22243,"line_start":361,"line_end":361,"column_start":23,"column_end":39},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":2337},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23865,"byte_end":23881,"line_start":404,"line_end":404,"column_start":16,"column_end":32},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2337},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":23909,"byte_end":23923,"line_start":406,"line_end":406,"column_start":23,"column_end":37},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2371},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":24958,"byte_end":24972,"line_start":438,"line_end":438,"column_start":16,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":2371},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25177,"byte_end":25190,"line_start":447,"line_end":447,"column_start":23,"column_end":36},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":2366},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25651,"byte_end":25664,"line_start":465,"line_end":465,"column_start":16,"column_end":29},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":2366},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":25869,"byte_end":25882,"line_start":474,"line_end":474,"column_start":23,"column_end":36},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":2400},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26329,"byte_end":26342,"line_start":486,"line_end":486,"column_start":16,"column_end":29},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":2400},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26547,"byte_end":26557,"line_start":495,"line_end":495,"column_start":23,"column_end":33},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":2405},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26940,"byte_end":26950,"line_start":505,"line_end":505,"column_start":16,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":2405},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/error.rs","byte_start":26978,"byte_end":26993,"line_start":507,"line_end":507,"column_start":23,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":2431},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/math/nq.rs","byte_start":32088,"byte_end":32096,"line_start":111,"line_end":111,"column_start":6,"column_end":14},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":145},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76162,"byte_end":76169,"line_start":231,"line_end":231,"column_start":19,"column_end":26},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":2488},"to":{"krate":0,"index":304}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/colorops.rs","byte_start":76927,"byte_end":76935,"line_start":266,"line_end":266,"column_start":23,"column_end":31},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":145},"to":{"krate":0,"index":304}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/imageops/sample.rs","byte_start":92155,"byte_end":92167,"line_start":363,"line_end":363,"column_start":34,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":369},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":111053,"byte_end":111059,"line_start":68,"line_end":68,"column_start":15,"column_end":21},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":112441,"byte_end":112447,"line_start":115,"line_end":115,"column_start":6,"column_end":12},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/reader.rs","byte_start":113233,"byte_end":113239,"line_start":137,"line_end":137,"column_start":25,"column_end":31},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":468},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/io/free_functions.rs","byte_start":128400,"byte_end":128410,"line_start":306,"line_end":306,"column_start":26,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":133413,"byte_end":133425,"line_start":124,"line_end":124,"column_start":6,"column_end":18},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":2523},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146020,"byte_end":146023,"line_start":437,"line_end":437,"column_start":6,"column_end":9},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":146281,"byte_end":146292,"line_start":452,"line_end":452,"column_start":14,"column_end":25},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":163447,"byte_end":163458,"line_start":873,"line_end":873,"column_start":22,"column_end":33},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2512},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":169310,"byte_end":169314,"line_start":1028,"line_end":1028,"column_start":24,"column_end":28},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2573},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":174899,"byte_end":174906,"line_start":1161,"line_end":1161,"column_start":24,"column_end":31},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2586},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179282,"byte_end":179293,"line_start":1275,"line_end":1275,"column_start":40,"column_end":51},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2512},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":179902,"byte_end":179913,"line_start":1294,"line_end":1294,"column_start":43,"column_end":54},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":2512},"to":{"krate":2,"index":2183}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":180517,"byte_end":180521,"line_start":1312,"line_end":1312,"column_start":45,"column_end":49},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2573},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":181768,"byte_end":181775,"line_start":1357,"line_end":1357,"column_start":45,"column_end":52},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":2586},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183042,"byte_end":183049,"line_start":1402,"line_end":1402,"column_start":41,"column_end":48},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":2586},"to":{"krate":0,"index":2159}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":183944,"byte_end":183954,"line_start":1431,"line_end":1431,"column_start":22,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184106,"byte_end":184129,"line_start":1435,"line_end":1435,"column_start":31,"column_end":54},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":2648},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184337,"byte_end":184360,"line_start":1440,"line_end":1440,"column_start":31,"column_end":54},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":2648},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":184934,"byte_end":184939,"line_start":1454,"line_end":1454,"column_start":23,"column_end":28},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":2599},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185874,"byte_end":185879,"line_start":1478,"line_end":1478,"column_start":23,"column_end":28},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":2599},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/flat.rs","byte_start":185904,"byte_end":185914,"line_start":1480,"line_end":1480,"column_start":21,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2623},"to":{"krate":2,"index":1690}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":194808,"byte_end":194819,"line_start":100,"line_end":100,"column_start":23,"column_end":34},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":792},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":196742,"byte_end":196754,"line_start":158,"line_end":158,"column_start":23,"column_end":35},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2706},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198825,"byte_end":198835,"line_start":195,"line_end":195,"column_start":29,"column_end":39},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2316},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":198991,"byte_end":199003,"line_start":201,"line_end":201,"column_start":23,"column_end":35},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":2706},"to":{"krate":1,"index":1642}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":199350,"byte_end":199367,"line_start":216,"line_end":216,"column_start":23,"column_end":40},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":2783},"to":{"krate":2,"index":6208}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":208024,"byte_end":208032,"line_start":479,"line_end":479,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":2814},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":209418,"byte_end":209427,"line_start":523,"line_end":523,"column_start":6,"column_end":15},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":2824},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":210692,"byte_end":210707,"line_start":578,"line_end":578,"column_start":32,"column_end":47},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":865},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":212563,"byte_end":212573,"line_start":630,"line_end":630,"column_start":22,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":832},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244477,"byte_end":244486,"line_start":1420,"line_end":1420,"column_start":18,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":907},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":244906,"byte_end":244916,"line_start":1434,"line_end":1434,"column_start":52,"column_end":62},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":2114}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/decoder.rs","byte_start":245591,"byte_end":245601,"line_start":1459,"line_end":1459,"column_start":55,"column_end":65},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":832},"to":{"krate":0,"index":2127}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":247360,"byte_end":247370,"line_start":28,"line_end":28,"column_start":25,"column_end":35},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/bmp/encoder.rs","byte_start":254485,"byte_end":254495,"line_start":225,"line_end":225,"column_start":37,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":948},"to":{"krate":0,"index":2136}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":259593,"byte_end":259604,"line_start":18,"line_end":18,"column_start":15,"column_end":26},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":998},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260313,"byte_end":260323,"line_start":40,"line_end":40,"column_start":18,"column_end":28},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1005},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":260736,"byte_end":260747,"line_start":54,"line_end":54,"column_start":45,"column_end":56},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":998},"to":{"krate":0,"index":2114}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":262493,"byte_end":262502,"line_start":114,"line_end":114,"column_start":6,"column_end":15},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/decoder.rs","byte_start":262760,"byte_end":262770,"line_start":125,"line_end":125,"column_start":6,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":289042,"byte_end":289051,"line_start":170,"line_end":170,"column_start":25,"column_end":34},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1092},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292560,"byte_end":292572,"line_start":306,"line_end":306,"column_start":6,"column_end":18},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2871},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":292910,"byte_end":292922,"line_start":318,"line_end":318,"column_start":18,"column_end":30},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2871},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":293743,"byte_end":293754,"line_start":354,"line_end":354,"column_start":20,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1111},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/jpeg/encoder.rs","byte_start":305153,"byte_end":305164,"line_start":682,"line_end":682,"column_start":37,"column_end":48},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1111},"to":{"krate":0,"index":2136}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":325708,"byte_end":325717,"line_start":45,"line_end":45,"column_start":15,"column_end":24},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":326475,"byte_end":326484,"line_start":69,"line_end":69,"column_start":24,"column_end":33},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1236},"to":{"krate":1,"index":2961}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":327739,"byte_end":327749,"line_start":115,"line_end":115,"column_start":15,"column_end":25},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":332363,"byte_end":332373,"line_start":204,"line_end":204,"column_start":45,"column_end":55},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1250},"to":{"krate":0,"index":2114}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":334434,"byte_end":334445,"line_start":267,"line_end":267,"column_start":15,"column_end":26},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":339993,"byte_end":340004,"line_start":407,"line_end":407,"column_start":49,"column_end":60},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1274},"to":{"krate":0,"index":2133}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":340142,"byte_end":340155,"line_start":411,"line_end":411,"column_start":36,"column_end":49},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1292},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":342764,"byte_end":342774,"line_start":497,"line_end":497,"column_start":16,"column_end":26},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1300},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":346609,"byte_end":346619,"line_start":572,"line_end":572,"column_start":33,"column_end":43},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1300},"to":{"krate":0,"index":2136}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":347854,"byte_end":347864,"line_start":604,"line_end":604,"column_start":6,"column_end":16},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2316},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":348881,"byte_end":348896,"line_start":632,"line_end":632,"column_start":18,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2886},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/png.rs","byte_start":348982,"byte_end":348992,"line_start":638,"line_end":638,"column_start":18,"column_end":28},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2912},"to":{"krate":2,"index":1915}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":350625,"byte_end":350631,"line_start":14,"line_end":14,"column_start":10,"column_end":16},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1335},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351221,"byte_end":351227,"line_start":30,"line_end":30,"column_start":23,"column_end":29},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1335},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":351746,"byte_end":351751,"line_start":55,"line_end":55,"column_start":6,"column_end":11},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":2938},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":352700,"byte_end":352705,"line_start":102,"line_end":102,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":2945},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/animation.rs","byte_start":358741,"byte_end":358749,"line_start":258,"line_end":258,"column_start":22,"column_end":30},"kind":{"Impl":{"id":87}},"from":{"krate":2,"index":32469},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362210,"byte_end":362216,"line_start":26,"line_end":26,"column_start":38,"column_end":44},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362460,"byte_end":362466,"line_start":38,"line_end":38,"column_start":47,"column_end":53},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362615,"byte_end":362621,"line_start":47,"line_end":47,"column_start":49,"column_end":55},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362830,"byte_end":362836,"line_start":57,"line_end":57,"column_start":26,"column_end":32},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":362962,"byte_end":362968,"line_start":63,"line_end":63,"column_start":31,"column_end":37},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1407},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363383,"byte_end":363392,"line_start":83,"line_end":83,"column_start":38,"column_end":47},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363648,"byte_end":363657,"line_start":95,"line_end":95,"column_start":47,"column_end":56},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":363806,"byte_end":363815,"line_start":104,"line_end":104,"column_start":49,"column_end":58},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364063,"byte_end":364072,"line_start":116,"line_end":116,"column_start":31,"column_end":40},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":364638,"byte_end":364642,"line_start":140,"line_end":140,"column_start":25,"column_end":29},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1454},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":365541,"byte_end":365545,"line_start":161,"line_end":161,"column_start":38,"column_end":42},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":365955,"byte_end":365959,"line_start":177,"line_end":177,"column_start":47,"column_end":51},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366108,"byte_end":366112,"line_start":186,"line_end":186,"column_start":49,"column_end":53},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366479,"byte_end":366483,"line_start":200,"line_end":200,"column_start":26,"column_end":30},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":366607,"byte_end":366611,"line_start":206,"line_end":206,"column_start":31,"column_end":35},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1454},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":367198,"byte_end":367205,"line_start":230,"line_end":230,"column_start":25,"column_end":32},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1481},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368126,"byte_end":368133,"line_start":251,"line_end":251,"column_start":38,"column_end":45},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368556,"byte_end":368563,"line_start":267,"line_end":267,"column_start":47,"column_end":54},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":368712,"byte_end":368719,"line_start":276,"line_end":276,"column_start":49,"column_end":56},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":4921}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369101,"byte_end":369108,"line_start":290,"line_end":290,"column_start":31,"column_end":38},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1481},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369564,"byte_end":369579,"line_start":313,"line_end":313,"column_start":38,"column_end":53},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":369982,"byte_end":369997,"line_start":331,"line_end":331,"column_start":47,"column_end":62},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370123,"byte_end":370138,"line_start":340,"line_end":340,"column_start":26,"column_end":41},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370314,"byte_end":370329,"line_start":349,"line_end":349,"column_start":31,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1505},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":370868,"byte_end":370881,"line_start":374,"line_end":374,"column_start":38,"column_end":51},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371419,"byte_end":371432,"line_start":398,"line_end":398,"column_start":47,"column_end":60},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371556,"byte_end":371569,"line_start":407,"line_end":407,"column_start":26,"column_end":39},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":371739,"byte_end":371752,"line_start":416,"line_end":416,"column_start":31,"column_end":44},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1528},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372280,"byte_end":372298,"line_start":441,"line_end":441,"column_start":38,"column_end":56},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372709,"byte_end":372727,"line_start":459,"line_end":459,"column_start":47,"column_end":65},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":372858,"byte_end":372876,"line_start":468,"line_end":468,"column_start":31,"column_end":49},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1550},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373424,"byte_end":373440,"line_start":493,"line_end":493,"column_start":38,"column_end":54},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":373987,"byte_end":374003,"line_start":517,"line_end":517,"column_start":47,"column_end":63},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":4944}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":374132,"byte_end":374148,"line_start":526,"line_end":526,"column_start":31,"column_end":47},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":6203}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":377170,"byte_end":377181,"line_start":620,"line_end":620,"column_start":20,"column_end":31},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":383970,"byte_end":383981,"line_start":814,"line_end":814,"column_start":20,"column_end":31},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":386579,"byte_end":386590,"line_start":889,"line_end":889,"column_start":20,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387242,"byte_end":387253,"line_start":914,"line_end":914,"column_start":20,"column_end":31},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":387996,"byte_end":388007,"line_start":941,"line_end":941,"column_start":30,"column_end":41},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":2098}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388271,"byte_end":388282,"line_start":954,"line_end":954,"column_start":33,"column_end":44},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":2111}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388548,"byte_end":388559,"line_start":965,"line_end":965,"column_start":42,"column_end":53},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":2179}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":388830,"byte_end":388841,"line_start":978,"line_end":978,"column_start":45,"column_end":56},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":2183}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":389102,"byte_end":389113,"line_start":989,"line_end":989,"column_start":30,"column_end":41},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":2965},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":389472,"byte_end":389483,"line_start":1004,"line_end":1004,"column_start":41,"column_end":52},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":2965},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":390307,"byte_end":390318,"line_start":1037,"line_end":1037,"column_start":37,"column_end":48},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":2965},"to":{"krate":0,"index":2159}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":393903,"byte_end":393914,"line_start":1129,"line_end":1129,"column_start":26,"column_end":37},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":2965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":396348,"byte_end":396357,"line_start":1207,"line_end":1207,"column_start":6,"column_end":15},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1702},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/buffer.rs","byte_start":397755,"byte_end":397766,"line_start":1245,"line_end":1245,"column_start":67,"column_end":78},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":2965},"to":{"krate":0,"index":1687}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":407811,"byte_end":407820,"line_start":37,"line_end":37,"column_start":6,"column_end":15},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":2996},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":411529,"byte_end":411546,"line_start":148,"line_end":148,"column_start":6,"column_end":23},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":3035},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":412834,"byte_end":412851,"line_start":182,"line_end":182,"column_start":26,"column_end":43},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":3035},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":418947,"byte_end":418948,"line_start":388,"line_end":388,"column_start":32,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1738},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":419386,"byte_end":419387,"line_start":402,"line_end":402,"column_start":29,"column_end":30},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1745},"to":{"krate":0,"index":1740}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":420643,"byte_end":420647,"line_start":446,"line_end":446,"column_start":53,"column_end":57},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":420876,"byte_end":420880,"line_start":454,"line_end":454,"column_start":53,"column_end":57},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421108,"byte_end":421112,"line_start":462,"line_end":462,"column_start":52,"column_end":56},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421337,"byte_end":421341,"line_start":470,"line_end":470,"column_start":52,"column_end":56},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421568,"byte_end":421572,"line_start":478,"line_end":478,"column_start":54,"column_end":58},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421720,"byte_end":421724,"line_start":485,"line_end":485,"column_start":31,"column_end":35},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":421968,"byte_end":421972,"line_start":494,"line_end":494,"column_start":30,"column_end":34},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422216,"byte_end":422220,"line_start":503,"line_end":503,"column_start":31,"column_end":35},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422406,"byte_end":422410,"line_start":510,"line_end":510,"column_start":30,"column_end":34},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422596,"byte_end":422600,"line_start":517,"line_end":517,"column_start":32,"column_end":36},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":422837,"byte_end":422842,"line_start":527,"line_end":527,"column_start":53,"column_end":58},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423104,"byte_end":423109,"line_start":536,"line_end":536,"column_start":53,"column_end":58},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423370,"byte_end":423375,"line_start":545,"line_end":545,"column_start":52,"column_end":57},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423640,"byte_end":423645,"line_start":554,"line_end":554,"column_start":52,"column_end":57},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":423911,"byte_end":423916,"line_start":563,"line_end":563,"column_start":53,"column_end":58},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424129,"byte_end":424134,"line_start":571,"line_end":571,"column_start":32,"column_end":37},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424434,"byte_end":424439,"line_start":581,"line_end":581,"column_start":31,"column_end":36},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":424782,"byte_end":424786,"line_start":594,"line_end":594,"column_start":52,"column_end":56},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425087,"byte_end":425091,"line_start":605,"line_end":605,"column_start":52,"column_end":56},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425393,"byte_end":425397,"line_start":616,"line_end":616,"column_start":53,"column_end":57},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":425698,"byte_end":425702,"line_start":627,"line_end":627,"column_start":54,"column_end":58},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426003,"byte_end":426007,"line_start":638,"line_end":638,"column_start":53,"column_end":57},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426284,"byte_end":426288,"line_start":649,"line_end":649,"column_start":31,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":426650,"byte_end":426654,"line_start":660,"line_end":660,"column_start":30,"column_end":34},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427051,"byte_end":427055,"line_start":674,"line_end":674,"column_start":52,"column_end":56},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427356,"byte_end":427360,"line_start":685,"line_end":685,"column_start":52,"column_end":56},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427662,"byte_end":427666,"line_start":696,"line_end":696,"column_start":53,"column_end":57},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":427967,"byte_end":427971,"line_start":707,"line_end":707,"column_start":54,"column_end":58},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428272,"byte_end":428276,"line_start":718,"line_end":718,"column_start":53,"column_end":57},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428600,"byte_end":428603,"line_start":732,"line_end":732,"column_start":53,"column_end":56},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":428872,"byte_end":428875,"line_start":742,"line_end":742,"column_start":53,"column_end":56},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429143,"byte_end":429146,"line_start":752,"line_end":752,"column_start":52,"column_end":55},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429411,"byte_end":429414,"line_start":762,"line_end":762,"column_start":54,"column_end":57},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429678,"byte_end":429681,"line_start":772,"line_end":772,"column_start":53,"column_end":56},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":429919,"byte_end":429922,"line_start":782,"line_end":782,"column_start":30,"column_end":33},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430147,"byte_end":430150,"line_start":790,"line_end":790,"column_start":29,"column_end":32},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430423,"byte_end":430426,"line_start":801,"line_end":801,"column_start":53,"column_end":56},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430694,"byte_end":430697,"line_start":811,"line_end":811,"column_start":52,"column_end":55},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":430962,"byte_end":430965,"line_start":822,"line_end":822,"column_start":53,"column_end":56},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":431235,"byte_end":431238,"line_start":832,"line_end":832,"column_start":54,"column_end":57},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":431502,"byte_end":431505,"line_start":842,"line_end":842,"column_start":53,"column_end":56},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1734}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":433171,"byte_end":433176,"line_start":896,"line_end":896,"column_start":30,"column_end":35},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":434181,"byte_end":434185,"line_start":929,"line_end":929,"column_start":30,"column_end":34},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":434295,"byte_end":434299,"line_start":935,"line_end":935,"column_start":30,"column_end":34},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":436507,"byte_end":436511,"line_start":993,"line_end":993,"column_start":30,"column_end":34},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":438717,"byte_end":438720,"line_start":1049,"line_end":1049,"column_start":30,"column_end":33},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":438829,"byte_end":438832,"line_start":1055,"line_end":1055,"column_start":30,"column_end":33},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1868}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439051,"byte_end":439056,"line_start":1068,"line_end":1068,"column_start":31,"column_end":36},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":3546},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439229,"byte_end":439233,"line_start":1077,"line_end":1077,"column_start":31,"column_end":35},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":3459},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439421,"byte_end":439425,"line_start":1088,"line_end":1088,"column_start":31,"column_end":35},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":3488},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439638,"byte_end":439642,"line_start":1099,"line_end":1099,"column_start":31,"column_end":35},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":3517},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":439855,"byte_end":439858,"line_start":1110,"line_end":1110,"column_start":31,"column_end":34},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":3401},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/color.rs","byte_start":440120,"byte_end":440123,"line_start":1124,"line_end":1124,"column_start":31,"column_end":34},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":3430},"to":{"krate":0,"index":1888}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":451659,"byte_end":451671,"line_start":134,"line_end":134,"column_start":6,"column_end":18},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":3626},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476311,"byte_end":476323,"line_start":817,"line_end":817,"column_start":27,"column_end":39},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":3626},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/dynimage.rs","byte_start":476856,"byte_end":476868,"line_start":839,"line_end":839,"column_start":23,"column_end":35},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":3626},"to":{"krate":0,"index":2159}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":491189,"byte_end":491200,"line_start":67,"line_end":67,"column_start":6,"column_end":17},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":3659},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":494144,"byte_end":494161,"line_start":149,"line_end":149,"column_start":28,"column_end":45},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":3704},"to":{"krate":2,"index":1845}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":495461,"byte_end":495476,"line_start":186,"line_end":186,"column_start":6,"column_end":21},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2088},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503346,"byte_end":503354,"line_start":370,"line_end":370,"column_start":6,"column_end":14},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":3729},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":503860,"byte_end":503865,"line_start":390,"line_end":390,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2114}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507561,"byte_end":507573,"line_start":487,"line_end":487,"column_start":32,"column_end":44},"kind":"SuperTrait","from":{"krate":0,"index":2114},"to":{"krate":0,"index":2127}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":507580,"byte_end":507585,"line_start":487,"line_end":487,"column_start":51,"column_end":56},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2127}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510002,"byte_end":510008,"line_start":560,"line_end":560,"column_start":44,"column_end":50},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":3744},"to":{"krate":2,"index":4989}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":510476,"byte_end":510482,"line_start":582,"line_end":582,"column_start":27,"column_end":33},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":3744},"to":{"krate":2,"index":1625}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":513055,"byte_end":513071,"line_start":669,"line_end":669,"column_start":25,"column_end":41},"kind":"SuperTrait","from":{"krate":0,"index":2146},"to":{"krate":0,"index":2159}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":518871,"byte_end":518879,"line_start":820,"line_end":820,"column_start":9,"column_end":17},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":2171},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":520016,"byte_end":520024,"line_start":861,"line_end":861,"column_start":30,"column_end":38},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":2171},"to":{"krate":0,"index":2146}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/image.rs","byte_start":520845,"byte_end":520853,"line_start":893,"line_end":893,"column_start":26,"column_end":34},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":2171},"to":{"krate":0,"index":2159}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":532880,"byte_end":532895,"line_start":12,"line_end":12,"column_start":35,"column_end":50},"kind":"SuperTrait","from":{"krate":0,"index":2299},"to":{"krate":0,"index":2219}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533249,"byte_end":533253,"line_start":30,"line_end":30,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":1937},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533256,"byte_end":533263,"line_start":30,"line_end":30,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533266,"byte_end":533269,"line_start":30,"line_end":30,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":15,"index":589},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533272,"byte_end":533282,"line_start":30,"line_end":30,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1690},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533291,"byte_end":533296,"line_start":30,"line_end":30,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533299,"byte_end":533306,"line_start":30,"line_end":30,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2225}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533782,"byte_end":533787,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1932},"to":{"krate":0,"index":2238}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533790,"byte_end":533797,"line_start":47,"line_end":47,"column_start":32,"column_end":39},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2238}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":533800,"byte_end":533807,"line_start":47,"line_end":47,"column_start":42,"column_end":49},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2238}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534356,"byte_end":534363,"line_start":71,"line_end":71,"column_start":17,"column_end":24},"kind":"SuperTrait","from":{"krate":15,"index":92},"to":{"krate":0,"index":2247}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":534366,"byte_end":534373,"line_start":71,"line_end":71,"column_start":27,"column_end":34},"kind":"SuperTrait","from":{"krate":15,"index":176},"to":{"krate":0,"index":2247}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535148,"byte_end":535152,"line_start":105,"line_end":105,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":1937},"to":{"krate":0,"index":2256}},{"span":{"file_name":"/Users/linkov/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.23.10/./src/traits.rs","byte_start":535155,"byte_end":535160,"line_start":105,"line_end":105,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1625},"to":{"krate":0,"index":2256}}]}